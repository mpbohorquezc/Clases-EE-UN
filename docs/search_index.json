[["index.html", "Cuadernos Estadística Espacial Capítulo 1 Introducción 1.1 Indice", " Cuadernos Estadística Espacial Martha Bohorquez 2023-I Capítulo 1 Introducción En los siguientes cuadernos encontrará ejemplos con código sobre estadística espacial. Para poder correr todos los ejemplos clone el repositorio de la siguiente forma. Debe tener instalado previamente git en su computador. git clone https://github.com/mpbohorquezc/Clases-EE-UN.git Si esta corriendo sobre Ubuntu o Mint es importante tener algunos compiladores previamente instalados para poder instanciar algunas de las librerías. En general con los siguientes comandos podría correr cualquiera de los cuadernos sin problema sudo apt-get install r-base-dev sudo apt install liblapack-dev libopenblas-dev Si alguna dependencia hace falta algunos repositorios los puede descargar e instalar a manera de archivo .tar.gz o se encuentran simplemente en los repositorios del CRAN. 1.1 Indice 1. Introducción 2. Geoestadística con sgeostat 3. Geoestadística Univariada con geoR 4. Otros Tipos de Kriging "],["geoestadística-con-sgeostat.html", "Capítulo 2 Geoestadística con sgeostat 2.1 Data Load 2.2 Libraries 2.3 Including Plots", " Capítulo 2 Geoestadística con sgeostat 2.1 Data Load rm(list=ls()) aquifer=read.table(&quot;data_7_GeoestadisticaGEOSTAT/aquifer.txt&quot;,head=T,dec=&quot;,&quot;) head(aquifer) ## Este Norte Profundidad ## 1 42.78275 127.62282 1464 ## 2 -27.39691 90.78732 2553 ## 3 -1.16289 84.89600 2158 ## 4 -18.61823 76.45199 2455 ## 5 96.46549 64.58058 1756 ## 6 108.56243 82.92325 1702 2.2 Libraries library(scatterplot3d) library(ggplot2) library(cowplot) library(sgeostat) 2.3 Including Plots g1=ggplot(aquifer, aes(Profundidad, Este)) + geom_point() + geom_line() + xlab(&quot;Este&quot;) + ylab(&quot;Profundidad&quot;) g2=ggplot(aquifer, aes(Profundidad, Norte)) + geom_point() + geom_line() + xlab(&quot;Norte&quot;) + ylab(&quot;Profundidad&quot;) g3=ggplot(aquifer, aes(Profundidad, Este*Norte)) + geom_point() + geom_line() + xlab(&quot;Interacción este,norte&quot;) + ylab(&quot;Profundidad&quot;) plot_grid(g1,g2,g3) cor(aquifer) ## Este Norte Profundidad ## Este 1.0000000 0.1147565 -0.7788885 ## Norte 0.1147565 1.0000000 -0.6200923 ## Profundidad -0.7788885 -0.6200923 1.0000000 scatterplot3d(aquifer, highlight.3d=TRUE, col.axis=&quot;blue&quot;, col.grid=&quot;lightblue&quot;, main=&quot;Tendencia de Profundidad&quot;, pch=20) reg1 &lt;- lm(Profundidad ~ Este + Norte, data = aquifer) residuales1 &lt;- residuals(reg1) summary(reg1) ## ## Call: ## lm(formula = Profundidad ~ Este + Norte, data = aquifer) ## ## Residuals: ## Min 1Q Median 3Q Max ## -366.96 -161.53 -30.71 148.15 651.20 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 2591.4302 38.9599 66.52 &lt;2e-16 *** ## Este -6.7514 0.3438 -19.64 &lt;2e-16 *** ## Norte -5.9872 0.4066 -14.73 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 203.3 on 82 degrees of freedom ## Multiple R-squared: 0.8921, Adjusted R-squared: 0.8894 ## F-statistic: 338.9 on 2 and 82 DF, p-value: &lt; 2.2e-16 anova(reg1) ## Analysis of Variance Table ## ## Response: Profundidad ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Este 1 19045642 19045642 460.95 &lt; 2.2e-16 *** ## Norte 1 8960172 8960172 216.86 &lt; 2.2e-16 *** ## Residuals 82 3388069 41318 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 reg2 &lt;- lm(Profundidad ~ Este*Norte, data = aquifer) residuales2 &lt;- residuals(reg2) summary(reg2) ## ## Call: ## lm(formula = Profundidad ~ Este * Norte, data = aquifer) ## ## Residuals: ## Min 1Q Median 3Q Max ## -406.30 -138.88 -13.04 129.36 722.48 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 2.627e+03 3.833e+01 68.546 &lt; 2e-16 *** ## Este -8.287e+00 5.658e-01 -14.646 &lt; 2e-16 *** ## Norte -6.649e+00 4.327e-01 -15.366 &lt; 2e-16 *** ## Este:Norte 2.452e-02 7.401e-03 3.314 0.00138 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 191.9 on 81 degrees of freedom ## Multiple R-squared: 0.905, Adjusted R-squared: 0.9014 ## F-statistic: 257.1 on 3 and 81 DF, p-value: &lt; 2.2e-16 anova(reg2) ## Analysis of Variance Table ## ## Response: Profundidad ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Este 1 19045642 19045642 517.06 &lt; 2.2e-16 *** ## Norte 1 8960172 8960172 243.25 &lt; 2.2e-16 *** ## Este:Norte 1 404448 404448 10.98 0.001379 ** ## Residuals 81 2983621 36835 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 reg3 &lt;- lm(Profundidad ~ Este*Norte+I(Este^2)*I(Norte^2), data = aquifer) residuales3 &lt;- residuals(reg3) summary(reg3) ## ## Call: ## lm(formula = Profundidad ~ Este * Norte + I(Este^2) * I(Norte^2), ## data = aquifer) ## ## Residuals: ## Min 1Q Median 3Q Max ## -372.7 -133.6 -20.3 129.9 505.1 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 2.538e+03 7.038e+01 36.055 &lt;2e-16 *** ## Este -7.728e+00 6.028e-01 -12.822 &lt;2e-16 *** ## Norte -3.075e+00 1.770e+00 -1.737 0.0863 . ## I(Este^2) -6.792e-03 5.967e-03 -1.138 0.2585 ## I(Norte^2) -2.372e-02 9.049e-03 -2.622 0.0105 * ## Este:Norte 1.155e-02 9.680e-03 1.193 0.2365 ## I(Este^2):I(Norte^2) 2.251e-06 9.541e-07 2.360 0.0208 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 180.7 on 78 degrees of freedom ## Multiple R-squared: 0.9189, Adjusted R-squared: 0.9126 ## F-statistic: 147.2 on 6 and 78 DF, p-value: &lt; 2.2e-16 anova(reg3) ## Analysis of Variance Table ## ## Response: Profundidad ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Este 1 19045642 19045642 583.2335 &lt; 2.2e-16 *** ## Norte 1 8960172 8960172 274.3868 &lt; 2.2e-16 *** ## I(Este^2) 1 55368 55368 1.6955 0.1967061 ## I(Norte^2) 1 152170 152170 4.6599 0.0339500 * ## Este:Norte 1 451567 451567 13.8283 0.0003755 *** ## I(Este^2):I(Norte^2) 1 181854 181854 5.5689 0.0207829 * ## Residuals 78 2547110 32655 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 aquifer=data.frame(aquifer,resi=residuales2) aquifer_points=point(aquifer, x=&quot;Este&quot;, y=&quot;Norte&quot;) aquifer_pair=pair(aquifer_points,num.lags=10) ## .................................................................................... aquifer_pair$bins ## [1] 13.55308 40.65923 67.76539 94.87154 121.97770 149.08385 176.19001 203.29616 230.40231 257.50847 aquifer_pair$dist ## [1] 79.259313 61.292744 79.928307 82.801936 79.529981 84.514408 100.208558 107.152008 89.978304 104.178541 ## [11] 99.251058 88.899718 87.945051 70.165987 101.674210 112.872165 120.961308 119.047906 32.754634 46.156920 ## [21] 27.689647 74.010375 65.729277 107.885946 23.229828 87.355532 98.880862 107.581460 104.100879 104.150438 ## [31] 52.285133 71.583372 76.011219 87.033342 51.194751 129.805262 135.555137 122.851465 125.340545 49.219772 ## [41] 119.707807 119.905108 123.155773 112.001822 114.916408 115.460198 103.829256 104.179897 113.250471 96.543519 ## [51] 97.566287 96.700258 82.781495 63.156546 64.218322 65.835477 24.567616 35.106924 54.832521 45.809186 ## [61] 40.330280 56.110555 43.935695 46.519216 45.713177 50.431563 50.801512 61.124807 55.902846 44.604704 ## [71] 62.449544 185.852432 212.770561 123.323713 143.256052 141.135610 169.641608 148.183229 143.187705 166.176744 ## [81] 149.417056 150.251941 166.077707 163.208576 26.887385 16.809727 126.604452 136.186584 120.744768 128.246553 ## [91] 133.677383 129.683492 130.511843 129.585165 130.769649 94.037999 23.325651 105.307950 123.522448 133.049760 ## [101] 131.853495 97.723076 103.926618 93.928059 79.959358 72.440973 147.319592 99.601194 54.101819 55.632916 ## [111] 65.873035 62.225650 62.421578 91.321524 85.948043 81.564157 68.656804 129.954829 75.968082 81.463104 ## [121] 69.079720 74.315712 101.967004 145.128267 145.470767 148.443085 60.943426 61.309844 61.953184 55.477879 ## [131] 53.875066 81.957351 106.216568 112.476289 109.958325 60.835750 47.647137 41.488835 46.622184 68.602648 ## [141] 50.302378 25.536379 116.404782 113.601262 129.467598 121.021665 123.665659 117.773861 122.244383 123.329873 ## [151] 35.035312 47.569309 123.256491 138.745457 109.244082 133.512160 46.681150 67.213847 63.044705 93.401359 ## [161] 69.021050 65.844134 87.119306 71.711292 71.623479 87.607834 85.955074 19.390467 99.719691 109.743053 ## [171] 93.935947 101.986099 107.639797 102.835886 104.438025 103.169612 103.891523 102.463199 38.358960 81.664216 ## [181] 99.316764 108.881593 107.535211 73.645102 78.352029 70.404750 54.443063 46.299248 120.568893 83.851048 ## [191] 37.288803 44.569863 54.995234 51.090048 51.224206 64.612945 90.728452 88.827991 82.592611 112.322576 ## [201] 72.855185 78.735670 65.600016 69.384909 95.432264 119.389544 119.721763 122.770574 55.218671 57.286526 ## [211] 57.902693 47.558372 47.088151 67.393203 81.542159 87.260250 84.885977 74.954007 55.993465 51.066520 ## [221] 56.378090 58.765641 42.864537 23.977824 103.963732 99.820726 115.962930 105.087557 107.699134 104.691742 ## [231] 109.393102 110.147836 8.935570 20.810342 102.759122 116.226434 124.934060 154.892599 72.895198 93.334966 ## [241] 88.068221 119.167718 90.187266 82.934575 107.549563 89.306141 91.020385 106.441436 102.684866 115.694395 ## [251] 127.345190 108.834938 114.849692 119.917484 117.966887 116.818490 116.460383 119.367633 108.451356 38.352281 ## [261] 89.833391 108.237636 117.699999 116.595192 92.896467 97.006166 89.746654 66.086035 59.478867 135.007450 ## [271] 102.002272 37.463975 38.972587 49.341747 45.626279 45.816907 81.899220 98.972448 95.465680 84.467758 ## [281] 131.106894 61.508958 67.219814 54.379847 59.229277 109.962937 130.949665 131.302206 134.179409 45.391386 ## [291] 46.273339 46.922209 39.289389 37.894974 65.177065 91.335167 97.965398 95.345994 76.615804 61.339143 ## [301] 55.438231 60.800160 74.339658 56.837840 32.970465 121.092218 117.412471 133.534215 123.397383 126.028178 ## [311] 122.060727 126.701758 127.579674 24.388090 36.877600 122.044937 135.607864 105.937898 135.563755 56.560643 ## [321] 76.542772 70.232074 101.732211 70.933202 63.620474 88.187946 69.968883 71.632746 87.060671 83.467540 ## [331] 21.972471 11.475671 26.124366 31.693577 8.380367 30.070646 23.161115 6.209140 170.214009 132.147156 ## [341] 55.124664 51.353913 54.430899 52.534299 51.273236 37.275273 55.886912 54.189985 57.445879 25.084164 ## [351] 93.328281 91.783938 103.143550 104.608208 103.503813 103.379914 36.435484 154.009131 157.641397 164.508297 ## [361] 95.468867 128.230331 132.100422 124.079663 122.594467 129.038237 41.839840 41.896069 44.757880 115.677434 ## [371] 119.651450 119.827187 109.589713 111.574801 96.407188 47.008541 40.863332 42.707944 158.664674 137.180819 ## [381] 135.610055 139.227500 106.066768 108.434174 113.351195 113.851492 106.757833 115.974365 100.119280 101.167428 ## [391] 111.758515 115.045274 114.135715 91.989485 79.260339 76.004414 67.998656 205.317510 244.451025 172.056190 ## [401] 192.215708 185.711843 217.327924 182.775827 170.615069 197.830933 176.903637 181.060655 194.223065 187.354360 ## [411] 33.296292 47.430350 52.185586 28.807239 51.092135 44.174139 25.438238 167.220517 138.182432 76.668261 ## [421] 73.234460 75.787614 73.948195 46.856865 34.717604 51.958332 71.453225 72.567163 37.615554 84.619353 ## [431] 108.114937 120.142473 122.822502 121.306658 121.204583 45.467260 150.802242 155.528833 165.428365 80.320112 ## [441] 146.986778 151.198855 142.329620 141.366327 121.195938 60.430921 60.398169 62.804566 133.290441 137.236403 ## [451] 137.475098 126.631757 128.429927 116.236335 68.515181 62.705490 64.425905 160.345766 139.365571 138.762856 ## [461] 141.704715 103.997489 110.021801 119.507637 102.435955 95.493903 102.297808 87.028525 87.607833 99.959743 ## [471] 102.615712 101.446172 103.006820 90.484265 61.319896 49.232130 222.282477 259.668863 182.625380 203.078010 ## [481] 197.510015 228.831590 196.671699 185.675987 212.538787 192.069019 195.672024 209.541462 203.291640 17.277015 ## [491] 23.884135 9.249078 21.491573 15.286287 11.450345 170.601656 128.115646 43.656904 40.577200 44.579014 ## [501] 42.618833 54.909465 41.310805 59.001264 45.056489 49.596766 26.763715 97.524043 82.632041 93.555096 ## [511] 94.402263 93.505930 93.371758 34.104112 154.626514 157.659004 162.890952 102.794662 117.698059 121.410792 ## [521] 113.788513 112.068493 132.291092 35.751337 35.899705 39.065343 105.718715 109.690766 109.835396 99.942823 ## [531] 102.011910 85.478726 35.550970 29.422107 31.233687 156.692064 135.130369 133.066026 137.003184 106.655003 ## [541] 107.065422 109.472270 119.095243 112.012274 122.341800 106.370848 107.637851 117.219991 120.789057 120.020800 ## [551] 85.776560 73.175783 83.406457 77.404167 195.448896 235.323777 165.387896 185.318152 178.367342 210.034299 ## [561] 174.400625 161.707476 189.023901 167.928111 172.341580 185.133379 177.987519 6.945246 18.627690 4.217605 ## [571] 3.538855 22.028562 184.915166 138.122730 35.972138 26.539157 28.379003 26.522030 71.721980 58.352871 ## [581] 75.597715 48.804976 55.807481 23.615308 114.306908 84.398831 93.853821 92.744883 92.563786 92.399438 ## [591] 48.358436 169.178814 171.715192 175.409523 120.055674 114.439679 117.461202 111.484551 108.914153 148.583251 ## [601] 19.577446 19.802596 23.079974 104.658509 108.556755 108.600018 99.936292 102.205596 81.027208 29.044437 ## [611] 21.176438 23.920446 168.876200 147.370281 144.793973 149.046410 121.438341 120.220201 119.884679 136.150136 ## [621] 129.078555 139.589827 123.613920 124.899192 134.327696 137.950333 137.207183 93.339495 81.293693 100.653031 ## [631] 93.983902 193.807825 235.546757 171.115952 190.506699 182.770249 214.358016 176.713433 162.878229 190.250686 ## [641] 168.884755 173.883827 185.690539 177.870735 23.640710 3.249805 8.715944 26.852987 191.730323 144.155298 ## [651] 37.413293 24.624456 24.175644 22.529215 78.578576 65.132166 82.495350 53.853789 61.349535 23.267715 ## [661] 121.179386 88.369829 97.255209 95.455133 95.537495 95.363629 55.259820 176.026920 178.498974 181.936556 ## [671] 126.455290 116.380751 119.107648 113.815178 110.930536 155.519893 12.710986 12.956907 16.235144 107.498375 ## [681] 111.344344 111.350044 103.186085 105.509780 82.764284 31.481660 23.605644 26.465080 175.342914 153.863801 ## [691] 151.190009 155.500722 128.323224 126.896457 126.040052 142.935659 135.857963 146.206996 130.241022 131.487347 ## [701] 141.084371 144.669825 143.904762 98.908472 87.058888 107.020532 99.686568 196.099877 238.462396 175.954479 ## [711] 195.150446 187.183444 218.698358 180.459255 166.266684 193.596657 172.183164 177.373721 188.809522 180.764665 ## [721] 22.317307 15.382003 3.437885 176.959530 136.512223 50.739946 44.747769 46.981630 45.141200 58.988399 ## [731] 45.024607 63.463361 54.279827 58.812042 18.601119 101.287465 91.823868 102.650552 103.264654 102.464397 ## [741] 102.326113 41.492546 160.841422 164.218445 170.301015 103.849203 126.338500 129.922261 122.587236 120.718604 ## [751] 136.781063 33.464363 33.518140 36.378738 114.682791 118.651173 118.782931 109.017740 111.108731 93.795803 ## [761] 42.831179 35.926540 38.124541 164.265416 142.723612 140.877989 144.677025 112.840201 114.303436 117.796530 ## [771] 122.044237 114.948290 124.313903 108.443027 109.511456 119.985773 123.315227 122.423677 94.769551 82.123940 ## [781] 84.384682 76.119913 204.411257 244.485784 174.506369 194.475190 187.576824 219.241618 183.645520 170.911432 ## [791] 198.236771 177.122156 181.564891 194.307478 187.107556 6.942381 25.654823 188.575925 140.914886 35.323977 ## [801] 23.914020 24.740560 22.954554 75.888428 62.552259 79.731237 50.738832 58.155614 24.520786 118.459733 ## [811] 85.529379 94.584042 93.003840 92.999789 92.828912 52.191595 172.894451 175.328466 178.699841 124.259511 ## [821] 114.206793 117.043094 111.501589 108.727169 152.644482 15.884071 16.143270 19.414825 105.009557 108.874274 ## [831] 108.892461 100.564082 102.871753 80.646317 29.016717 21.088973 23.935007 172.100123 150.623739 147.942845 ## [841] 152.257147 125.225080 123.689040 122.792585 140.344062 133.274448 143.807146 127.831019 129.116781 138.529324 ## [851] 142.159045 141.418952 95.717823 83.841033 104.851824 98.020618 193.818136 235.971588 172.910544 192.153605 ## [861] 184.243655 215.779715 177.703173 163.616639 190.963245 169.562023 174.693966 186.247541 178.275056 18.737051 ## [871] 184.535191 138.925018 39.216710 30.064439 31.620790 29.801376 70.151597 56.595621 74.169502 50.567171 ## [881] 57.179151 20.604436 112.768411 86.670382 96.366737 95.519959 95.245282 95.084623 47.801433 168.708384 ## [891] 171.418563 175.590062 117.739658 117.436853 120.536078 114.368016 111.893482 147.355589 20.552740 20.723073 ## [901] 23.940959 107.376679 111.290272 111.346714 102.504082 104.749293 84.106386 32.092436 24.308347 26.988269 ## [911] 169.147431 147.612011 145.172641 149.343494 120.858841 120.175116 120.569480 134.381034 127.297535 137.532933 ## [921] 121.572330 122.803384 132.500100 136.053707 135.273216 94.604171 82.410214 98.304595 91.143963 196.670144 ## [931] 238.185162 172.840403 192.342218 184.740028 216.357921 179.021894 165.349018 192.729750 171.390538 176.307314 ## [941] 188.262664 180.531009 176.192874 137.037872 53.955044 48.185639 50.355542 48.525718 57.472319 43.474935 ## [951] 62.067580 56.366583 60.478997 19.039807 99.532881 93.984024 104.983203 105.841536 104.956089 104.821782 ## [961] 41.580905 160.015183 163.559936 170.109685 101.285284 129.071761 132.728396 125.214583 123.445490 135.244117 ## [971] 36.207850 36.239004 38.998722 117.169036 121.141050 121.285302 111.378079 113.438740 96.688492 45.996146 ## [981] 39.207933 41.352716 164.178558 142.663354 140.961999 144.666976 112.045807 114.055945 118.276990 119.992693 ## [991] 112.900891 121.970751 106.145670 107.156985 117.879619 121.132970 120.205821 95.955338 83.263654 81.831468 ## [ reached getOption(&quot;max.print&quot;) -- omitted 2570 entries ] aquifer_pair$from ## [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ## [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ## [75] 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 ## [112] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 ## [149] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 ## [186] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 ## [223] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 ## [260] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 ## [297] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 ## [334] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 ## [371] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 ## [408] 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 ## [445] 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 ## [482] 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 ## [519] 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 ## [556] 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 ## [593] 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 ## [630] 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 ## [667] 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 ## [704] 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 ## [741] 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 ## [778] 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 ## [815] 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 ## [852] 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 ## [889] 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 ## [926] 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 ## [963] 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 ## [1000] 13 ## [ reached getOption(&quot;max.print&quot;) -- omitted 2570 entries ] aquifer_pair$lags ## [1] 3 3 3 4 3 4 4 4 4 4 4 4 4 3 4 5 5 5 2 2 2 3 3 4 1 4 4 4 4 4 2 3 3 4 2 5 6 ## [38] 5 5 2 5 5 5 5 5 5 4 4 5 4 4 4 4 3 3 3 1 2 3 2 2 3 2 2 2 2 2 3 3 2 3 7 8 5 ## [75] 6 6 7 6 6 7 6 6 7 7 1 1 5 6 5 5 5 5 5 5 5 4 1 4 5 5 5 4 4 4 3 3 6 4 2 3 3 ## [112] 3 3 4 4 4 3 5 3 4 3 3 4 6 6 6 3 3 3 3 2 4 4 5 5 3 2 2 2 3 2 1 5 5 5 5 5 5 ## [149] 5 5 2 2 5 6 5 5 2 3 3 4 3 3 4 3 3 4 4 1 4 5 4 4 4 4 4 4 4 4 2 4 4 5 4 3 3 ## [186] 3 3 2 5 4 2 2 3 2 2 3 4 4 4 5 3 3 3 3 4 5 5 5 3 3 3 2 2 3 4 4 4 3 3 2 3 3 ## [223] 2 1 4 4 5 4 4 4 5 5 1 1 4 5 5 6 3 4 4 5 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 ## [260] 2 4 4 5 5 4 4 4 3 3 5 4 2 2 2 2 2 4 4 4 4 5 3 3 3 3 5 5 5 5 2 2 2 2 2 3 4 ## [297] 4 4 3 3 3 3 3 3 2 5 5 5 5 5 5 5 5 1 2 5 6 4 6 3 3 3 4 3 3 4 3 3 4 4 1 1 1 ## [334] 2 1 2 1 1 7 5 3 2 3 2 2 2 3 2 3 1 4 4 4 4 4 4 2 6 6 7 4 5 5 5 5 5 2 2 2 5 ## [371] 5 5 5 5 4 2 2 2 6 6 6 6 4 5 5 5 4 5 4 4 5 5 5 4 3 3 3 8 10 7 8 7 9 7 7 8 7 ## [408] 7 8 7 2 2 2 2 2 2 1 7 6 3 3 3 3 2 2 2 3 3 2 4 4 5 5 5 5 2 6 6 7 3 6 6 6 6 ## [445] 5 3 3 3 5 6 6 5 5 5 3 3 3 6 6 6 6 4 5 5 4 4 4 4 4 4 4 4 4 4 3 2 9 10 7 8 8 ## [482] 9 8 7 8 8 8 8 8 1 1 1 1 1 1 7 5 2 2 2 2 3 2 3 2 2 1 4 4 4 4 4 4 2 6 6 7 4 ## [519] 5 5 5 5 5 2 2 2 4 5 5 4 4 4 2 2 2 6 5 5 6 4 4 5 5 5 5 4 4 5 5 5 4 3 4 3 8 ## [556] 9 7 7 7 8 7 6 7 7 7 7 7 1 1 1 1 1 7 6 2 1 2 1 3 3 3 2 3 1 5 4 4 4 4 4 2 7 ## [593] 7 7 5 5 5 5 5 6 1 1 1 4 5 5 4 4 3 2 1 1 7 6 6 6 5 5 5 6 5 6 5 5 5 6 6 4 3 ## [630] 4 4 8 9 7 8 7 8 7 7 8 7 7 7 7 1 1 1 1 8 6 2 1 1 1 3 3 4 2 3 1 5 4 4 4 4 4 ## [667] 3 7 7 7 5 5 5 5 5 6 1 1 1 4 5 5 4 4 4 2 1 1 7 6 6 6 5 5 5 6 6 6 5 5 6 6 6 ## [704] 4 4 4 4 8 9 7 8 7 9 7 7 8 7 7 7 7 1 1 1 7 6 2 2 2 2 3 2 3 3 3 1 4 4 4 4 4 ## [741] 4 2 6 7 7 4 5 5 5 5 6 2 2 2 5 5 5 5 5 4 2 2 2 7 6 6 6 5 5 5 5 5 5 5 5 5 5 ## [778] 5 4 4 4 3 8 10 7 8 7 9 7 7 8 7 7 8 7 1 1 7 6 2 1 1 1 3 3 3 2 3 1 5 4 4 4 4 ## [815] 4 2 7 7 7 5 5 5 5 5 6 1 1 1 4 5 5 4 4 3 2 1 1 7 6 6 6 5 5 5 6 5 6 5 5 6 6 ## [852] 6 4 4 4 4 8 9 7 8 7 8 7 7 8 7 7 7 7 1 7 6 2 2 2 2 3 3 3 2 3 1 5 4 4 4 4 4 ## [889] 2 7 7 7 5 5 5 5 5 6 1 1 1 4 5 5 4 4 4 2 1 1 7 6 6 6 5 5 5 5 5 6 5 5 5 6 5 ## [926] 4 4 4 4 8 9 7 8 7 8 7 7 8 7 7 7 7 7 6 2 2 2 2 3 2 3 3 3 1 4 4 4 4 4 4 2 6 ## [963] 7 7 4 5 5 5 5 5 2 2 2 5 5 5 5 5 4 2 2 2 7 6 6 6 5 5 5 5 5 5 4 4 5 5 5 4 4 ## [1000] 4 ## [ reached getOption(&quot;max.print&quot;) -- omitted 2570 entries ] ## Levels: 1 2 3 4 5 6 7 8 9 10 aquifer_pair$to ## [1] 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 ## [38] 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 ## [75] 76 77 78 79 80 81 82 83 84 85 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 ## [112] 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 ## [149] 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 ## [186] 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 ## [223] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 5 6 7 8 9 10 11 12 13 14 ## [260] 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 ## [297] 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 6 7 8 ## [334] 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 ## [371] 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 ## [408] 83 84 85 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 ## [445] 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 ## [482] 78 79 80 81 82 83 84 85 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 ## [519] 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 ## [556] 74 75 76 77 78 79 80 81 82 83 84 85 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 ## [593] 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 ## [630] 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 ## [667] 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 ## [704] 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ## [741] 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 ## [778] 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ## [815] 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 ## [852] 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 ## [889] 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 ## [926] 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 ## [963] 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 ## [1000] 71 ## [ reached getOption(&quot;max.print&quot;) -- omitted 2570 entries ] aquifer.v&lt;-est.variogram(aquifer_points,aquifer_pair,&#39;resi&#39;) g4=ggplot(aquifer, aes(resi, Este)) + geom_point() + geom_line() + xlab(&quot;Este&quot;) + ylab(&quot;residuales2&quot;) g5=ggplot(aquifer, aes(resi, Norte)) + geom_point() + geom_line() + xlab(&quot;Norte&quot;) + ylab(&quot;residuales2&quot;) plot_grid(g4,g5) aquifer_points=point(aquifer, x=&quot;Este&quot;, y=&quot;Norte&quot;) fit.trend(aquifer_points,at=&quot;Profundidad&quot;, np=2, plot.it=TRUE) ## $beta ## x^0 y^0 x^1 y^0 x^2 y^0 x^0 y^1 x^1 y^1 x^0 y^2 ## 2.481430e+03 -8.373708e+00 1.416675e-03 -2.043419e+00 2.680056e-02 -2.464371e-02 ## ## $R ## x^0 y^0 x^1 y^0 x^2 y^0 x^0 y^1 x^1 y^1 x^0 y^2 ## [1,] -9.219544 -155.6739 -41051.636 -731.67314 -16082.944 -85540.31 ## [2,] 0.000000 595.1832 3500.219 57.75539 38829.771 12491.66 ## [3,] 0.000000 0.0000 39397.313 -117.36878 1909.315 -23722.80 ## [4,] 0.000000 0.0000 0.000 485.98967 14332.040 91118.22 ## [5,] 0.000000 0.0000 0.000 0.00000 25401.055 3240.90 ## [6,] 0.000000 0.0000 0.000 0.00000 0.000 19989.20 ## ## $np ## [1] 2 ## ## $x ## [1] 42.78275 -27.39691 -1.16289 -18.61823 96.46549 108.56243 88.36356 90.04213 93.17269 97.61099 ## [11] 90.62946 92.55262 99.48996 -24.06744 -26.06285 56.27842 73.03881 80.26679 80.23009 68.83845 ## [21] 76.39921 64.46148 43.39657 39.07769 112.80450 54.25899 6.13202 -3.80469 -2.23054 -2.36177 ## [31] -2.18890 63.22428 -10.77860 -18.98889 -38.57884 83.14496 -21.80248 -23.56457 -20.11299 -16.62654 ## [41] 29.90748 100.91568 101.29544 103.26625 -14.31073 -18.13447 -18.12151 -9.88796 -12.16336 11.65754 ## [51] 61.69122 69.57896 66.72205 -36.65446 -19.55102 -21.29791 -22.36166 21.14719 7.68461 -8.33227 ## [61] 56.70724 59.00052 68.96893 70.90225 73.00243 59.66237 61.87249 63.70810 5.62706 18.24739 ## [71] 85.68824 105.07646 -101.64278 -145.23654 -73.99313 -94.48182 -88.84983 -120.25898 -86.02454 -72.79097 ## [81] -100.17372 -78.83539 -83.69063 -95.61661 -87.55480 ## ## $y ## [1] 127.62282 90.78732 84.89600 76.45199 64.58058 82.92325 56.45348 39.25820 33.05852 56.27887 35.08169 ## [12] 41.75238 59.15785 184.76636 114.07479 26.84826 18.88140 12.61593 14.61795 107.77423 95.99380 110.39641 ## [23] 53.61499 61.99805 45.54766 147.81987 48.32772 40.40450 29.91113 33.82002 33.68207 79.49924 175.11346 ## [34] 171.91695 158.52742 159.11559 15.02551 9.41441 22.09269 17.25621 175.12875 22.97808 22.96385 20.34239 ## [45] 31.26545 30.18118 29.53241 38.14483 39.11081 18.73347 32.94906 33.80841 33.93264 150.91457 137.78404 ## [56] 131.82542 137.13680 139.26199 126.83751 107.77691 171.26443 164.54863 177.24820 161.38136 162.98959 170.10544 ## [67] 174.30177 173.91454 79.08730 77.39191 139.81702 132.03181 10.65106 28.02333 87.97270 86.62606 76.70991 ## [78] 80.76485 54.36334 43.09215 42.89881 40.82141 46.50482 35.82183 29.39267 ## ## $z ## [1] 1464 2553 2158 2455 1756 1702 1805 1797 1714 1466 1729 1638 1736 1476 2200 1999 1680 1806 1682 1306 1722 1437 ## [23] 1828 2118 1725 1606 2648 2560 2544 2386 2400 1757 1402 1364 1735 1376 2729 2766 2736 2432 1024 1611 1548 1591 ## [45] 2540 2352 2528 2575 2468 2646 1739 1674 1868 1865 1777 1579 1771 1408 1527 2003 1386 1089 1384 1030 1092 1161 ## [67] 1415 1231 2300 2238 1038 1332 3510 3490 2594 2650 2533 3571 2811 2728 3136 2553 2798 2691 2946 ## ## $residuals ## [1] -145.932017 296.391955 20.569629 155.586776 136.944207 210.578982 112.643763 81.535500 12.407325 ## [10] -165.733666 11.643984 -55.843867 123.038140 130.250727 132.838620 16.473072 -186.973641 -9.864104 ## [19] -133.020821 -298.072286 98.737035 -175.328351 -174.667016 118.113364 176.632628 200.333264 366.232978 ## [28] 173.604750 128.842139 -15.778284 -1.005758 -17.176812 -5.743382 -109.803640 35.578021 175.509274 ## [37] 109.375693 113.827801 154.658230 -138.758151 -234.947039 -41.999962 -102.169175 -45.349545 38.415648 ## [46] -182.959426 -9.456222 134.544149 14.873572 303.070200 -191.631118 -197.446346 -23.989926 92.632496 ## [55] -47.092725 -308.538280 -72.511843 -213.402614 -260.643390 -17.741523 187.380986 -159.999448 282.152142 ## [64] -199.908135 -116.838018 -37.190026 262.093246 81.109636 169.467368 176.796541 -289.932780 42.387375 ## [73] 216.381585 -51.786437 30.159248 -53.946573 -219.188525 648.160187 -92.004756 -152.583829 49.711612 ## [82] -386.649271 -141.519561 -407.429504 -129.126052 ## ## attr(,&quot;class&quot;) ## [1] &quot;trend.surface&quot; g6=ggplot(aquifer.v, aes(resi, Norte)) + geom_point() + geom_line() + xlab(&quot;Norte&quot;) + ylab(&quot;residuales2&quot;) g6=ggplot(aquifer.v, aes(bins, classic)) + geom_point() + geom_line() + xlab(&quot;Rezago espacial, h&quot;) + ylab(&quot;Estimador clásico del variograma&quot;) g7=ggplot(aquifer.v, aes(bins, robust)) + geom_point() + geom_line() + xlab(&quot;Rezago espacial, h&quot;) + ylab(&quot;Estimador robusto 1 del variograma&quot;) g8=ggplot(aquifer.v, aes(bins, med)) + geom_point() + geom_line() + xlab(&quot;Rezago espacial, h&quot;) + ylab(&quot;Estimador robusto 2 del variograma&quot;) plot_grid(g6,g7,g8,nrow=1,ncol=3) #par(mfrow=c(1,3)) print(aquifer.v) ## lags bins classic robust med n ## 1 1 13.55308 43779.20 44355.34 47948.45 285 ## 2 2 40.65923 71039.50 71176.29 73188.30 350 ## 3 3 67.76539 80041.91 85367.59 93223.52 492 ## 4 4 94.87154 67197.27 68067.40 73056.46 719 ## 5 5 121.97770 73572.25 68052.99 66133.91 612 ## 6 6 149.08385 57650.90 58608.95 58819.91 521 ## 7 7 176.19001 65498.82 62167.57 68112.31 356 ## 8 8 203.29616 130414.72 107613.55 77805.71 173 ## 9 9 230.40231 161738.13 134102.60 123952.77 43 ## 10 10 257.50847 35525.99 45217.14 58333.98 19 plot(aquifer.v$robust) plot(aquifer.v$med) #points(aquifer.v$robust,col=&quot;red&quot;) #points(aquifer.v$med,&quot;blue&quot;) aquifer.vmodExp&lt;-fit.exponential(aquifer.v,c0=0,ce=40000,ae=20,plot.it=TRUE,iterations=30) ## Initial parameter estimates: 0 40000 20 ## Iteration: 1 ## Gradient vector: -4432.441 977.0988 -8.943538 ## New parameter estimates: 1e-06 40977.1 11.05646 ## ## rse.dif = 3232643827 (rse = 3232643827 ) ; parm.dist = 977.1397 ## Iteration: 2 ## Gradient vector: -26700.7 22493.46 -2.800242 ## New parameter estimates: 1e-06 63470.56 8.256219 ## ## rse.dif = -17644208 (rse = 3.215e+09 ) ; parm.dist = 22493.46 ## Iteration: 3 ## Gradient vector: -11057.27 -15597.73 2.315183 ## New parameter estimates: 1e-06 47872.83 10.5714 ## ## rse.dif = -3772568 (rse = 3211227051 ) ; parm.dist = 15597.73 ## Iteration: 4 ## Gradient vector: -27525.12 16431.58 -1.824505 ## New parameter estimates: 1e-06 64304.41 8.746897 ## ## rse.dif = 3032851 (rse = 3214259902 ) ; parm.dist = 16431.58 ## Iteration: 5 ## Gradient vector: -20442.22 -7053.019 1.144197 ## New parameter estimates: 1e-06 57251.39 9.891094 ## ## rse.dif = -2468665 (rse = 3211791237 ) ; parm.dist = 7053.019 ## Iteration: 6 ## Gradient vector: -27557.41 7097.539 -0.7122805 ## New parameter estimates: 1e-06 64348.93 9.178813 ## ## rse.dif = 1486180 (rse = 3213277417 ) ; parm.dist = 7097.539 ## Iteration: 7 ## Gradient vector: -24787.06 -2758.919 0.3605893 ## New parameter estimates: 1e-06 61590.01 9.539403 ## ## rse.dif = -951749.7 (rse = 3212325667 ) ; parm.dist = 2758.919 ## Iteration: 8 ## Gradient vector: -26691.4 1898.737 -0.1885371 ## New parameter estimates: 1e-06 63488.75 9.350866 ## ## rse.dif = 471370.4 (rse = 3212797038 ) ; parm.dist = 1898.737 ## Iteration: 9 ## Gradient vector: -25850.35 -838.0686 0.09276125 ## New parameter estimates: 1e-06 62650.68 9.443627 ## ## rse.dif = -249219.6 (rse = 3212547818 ) ; parm.dist = 838.0686 ## Iteration: 10 ## Gradient vector: -26302.53 450.7265 -0.04631475 ## New parameter estimates: 1e-06 63101.41 9.397312 ## ## rse.dif = 121873.4 (rse = 3212669692 ) ; parm.dist = 450.7265 ## Iteration: 11 ## Gradient vector: -26086.54 -215.2624 0.02285916 ## New parameter estimates: 1e-06 62886.14 9.420171 ## ## rse.dif = -61031.79 (rse = 3212608660 ) ; parm.dist = 215.2624 ## Iteration: 12 ## Gradient vector: -26195.52 108.6221 -0.01133309 ## New parameter estimates: 1e-06 62994.77 9.408838 ## ## rse.dif = 30077.83 (rse = 3212638738 ) ; parm.dist = 108.6221 ## Iteration: 13 ## Gradient vector: -26142.08 -53.26613 0.005604603 ## New parameter estimates: 1e-06 62941.5 9.414443 ## ## rse.dif = -14922.96 (rse = 3212623815 ) ; parm.dist = 53.26613 ## Iteration: 14 ## Gradient vector: -26168.65 26.48517 -0.002774911 ## New parameter estimates: 1e-06 62967.99 9.411668 ## ## rse.dif = 7377.216 (rse = 3212631192 ) ; parm.dist = 26.48517 ## Iteration: 15 ## Gradient vector: -26155.53 -13.07801 0.001373075 ## New parameter estimates: 1e-06 62954.91 9.413041 ## ## rse.dif = -3653.216 (rse = 3212627539 ) ; parm.dist = 13.07801 ## Iteration: 16 ## Gradient vector: -26162.03 6.479831 -0.0006796194 ## New parameter estimates: 1e-06 62961.39 9.412361 ## ## rse.dif = 1807.514 (rse = 3212629346 ) ; parm.dist = 6.479831 ## Iteration: 17 ## Gradient vector: -26158.82 -3.20516 0.0003363367 ## New parameter estimates: 1e-06 62958.18 9.412698 ## ## rse.dif = -894.6895 (rse = 3212628451 ) ; parm.dist = 3.20516 ## Iteration: 18 ## Gradient vector: -26160.41 1.586717 -0.0001664615 ## New parameter estimates: 1e-06 62959.77 9.412531 ## ## rse.dif = 442.763 (rse = 3212628894 ) ; parm.dist = 1.586717 ## Iteration: 19 ## Gradient vector: -26159.62 -0.7851797 8.238305e-05 ## New parameter estimates: 1e-06 62958.98 9.412613 ## ## rse.dif = -219.1369 (rse = 3212628675 ) ; parm.dist = 0.7851797 ## Iteration: 20 ## Gradient vector: -26160.01 0.3886224 -4.077271e-05 ## New parameter estimates: 1e-06 62959.37 9.412573 ## ## rse.dif = 108.4519 (rse = 3212628784 ) ; parm.dist = 0.3886224 ## Iteration: 21 ## Gradient vector: -26159.82 -0.192328 2.01789e-05 ## New parameter estimates: 1e-06 62959.18 9.412593 ## ## rse.dif = -53.67477 (rse = 3212628730 ) ; parm.dist = 0.192328 ## Iteration: 22 ## Gradient vector: -26159.91 0.09518727 -9.986825e-06 ## New parameter estimates: 1e-06 62959.28 9.412583 ## ## rse.dif = 26.56425 (rse = 3212628756 ) ; parm.dist = 0.09518727 ## Iteration: 23 ## Gradient vector: -26159.86 -0.04710907 4.94261e-06 ## New parameter estimates: 1e-06 62959.23 9.412588 ## ## rse.dif = -13.14703 (rse = 3212628743 ) ; parm.dist = 0.04710907 ## Iteration: 24 ## Gradient vector: -26159.89 0.023315 -2.446165e-06 ## New parameter estimates: 1e-06 62959.25 9.412585 ## ## rse.dif = 6.506634 (rse = 3212628750 ) ; parm.dist = 0.023315 ## Iteration: 25 ## Gradient vector: -26159.88 -0.01153889 1.21064e-06 ## New parameter estimates: 1e-06 62959.24 9.412587 ## ## rse.dif = -3.220222 (rse = 3212628747 ) ; parm.dist = 0.01153889 ## Iteration: 26 ## Gradient vector: -26159.88 0.005710764 -5.991627e-07 ## New parameter estimates: 1e-06 62959.25 9.412586 ## ## rse.dif = 1.593734 (rse = 3212628748 ) ; parm.dist = 0.005710764 ## Iteration: 27 ## Gradient vector: -26159.88 -0.002826342 2.965346e-07 ## New parameter estimates: 1e-06 62959.24 9.412586 ## ## rse.dif = -0.7887611 (rse = 3212628747 ) ; parm.dist = 0.002826342 ## Iteration: 28 ## Gradient vector: -26159.88 0.001398795 -1.467591e-07 ## New parameter estimates: 1e-06 62959.24 9.412586 ## ## rse.dif = 0.3903689 (rse = 3212628748 ) ; parm.dist = 0.001398795 ## Iteration: 29 ## Gradient vector: -26159.88 -0.0006922812 7.263288e-08 ## New parameter estimates: 1e-06 62959.24 9.412586 ## ## rse.dif = -0.1932006 (rse = 3212628748 ) ; parm.dist = 0.0006922812 ## Iteration: 30 ## Gradient vector: -26159.88 0.000342624 -3.594748e-08 ## New parameter estimates: 1e-06 62959.24 9.412586 ## ## rse.dif = 0.09561825 (rse = 3212628748 ) ; parm.dist = 0.000342624 ## Convergence not achieved! aquifer.vmodGau&lt;-fit.gaussian(aquifer.v,c0=0,cg=50000,ag=50,plot.it=TRUE,iterations=30) ## Initial parameter estimates: 0 50000 50 ## Iteration: 1 ## Gradient vector: 19162.34 -33401.14 -11.41191 ## New parameter estimates: 19162.34 16598.86 38.58809 ## ## rse.dif = 3299750048 (rse = 3299750048 ) ; parm.dist = 38507.55 ## Iteration: 2 ## Gradient vector: -1294.927 2010.017 -18.77473 ## New parameter estimates: 17867.41 18608.87 19.81336 ## ## rse.dif = -66430135 (rse = 3233319913 ) ; parm.dist = 2391.1 ## Iteration: 3 ## Gradient vector: 3201.043 -2835.169 9.216254 ## New parameter estimates: 21068.46 15773.71 29.02961 ## ## rse.dif = -24694350 (rse = 3208625564 ) ; parm.dist = 4276.09 ## Iteration: 4 ## Gradient vector: -4345.272 4292.413 -6.361973 ## New parameter estimates: 16723.18 20066.12 22.66764 ## ## rse.dif = 4004881 (rse = 3212630445 ) ; parm.dist = 6107.884 ## Iteration: 5 ## Gradient vector: 53.88685 -4.270081 2.074271 ## New parameter estimates: 16777.07 20061.85 24.74191 ## ## rse.dif = -3703977 (rse = 3208926468 ) ; parm.dist = 54.09555 ## Iteration: 6 ## Gradient vector: -391.4471 384.4526 -0.5571294 ## New parameter estimates: 16385.62 20446.3 24.18478 ## ## rse.dif = 588163 (rse = 3209514631 ) ; parm.dist = 548.6666 ## Iteration: 7 ## Gradient vector: 29.55911 -27.0943 0.07968918 ## New parameter estimates: 16415.18 20419.21 24.26447 ## ## rse.dif = -201438.9 (rse = 3209313192 ) ; parm.dist = 40.09799 ## Iteration: 8 ## Gradient vector: -6.581211 6.259206 -0.01207028 ## New parameter estimates: 16408.6 20425.47 24.2524 ## ## rse.dif = 26607.8 (rse = 3209339800 ) ; parm.dist = 9.082408 ## Iteration: 9 ## Gradient vector: 0.9423146 -0.8928955 0.001794561 ## New parameter estimates: 16409.54 20424.57 24.25419 ## ## rse.dif = -4077.43 (rse = 3209335722 ) ; parm.dist = 1.298161 ## Iteration: 10 ## Gradient vector: -0.1413215 0.1339887 -0.0002673761 ## New parameter estimates: 16409.4 20424.71 24.25393 ## ## rse.dif = 605.1536 (rse = 3209336327 ) ; parm.dist = 0.194743 ## Iteration: 11 ## Gradient vector: 0.02102884 -0.01993597 3.982407e-05 ## New parameter estimates: 16409.42 20424.69 24.25397 ## ## rse.dif = -90.18701 (rse = 3209336237 ) ; parm.dist = 0.02897682 ## Iteration: 12 ## Gradient vector: -0.003132718 0.00296995 -5.931842e-06 ## New parameter estimates: 16409.42 20424.69 24.25396 ## ## rse.dif = 13.43229 (rse = 3209336251 ) ; parm.dist = 0.004316777 ## Iteration: 13 ## Gradient vector: 0.0004666088 -0.0004423641 8.835486e-07 ## New parameter estimates: 16409.42 20424.69 24.25396 ## ## rse.dif = -2.000767 (rse = 3209336249 ) ; parm.dist = 0.0006429701 ## Iteration: 14 ## Gradient vector: -6.950171e-05 6.589045e-05 -1.316048e-07 ## New parameter estimates: 16409.42 20424.69 24.25396 ## ## rse.dif = 0.2980142 (rse = 3209336249 ) ; parm.dist = 9.577086e-05 ## Iteration: 15 ## Gradient vector: 1.035229e-05 -9.814388e-06 1.960254e-08 ## New parameter estimates: 16409.42 20424.69 24.25396 ## ## rse.dif = -0.04438925 (rse = 3209336249 ) ; parm.dist = 1.426508e-05 ## Iteration: 16 ## Gradient vector: -1.542e-06 1.46188e-06 -2.919839e-09 ## New parameter estimates: 16409.42 20424.69 24.25396 ## ## rse.dif = 0.006612301 (rse = 3209336249 ) ; parm.dist = 2.124821e-06 ## Iteration: 17 ## Gradient vector: 2.296994e-07 -2.177628e-07 4.349363e-10 ## New parameter estimates: 16409.42 20424.69 24.25396 ## ## rse.dif = -0.0009851456 (rse = 3209336249 ) ; parm.dist = 3.165152e-07 ## Iteration: 18 ## Gradient vector: -3.420782e-08 3.242781e-08 -6.477718e-11 ## New parameter estimates: 16409.42 20424.69 24.25396 ## ## rse.dif = 0.0001473427 (rse = 3209336249 ) ; parm.dist = 4.713621e-08 ## Iteration: 19 ## Gradient vector: 5.086605e-09 -4.821087e-09 9.637383e-12 ## New parameter estimates: 16409.42 20424.69 24.25396 ## ## rse.dif = -2.193451e-05 (rse = 3209336249 ) ; parm.dist = 7.007276e-09 ## Iteration: 20 ## Gradient vector: -7.583935e-10 7.161523e-10 -1.439258e-12 ## New parameter estimates: 16409.42 20424.69 24.25396 ## ## rse.dif = 2.861023e-06 (rse = 3209336249 ) ; parm.dist = 1.042223e-09 ## Iteration: 21 ## Gradient vector: 1.019258e-10 -9.775917e-11 1.99309e-13 ## New parameter estimates: 16409.42 20424.69 24.25396 ## ## rse.dif = -4.768372e-07 (rse = 3209336249 ) ; parm.dist = 1.415077e-10 ## ## Convergence achieved by sums of squares. ## Final parameter estimates: 16409.42 20424.69 24.25396 aquifer.vmodWave&lt;-fit.wave(aquifer.v,c0=0,cw=40000,aw=10,plot.it=TRUE,iterations=30,weighted=T) ## Initial parameter estimates: 0 40000 10 ## Iteration: 1 ## Gradient vector: 18650.32 -21981.27 -0.7942028 ## New parameter estimates: 18650.32 18018.73 9.205797 ## ## rse.dif = 3409704989 (rse = 3409704989 ) ; parm.dist = 28827.26 ## Iteration: 2 ## Gradient vector: 812.9227 -1109.399 -1.187299 ## New parameter estimates: 19463.25 16909.33 8.018498 ## ## rse.dif = -289093760 (rse = 3120611230 ) ; parm.dist = 1375.358 ## Iteration: 3 ## Gradient vector: -6990.158 6973.566 0.9858099 ## New parameter estimates: 12473.09 23882.9 9.004308 ## ## rse.dif = 24044562 (rse = 3144655792 ) ; parm.dist = 9873.851 ## Iteration: 4 ## Gradient vector: 7025.438 -6960.473 -1.260353 ## New parameter estimates: 19498.53 16922.43 7.743955 ## ## rse.dif = -56767551 (rse = 3087888241 ) ; parm.dist = 9889.639 ## Iteration: 5 ## Gradient vector: -9210.154 9213.61 1.066674 ## New parameter estimates: 10288.37 26136.04 8.810629 ## ## rse.dif = 175986924 (rse = 3263875165 ) ; parm.dist = 13027.57 ## Iteration: 6 ## Gradient vector: 11994.7 -11983.26 -2.255679 ## New parameter estimates: 22283.07 14152.77 6.55495 ## ## rse.dif = -196728543 (rse = 3067146622 ) ; parm.dist = 16954.98 ## Iteration: 7 ## Gradient vector: -14060.45 14195.04 -1.578095 ## New parameter estimates: 8222.625 28347.81 4.976855 ## ## rse.dif = 147278852 (rse = 3214425474 ) ; parm.dist = 19979.87 ## Iteration: 8 ## Gradient vector: -15826.64 16212.91 0.3854677 ## New parameter estimates: 1e-06 44560.72 5.362323 ## ## rse.dif = -46983778 (rse = 3167441696 ) ; parm.dist = 18178.84 ## Iteration: 9 ## Gradient vector: 13145.08 -21444.98 -0.8756698 ## New parameter estimates: 13145.08 23115.75 4.486653 ## ## rse.dif = -757940879 (rse = 2409500817 ) ; parm.dist = 25153.13 ## Iteration: 10 ## Gradient vector: -9434763 9682459 25.73116 ## New parameter estimates: 1e-06 9705575 30.21781 ## ## rse.dif = 1636307005 (rse = 4045807822 ) ; parm.dist = 9682468 ## Iteration: 11 ## Gradient vector: 20962.2 -9688482 0.02156687 ## New parameter estimates: 20962.2 17093.21 30.23938 ## ## rse.dif = 83628062 (rse = 4129435883 ) ; parm.dist = 9688504 ## Iteration: 12 ## Gradient vector: 7173.136 -8587.116 1.22582 ## New parameter estimates: 28135.34 8506.099 31.4652 ## ## rse.dif = -628497356 (rse = 3500938527 ) ; parm.dist = 11188.94 ## Iteration: 13 ## Gradient vector: 2974.651 -2890.861 -4.19572 ## New parameter estimates: 31109.99 5615.237 27.26947 ## ## rse.dif = -192443200 (rse = 3308495327 ) ; parm.dist = 4147.969 ## Iteration: 14 ## Gradient vector: -2399.351 1443.698 15.69929 ## New parameter estimates: 28710.64 7058.936 42.96876 ## ## rse.dif = 147479203 (rse = 3455974530 ) ; parm.dist = 2800.25 ## Iteration: 15 ## Gradient vector: 4786.661 2165.107 -43.14322 ## New parameter estimates: 33497.3 9224.042 1e-06 ## ## rse.dif = -686128323 (rse = 2769846206 ) ; parm.dist = 5253.728 ## Iteration: 16 ## Warning in lsfit(xmat, y, wt = w, intercept = FALSE): &#39;X&#39; matrix was collinear ## Gradient vector: -7188.309 -5.926894e-07 0 ## New parameter estimates: 26308.99 9224.042 1e-06 ## ## rse.dif = 686457465 (rse = 3456303671 ) ; parm.dist = 7188.309 ## Iteration: 17 ## Warning in lsfit(xmat, y, wt = w, intercept = FALSE): &#39;X&#39; matrix was collinear ## Gradient vector: -5.339328e-06 -5.926894e-07 0 ## New parameter estimates: 26308.99 9224.042 1e-06 ## ## rse.dif = 0.4889336 (rse = 3456303672 ) ; parm.dist = 5.372122e-06 ## Iteration: 18 ## Warning in lsfit(xmat, y, wt = w, intercept = FALSE): &#39;X&#39; matrix was collinear ## Gradient vector: 5.926854e-07 -5.926894e-07 0 ## New parameter estimates: 26308.99 9224.042 1e-06 ## ## rse.dif = 1.907349e-06 (rse = 3456303672 ) ; parm.dist = 8.381857e-07 ## Iteration: 19 ## Warning in lsfit(xmat, y, wt = w, intercept = FALSE): &#39;X&#39; matrix was collinear ## Gradient vector: 5.926934e-07 -5.926894e-07 0 ## New parameter estimates: 26308.99 9224.042 1e-06 ## ## rse.dif = -2.384186e-06 (rse = 3456303672 ) ; parm.dist = 8.381908e-07 ## Iteration: 20 ## Warning in lsfit(xmat, y, wt = w, intercept = FALSE): &#39;X&#39; matrix was collinear ## Gradient vector: 5.926854e-07 -5.926894e-07 0 ## New parameter estimates: 26308.99 9224.042 1e-06 ## ## rse.dif = 2.384186e-06 (rse = 3456303672 ) ; parm.dist = 8.381857e-07 ## Iteration: 21 ## Warning in lsfit(xmat, y, wt = w, intercept = FALSE): &#39;X&#39; matrix was collinear ## Gradient vector: 5.926934e-07 -5.926894e-07 0 ## New parameter estimates: 26308.99 9224.042 1e-06 ## ## rse.dif = -2.384186e-06 (rse = 3456303672 ) ; parm.dist = 8.381908e-07 ## Iteration: 22 ## Warning in lsfit(xmat, y, wt = w, intercept = FALSE): &#39;X&#39; matrix was collinear ## Gradient vector: 5.926854e-07 -5.926894e-07 0 ## New parameter estimates: 26308.99 9224.042 1e-06 ## ## rse.dif = 2.384186e-06 (rse = 3456303672 ) ; parm.dist = 8.381857e-07 ## Iteration: 23 ## Warning in lsfit(xmat, y, wt = w, intercept = FALSE): &#39;X&#39; matrix was collinear ## Gradient vector: 5.926933e-07 -5.926894e-07 0 ## New parameter estimates: 26308.99 9224.042 1e-06 ## ## rse.dif = -2.384186e-06 (rse = 3456303672 ) ; parm.dist = 8.381908e-07 ## Iteration: 24 ## Warning in lsfit(xmat, y, wt = w, intercept = FALSE): &#39;X&#39; matrix was collinear ## Gradient vector: 5.926854e-07 -5.926894e-07 0 ## New parameter estimates: 26308.99 9224.042 1e-06 ## ## rse.dif = 2.384186e-06 (rse = 3456303672 ) ; parm.dist = 8.381857e-07 ## Iteration: 25 ## Warning in lsfit(xmat, y, wt = w, intercept = FALSE): &#39;X&#39; matrix was collinear ## Gradient vector: 5.926934e-07 -5.926894e-07 0 ## New parameter estimates: 26308.99 9224.042 1e-06 ## ## rse.dif = -2.384186e-06 (rse = 3456303672 ) ; parm.dist = 8.381908e-07 ## Iteration: 26 ## Warning in lsfit(xmat, y, wt = w, intercept = FALSE): &#39;X&#39; matrix was collinear ## Gradient vector: 5.926854e-07 -5.926894e-07 0 ## New parameter estimates: 26308.99 9224.042 1e-06 ## ## rse.dif = 2.384186e-06 (rse = 3456303672 ) ; parm.dist = 8.381857e-07 ## Iteration: 27 ## Warning in lsfit(xmat, y, wt = w, intercept = FALSE): &#39;X&#39; matrix was collinear ## Gradient vector: 5.926934e-07 -5.926894e-07 0 ## New parameter estimates: 26308.99 9224.042 1e-06 ## ## rse.dif = -2.384186e-06 (rse = 3456303672 ) ; parm.dist = 8.381908e-07 ## Iteration: 28 ## Warning in lsfit(xmat, y, wt = w, intercept = FALSE): &#39;X&#39; matrix was collinear ## Gradient vector: 5.926854e-07 -5.926894e-07 0 ## New parameter estimates: 26308.99 9224.042 1e-06 ## ## rse.dif = 2.384186e-06 (rse = 3456303672 ) ; parm.dist = 8.381857e-07 ## Iteration: 29 ## Warning in lsfit(xmat, y, wt = w, intercept = FALSE): &#39;X&#39; matrix was collinear ## Gradient vector: 5.926934e-07 -5.926894e-07 0 ## New parameter estimates: 26308.99 9224.042 1e-06 ## ## rse.dif = -2.384186e-06 (rse = 3456303672 ) ; parm.dist = 8.381908e-07 ## Iteration: 30 ## Warning in lsfit(xmat, y, wt = w, intercept = FALSE): &#39;X&#39; matrix was collinear ## Gradient vector: 5.926854e-07 -5.926894e-07 0 ## New parameter estimates: 26308.99 9224.042 1e-06 ## ## rse.dif = 2.384186e-06 (rse = 3456303672 ) ; parm.dist = 8.381857e-07 ## Convergence not achieved! curve(65000*(1-(14/x)*sin(x/14)),0,300,ylim=c(0,200000)) points(aquifer.v$bins,aquifer.v$classic,col=3) text(aquifer.v$bins,aquifer.v$classic,aquifer.v$n,col=2) curve(200000*(1-exp(-x/170)),0,300) points(aquifer.v$bins,aquifer.v$classic,col=2) curve(65000*(1-(14/x)*sin(x/14)),0,300,ylim=c(0,200000)) points(aquifer.v$bins,aquifer.v$classic,col=3) text(aquifer.v$bins,aquifer.v$classic,aquifer.v$n,col=2) aquifer.vmodExp&lt;-fit.exponential(aquifer.v,c0=0,ce=200000,ae=170,plot.it=TRUE,iterations=30,weighted=T) ## Initial parameter estimates: 0 2e+05 170 ## Iteration: 1 ## Gradient vector: 16365.66 -238859.4 -103.7436 ## New parameter estimates: 16365.66 1e-06 66.25643 ## ## rse.dif = 3826411368 (rse = 3826411368 ) ; parm.dist = 200668.5 ## Iteration: 2 ## Gradient vector: 7737.246 16547.95 166070861252 ## New parameter estimates: 24102.91 16547.95 166070861318 ## ## rse.dif = -767474321 (rse = 3058937047 ) ; parm.dist = 166070861252 ## Iteration: 3 ## Warning in lsfit(xmat, y, wt = w, intercept = FALSE): &#39;X&#39; matrix was collinear ## Gradient vector: 3355.03 1.242479e+13 0 ## New parameter estimates: 27457.94 1.242479e+13 166070861318 ## ## rse.dif = -120011141 (rse = 2938925906 ) ; parm.dist = 1.242479e+13 ## Iteration: 4 ## Warning in lsfit(xmat, y, wt = w, intercept = FALSE): &#39;X&#39; matrix was collinear ## Gradient vector: 423.3165 -663474885968 0 ## New parameter estimates: 27881.25 1.176131e+13 166070861318 ## ## rse.dif = 11801483 (rse = 2950727388 ) ; parm.dist = 663474885968 ## Iteration: 5 ## Warning in lsfit(xmat, y, wt = w, intercept = FALSE): &#39;X&#39; matrix was collinear ## Gradient vector: 3.873181 -6320523090 0 ## New parameter estimates: 27885.12 1.175499e+13 166070861318 ## ## rse.dif = 128956.4 (rse = 2950856345 ) ; parm.dist = 6320523090 ## Iteration: 6 ## Warning in lsfit(xmat, y, wt = w, intercept = FALSE): &#39;X&#39; matrix was collinear ## Gradient vector: 0.02266712 -36921321 0 ## New parameter estimates: 27885.15 1.175495e+13 166070861318 ## ## rse.dif = 752.3639 (rse = 2950857097 ) ; parm.dist = 36921321 ## Iteration: 7 ## Warning in lsfit(xmat, y, wt = w, intercept = FALSE): &#39;X&#39; matrix was collinear ## Gradient vector: 0.0001316946 -214507.3 0 ## New parameter estimates: 27885.15 1.175495e+13 166070861318 ## ## rse.dif = 4.371067 (rse = 2950857102 ) ; parm.dist = 214507.3 ## Iteration: 8 ## Warning in lsfit(xmat, y, wt = w, intercept = FALSE): &#39;X&#39; matrix was collinear ## Gradient vector: 7.650992e-07 -1246.212 0 ## New parameter estimates: 27885.15 1.175495e+13 166070861318 ## ## rse.dif = 0.02539396 (rse = 2950857102 ) ; parm.dist = 1246.213 ## Iteration: 9 ## Warning in lsfit(xmat, y, wt = w, intercept = FALSE): &#39;X&#39; matrix was collinear ## Gradient vector: 4.447233e-09 -7.24441 0 ## New parameter estimates: 27885.15 1.175495e+13 166070861318 ## ## rse.dif = 0.0001473427 (rse = 2950857102 ) ; parm.dist = 7.244141 ## Iteration: 10 ## Warning in lsfit(xmat, y, wt = w, intercept = FALSE): &#39;X&#39; matrix was collinear ## Gradient vector: 2.31966e-11 -0.03646515 0 ## New parameter estimates: 27885.15 1.175495e+13 166070861318 ## ## rse.dif = 9.536743e-07 (rse = 2950857102 ) ; parm.dist = 0.03710938 ## ## Convergence achieved by sums of squares. ## Final parameter estimates: 27885.15 1.175495e+13 166070861318 aquifer.vmodwave&lt;-fit.wave(aquifer.v,c0=4000,cw=30000,aw=15,plot.it=TRUE,iterations=0,weighted=T) ## Convergence not achieved! aquifer.vmodExp_0&lt;-fit.exponential(aquifer.v,c0=0,ce=200000,ae=170,plot.it=TRUE,iterations=0,weighted=T) ## Convergence not achieved! aquifer.vmodwave_0&lt;-fit.wave(aquifer.v,c0=4000,cw=30000,aw=15,plot.it=TRUE,iterations=0,weighted=T) ## Convergence not achieved! aquifer.spherical&lt;-fit.spherical(aquifer.v,c0=0,cs=35000,as=70,plot.it=TRUE,iterations=0,weighted=T) ## Convergence not achieved! ggplot(aquifer.v, aes(bins, classic)) + geom_point() + geom_line() + xlab(&quot;Rezago espacial, h&quot;) + ylab(&quot;Estimador clásico del variograma&quot;)+ xlim(0, 300) + geom_function(aes(color = &quot;Exponencial&quot;), fun =~4000+150000*(1-exp(-.x/100)) ) + geom_function(aes(color = &quot;Seno cardinal&quot;), fun =~4000+30000*(1-((15/.x)*sin(.x/15))) ) + xlab(&quot;Rezago espacial&quot;) + ylab(&quot;Modelos teóricos de semivariogramas&quot;) ## Warning: Removed 1 row containing missing values (`geom_function()`). Kriging_aquifer &lt;- point(data.frame(list(x=10,y=80))) Kriging_aquifer &lt;- krige(Kriging_aquifer, aquifer_points, &#39;resi&#39;, aquifer.vmodExp_0) ## ## Using all points. ## Preparing the kriging system matrix... ## Inverting the matrix... ## Predicting. Kriging_aquifer ## ## Point object: x ## ## Locations: 1 ## ## Attributes: ## x ## y ## do ## zhat ## sigma2hat Kriging_aquifer$sigma2hat ## [1] 7010.452 Kriging_aquifer &lt;- point(data.frame(list(x=10,y=80))) Kriging_aquifer &lt;- krige(Kriging_aquifer, aquifer_points, &#39;resi&#39;, aquifer.vmodwave_0) ## ## Using all points. ## Preparing the kriging system matrix... ## Inverting the matrix... ## Predicting. Kriging_aquifer ## ## Point object: x ## ## Locations: 1 ## ## Attributes: ## x ## y ## do ## zhat ## sigma2hat Kriging_aquifer$zhat ## [1] 196.2781 Kriging_aquifer$sigma2hat ## [1] 5169.927 grid &lt;- list(x=seq(min(aquifer$Este),max(aquifer$Este),by=20),y=seq(min(aquifer$Norte),max(aquifer$Norte),by=10)) grid$xr &lt;- range(grid$x) grid$xs &lt;- grid$xr[2] - grid$xr[1] grid$yr &lt;- range(grid$y) grid$ys &lt;- grid$yr[2] - grid$yr[1] grid$max &lt;- max(grid$xs, grid$ys) grid$xy &lt;- data.frame(cbind(c(matrix(grid$x, length(grid$x), length(grid$y))), c(matrix(grid$y, length(grid$x), length(grid$y), byrow=TRUE)))) colnames(grid$xy) &lt;- c(&quot;x&quot;, &quot;y&quot;) grid$point &lt;- point(grid$xy) grid$krige &lt;- krige(grid$point,aquifer_points,&#39;resi&#39;,aquifer.vmodwave_0,maxdist=180,extrap=FALSE) ## ## Using points within 180 units of prediction points. ## Predicting.......................................................................................................................................................................................................................................... op &lt;- par(no.readonly = TRUE) par(pty=&quot;s&quot;) plot(grid$xy, type=&quot;n&quot;, xlim=c(grid$xr[1], grid$xr[1]+grid$max),ylim=c(grid$yr[1], grid$yr[1]+grid$max)) image(grid$x,grid$y,matrix(grid$krige$zhat,length(grid$x),length(grid$y)),add=TRUE) contour(grid$x,grid$y,matrix(grid$krige$zhat,length(grid$x),length(grid$y)),add=TRUE) x11() op &lt;- par(no.readonly = TRUE) par(pty=&quot;s&quot;) plot(grid$xy, type=&quot;n&quot;, xlim=c(grid$xr[1], grid$xr[1]+grid$max),ylim=c(grid$yr[1], grid$yr[1]+grid$max)) image(grid$x,grid$y,matrix(grid$krige$sigma2hat,length(grid$x),length(grid$y)), add=TRUE) contour(grid$x,grid$y,matrix(grid$krige$sigma2hat,length(grid$x),length(grid$y)),add=TRUE) "],["geoestadística-univariada-con-geor.html", "Capítulo 3 Geoestadística univariada con geoR 3.1 Parte descriptiva 3.2 GEO_Data 3.3 Modelando la media con regresión polinomial 3.4 Estimación del semivariograma empírico 3.5 Estimación teórica del semivariograma 3.6 Resultados 3.7 Pulimiento de medianas", " Capítulo 3 Geoestadística univariada con geoR 3.1 Parte descriptiva 3.1.1 Librerías Lista de librerías con link a la documentación. fields geoR akima Usado para gráficos descriptivos rm(list=ls()) library(fields) ## Loading required package: spam ## Spam version 2.9-1 (2022-08-07) is loaded. ## Type &#39;help( Spam)&#39; or &#39;demo( spam)&#39; for a short introduction ## and overview of this package. ## Help for individual functions is also obtained by adding the ## suffix &#39;.spam&#39; to the function name, e.g. &#39;help( chol.spam)&#39;. ## ## Attaching package: &#39;spam&#39; ## The following objects are masked from &#39;package:base&#39;: ## ## backsolve, forwardsolve ## Loading required package: viridis ## Loading required package: viridisLite ## ## Try help(fields) to get started. library(geoR) ## Registered S3 method overwritten by &#39;geoR&#39;: ## method from ## plot.variogram sgeostat ## -------------------------------------------------------------- ## Analysis of Geostatistical Data ## For an Introduction to geoR go to http://www.leg.ufpr.br/geoR ## geoR version 1.9-2 (built on 2022-08-09) is now loaded ## -------------------------------------------------------------- library(akima) 3.1.2 Lectura de datos aquifer &lt;- read.table(&quot;data_7_GeoestadisticaGEOSTAT/aquifer.txt&quot;, head = TRUE, dec = &quot;,&quot;) Encabezado de datos aquifer.txt head(aquifer) ## Este Norte Profundidad ## 1 42.78275 127.62282 1464 ## 2 -27.39691 90.78732 2553 ## 3 -1.16289 84.89600 2158 ## 4 -18.61823 76.45199 2455 ## 5 96.46549 64.58058 1756 ## 6 108.56243 82.92325 1702 Summary de los datos aquifer.txt summary(aquifer) ## Este Norte Profundidad ## Min. :-145.24 Min. : 9.414 Min. :1024 ## 1st Qu.: -21.30 1st Qu.: 33.682 1st Qu.:1548 ## Median : 11.66 Median : 59.158 Median :1797 ## Mean : 16.89 Mean : 79.361 Mean :2002 ## 3rd Qu.: 70.90 3rd Qu.:131.825 3rd Qu.:2540 ## Max. : 112.80 Max. :184.766 Max. :3571 3.2 GEO_Data 3.2.1 Convertir aquifer a un objeto geodata (geoR obj) Documentación as.geodata aquiferg &lt;- as.geodata(aquifer) summary(aquiferg) ## Number of data points: 85 ## ## Coordinates summary ## Este Norte ## min -145.2365 9.41441 ## max 112.8045 184.76636 ## ## Distance summary ## min max ## 0.2211656 271.0615463 ## ## Data summary ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1024.000 1548.000 1797.000 2002.282 2540.000 3571.000 3.2.2 Gráfico de objeto geodata Documentación plotgeodata Gráfico del objeto geodata plot(aquiferg, qt.col = c(&quot;purple&quot;, &quot;pink&quot;, &quot;green&quot;, &quot;yellow&quot;)) Gráfico con el parametro 3d plot(aquiferg, scatter3d = T) Gráfico removiendo la tendencia (trend ) plot(aquiferg, trend = &quot;1st&quot;) 3.2.3 Gráficos descriptivos interpolación Documentación Interpolación inderp Documentación persp Documentación drape.plot par(mfrow = c(2, 2), mar = c(3, 3, 1, 1), mgp = c(2, 1, 0)) # Esta función agrupa los siguientes gráficos en # una matrix 2x2 grillas &lt;- interp(aquifer$Este, aquifer$Norte, aquifer$Profundidad) persp(grillas$x, grillas$y, grillas$z, xlab = &quot;Este&quot;, ylab = &quot;Norte&quot;, zlab = &quot;Nivel freatico&quot;, phi = 30, theta = 20, col = &quot;lightblue&quot;, expand = .5, ticktype = &quot;detailed&quot;) drape.plot(grillas$x, grillas$y, grillas$z, xlab = &quot;Este&quot;, ylab = &quot;Norte&quot;, zlab = &quot;z&quot;, theta = 45, col = topo.colors(64), expand = .5, ticktype = &quot;detailed&quot;) drape.plot(grillas$x, grillas$y, grillas$z, xlab = &quot;Este&quot;, ylab = &quot;Norte&quot;, zlab = &quot;z&quot;, theta = -10, col = topo.colors(64), expand = .5, ticktype = &quot;detailed&quot;) drape.plot(grillas$x, grillas$y, grillas$z, xlab = &quot;Este&quot;, ylab = &quot;Norte&quot;, zlab = &quot;z&quot;, theta = 60, col = topo.colors(64), expand = .5, ticktype = &quot;detailed&quot;) 3.2.4 Gráficos de contorno Documentación contour Documentación filled.contour par(mfrow = c(2, 1), mar = c(1,1,1,1)) contour(grillas, nlevels = 10, main = &quot;Contorno&quot;) image(grillas$z, main = &quot;Grilla&quot;) filled.contour(grillas, levels = seq(1000, 5000, len = 10), col = heat.colors(10), main = &quot;grilla niveles&quot;) 3.2.5 Funciones y gráficas a partir de la función outer h &lt;- seq(0, 1, len = 50) u &lt;- seq(0, 1, len = 50) ejemplo1CH &lt;- function(h, u, sigma, a, b, c, d, delta) { (sigma^2/((a^2*u^2+c)^(d/2)))*exp(-(b^2*h^2)/(a^2*u^2+c))*exp(-delta*u^2) } h &lt;- seq(0, 1, len = 20) u &lt;- seq(1, 10, len = 20) f &lt;- outer(h, u, ejemplo1CH, sigma=3, a=1, b=3, c=1, d=2, delta=0) par(mfrow = c(2, 2), mar = c(3, 3, 1, 1), mgp = c(2, 1, 0)) drape.plot(h, u, f, main = &quot;Cressie-Huang; 1 (25,1,0.6)&quot;, xlab = &quot;h&quot;, ylab = &quot;u&quot;, zlab = &quot;Covarianza&quot;, ltheta = 75, col = terrain.colors(64)) drape.plot(h, u, f, main = &quot;Cressie-Huang; 1 (25,1,0.6)&quot;, xlab = &quot;h&quot;, ylab = &quot;u&quot;, zlab = &quot;Covarianza&quot;, theta = -150, col = terrain.colors(64)) persp(h, u, f, main = &quot;Cressie-Huang; 1 (25,1,0.6)&quot;, xlab = &quot;h&quot;, ylab = &quot;u&quot;, zlab = &quot;Covarianza&quot;, ltheta = 75) contour(h, u, f, col = topo.colors(10), xlim = c(0,0.6)) 3.3 Modelando la media con regresión polinomial 3.3.1 Primer modelo reg1 &lt;- lm(Profundidad ~ Este + Norte, data = aquifer) residuales1 &lt;- residuals(reg1) summary(reg1) ## ## Call: ## lm(formula = Profundidad ~ Este + Norte, data = aquifer) ## ## Residuals: ## Min 1Q Median 3Q Max ## -366.96 -161.53 -30.71 148.15 651.20 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 2591.4302 38.9599 66.52 &lt;2e-16 *** ## Este -6.7514 0.3438 -19.64 &lt;2e-16 *** ## Norte -5.9872 0.4066 -14.73 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 203.3 on 82 degrees of freedom ## Multiple R-squared: 0.8921, Adjusted R-squared: 0.8894 ## F-statistic: 338.9 on 2 and 82 DF, p-value: &lt; 2.2e-16 anova(reg1) ## Analysis of Variance Table ## ## Response: Profundidad ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Este 1 19045642 19045642 460.95 &lt; 2.2e-16 *** ## Norte 1 8960172 8960172 216.86 &lt; 2.2e-16 *** ## Residuals 82 3388069 41318 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 3.3.2 Segundo modelo reg2 &lt;- lm(Profundidad ~ Este + Norte + I(Este^2) + I(Norte^2) + I(Este * Norte), data = aquifer) residuales2 &lt;- residuals(reg2) summary(reg2) ## ## Call: ## lm(formula = Profundidad ~ Este + Norte + I(Este^2) + I(Norte^2) + ## I(Este * Norte), data = aquifer) ## ## Residuals: ## Min 1Q Median 3Q Max ## -407.43 -138.76 -5.74 128.84 648.16 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 2.481e+03 6.813e+01 36.424 &lt; 2e-16 *** ## Este -8.374e+00 5.525e-01 -15.157 &lt; 2e-16 *** ## Norte -2.043e+00 1.764e+00 -1.159 0.250146 ## I(Este^2) 1.417e-03 4.987e-03 0.284 0.777096 ## I(Norte^2) -2.464e-02 9.298e-03 -2.650 0.009708 ** ## I(Este * Norte) 2.680e-02 7.413e-03 3.616 0.000526 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 185.9 on 79 degrees of freedom ## Multiple R-squared: 0.9131, Adjusted R-squared: 0.9076 ## F-statistic: 166 on 5 and 79 DF, p-value: &lt; 2.2e-16 anova(reg2) ## Analysis of Variance Table ## ## Response: Profundidad ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Este 1 19045642 19045642 551.3469 &lt; 2.2e-16 *** ## Norte 1 8960172 8960172 259.3855 &lt; 2.2e-16 *** ## I(Este^2) 1 55368 55368 1.6028 0.2092235 ## I(Norte^2) 1 152170 152170 4.4051 0.0390253 * ## I(Este * Norte) 1 451567 451567 13.0723 0.0005259 *** ## Residuals 79 2728964 34544 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 3.3.3 Tercer modelo reg3 &lt;- lm(Profundidad ~ Este * Norte, data = aquifer) residuales3 &lt;- residuals(reg3) summary(reg3) ## ## Call: ## lm(formula = Profundidad ~ Este * Norte, data = aquifer) ## ## Residuals: ## Min 1Q Median 3Q Max ## -406.30 -138.88 -13.04 129.36 722.48 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 2.627e+03 3.833e+01 68.546 &lt; 2e-16 *** ## Este -8.287e+00 5.658e-01 -14.646 &lt; 2e-16 *** ## Norte -6.649e+00 4.327e-01 -15.366 &lt; 2e-16 *** ## Este:Norte 2.452e-02 7.401e-03 3.314 0.00138 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 191.9 on 81 degrees of freedom ## Multiple R-squared: 0.905, Adjusted R-squared: 0.9014 ## F-statistic: 257.1 on 3 and 81 DF, p-value: &lt; 2.2e-16 anova(reg3) ## Analysis of Variance Table ## ## Response: Profundidad ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Este 1 19045642 19045642 517.06 &lt; 2.2e-16 *** ## Norte 1 8960172 8960172 243.25 &lt; 2.2e-16 *** ## Este:Norte 1 404448 404448 10.98 0.001379 ** ## Residuals 81 2983621 36835 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 3.4 Estimación del semivariograma empírico Documentación variog vari2 &lt;- variog(aquiferg, trend = &quot;1st&quot;) ## variog: computing omnidirectional variogram vari2Cloud &lt;- variog(aquiferg, op = &quot;cloud&quot;, trend = &quot;1st&quot;) ## variog: computing omnidirectional variogram vari2BinCloud &lt;- variog(aquiferg, max.dist = 200, op = &quot;cloud&quot;, bin.cloud = TRUE) ## variog: computing omnidirectional variogram vari2Sm &lt;- variog(aquiferg, trend = &quot;1st&quot;, op = &quot;sm&quot;, band=11) ## variog: computing omnidirectional variogram par(mfrow = c(2, 2), mar = c(3, 3, 1, 1), mgp = c(2, 1, 0)) plot(vari2$u, vari2$v, main = &quot;binned variogram&quot;) # jocastroc: vari2 solo no da el plot se dejo vari2$u,vari2$v plot(vari2Cloud$u, vari2Cloud$v, main = &quot;variogram cloud&quot;) plot(vari2BinCloud$u, vari2BinCloud$v, main = &quot;clouds for binned variogram&quot;) plot(vari2Sm$u, vari2Sm$v, main = &quot;smoothed variogram&quot;) 3.4.1 Explorando estimación clásica, removiendo tendencia vari1 &lt;- variog(aquiferg) ## variog: computing omnidirectional variogram vari2 &lt;- variog(aquiferg, trend = &quot;1st&quot;) ## variog: computing omnidirectional variogram vari3 &lt;- variog(aquiferg, trend = &quot;2nd&quot;) ## variog: computing omnidirectional variogram plot(vari1$u,vari1$v, main = &quot;Sin remover tendencia&quot;) plot(vari2$u,vari2$v, main = &quot;Trend 1 &quot;) plot(vari3$u,vari3$v, main = &quot;Trend 2 &quot;) 3.4.2 Explorando estimación resistente a datos atípicos y removiendo tendencia vari1 &lt;- variog(aquiferg, estimator.type = &quot;modulus&quot;) ## variog: computing omnidirectional variogram vari2 &lt;- variog(aquiferg, trend = &quot;1st&quot;, estimator.type = &quot;modulus&quot;) ## variog: computing omnidirectional variogram vari3 &lt;- variog(aquiferg, trend = &quot;2nd&quot;, estimator.type = &quot;modulus&quot;) ## variog: computing omnidirectional variogram plot(vari1$u,vari1$v, main = &quot;Sin remover tendencia&quot;) plot(vari2$u,vari2$v, main = &quot;Trend 1 &quot;) plot(vari3$u,vari3$v, main = &quot;Trend 2 &quot;) 3.4.3 Explorando anisotropía vari_0 &lt;- variog(aquiferg, trend = &quot;1st&quot;, max.dist = 200, dir = 0) ## variog: computing variogram for direction = 0 degrees (0 radians) ## tolerance angle = 22.5 degrees (0.393 radians) vari_45 &lt;- variog(aquiferg, trend = &quot;1st&quot;, max.dist = 200, dir = pi / 4) ## variog: computing variogram for direction = 45 degrees (0.785 radians) ## tolerance angle = 22.5 degrees (0.393 radians) vari_90 &lt;- variog(aquiferg, trend = &quot;1st&quot;, max.dist = 200, dir = pi / 2) ## variog: computing variogram for direction = 90 degrees (1.571 radians) ## tolerance angle = 22.5 degrees (0.393 radians) vari_135 &lt;- variog(aquiferg, trend = &quot;1st&quot;, max.dist = 200, dir = 3 * pi / 4) ## variog: computing variogram for direction = 135 degrees (2.356 radians) ## tolerance angle = 22.5 degrees (0.393 radians) par(mfrow = c(2, 2), mar = c(3, 3, 1, 1), mgp = c(2, 1, 0)) plot(vari_0$u,vari_0$v, main = &quot;vari 0&quot;) plot(vari_45$u,vari_45$v, main = &quot;vari 45&quot;) plot(vari_90$u,vari_90$v, main = &quot;vari 90&quot;) plot(vari_135$u,vari_135$v, main = &quot;vari 195&quot;) 3.5 Estimación teórica del semivariograma Documentación eyefit Documentación variofit Documentación likfit var1 &lt;- variog(aquiferg,trend=&quot;1st&quot;,max.dist=200) ## variog: computing omnidirectional variogram #ini1 &lt;- eyefit(var1) #cov.model sigmasq phi tausq kappa kappa2 practicalRange #1 wave 30805.52 13 8984.94 &lt;NA&gt; &lt;NA&gt; 38.8889336320589 ini1 &lt;- c(30805.52, 13) fitvar1 &lt;- variofit(var1, cov.model = &quot;wave&quot;, ini1, fix.nugget = TRUE, nugget = 8984.94, wei = &quot;equal&quot;) ## variofit: covariance model used is wave ## variofit: weights used: equal ## variofit: minimisation function used: optim fitvar2 &lt;- variofit(var1, cov.model = &quot;wave&quot;, ini1, fix.nugget = TRUE, nugget = 8984.94, wei = &quot;npairs&quot;) ## variofit: covariance model used is wave ## variofit: weights used: npairs ## variofit: minimisation function used: optim fitvar3 &lt;- variofit(var1, ini1, fix.nugget = TRUE, nugget = 8984.94, wei = &quot;cressie&quot;) ## variofit: covariance model used is matern ## variofit: weights used: cressie ## variofit: minimisation function used: optim fitvar4 &lt;- likfit(aquiferg, coords = aquiferg$coords, data = aquiferg$data, trend = &quot;1st&quot;, ini.cov.pars = ini1, fix.nugget = T, nugget = 8984.94, cov.model = &quot;wave&quot;, lik.method = &quot;ML&quot;) ## kappa not used for the wave correlation function ## --------------------------------------------------------------- ## likfit: likelihood maximisation using the function optim. ## likfit: Use control() to pass additional ## arguments for the maximisation function. ## For further details see documentation for optim. ## likfit: It is highly advisable to run this function several ## times with different initial values for the parameters. ## likfit: WARNING: This step can be time demanding! ## --------------------------------------------------------------- ## likfit: end of numerical maximisation. fitvar5 &lt;- likfit(aquiferg, coords = aquiferg$coords, data = aquiferg$data, trend = &quot;1st&quot;, ini.cov.pars = ini1, fix.nugget = T, nugget = 8984.94, cov.model = &quot;wave&quot;, lik.method = &quot;REML&quot;) ## kappa not used for the wave correlation function ## --------------------------------------------------------------- ## likfit: likelihood maximisation using the function optim. ## likfit: Use control() to pass additional ## arguments for the maximisation function. ## For further details see documentation for optim. ## likfit: It is highly advisable to run this function several ## times with different initial values for the parameters. ## likfit: WARNING: This step can be time demanding! ## --------------------------------------------------------------- ## likfit: end of numerical maximisation. plot(var1$u,var1$v, xlab = &quot;h&quot;, ylab = &quot;semivarianza&quot;, cex.lab = 1.3, cex.axis = 1.2, main = &quot;Estimación teórica del modelo de semivariograma&quot;, col.main = 4, cex.main =1.3) lines(fitvar1, col = 1) lines(fitvar2, col = 2) lines(fitvar3, col = 3) lines(fitvar4, col = 4) lines(fitvar5, col = 5) legend(130, 18000, c(&quot;MCO&quot;, &quot;MCPnpairs&quot;, &quot;MCPcressie&quot;, &quot;ML&quot;, &quot;REML&quot;), lwd = 2, lty = 2:7, col = 2:7, box.col = 9, text.col = 2:7) 3.6 Resultados summary(fitvar1) ## $pmethod ## [1] &quot;OLS (ordinary least squares)&quot; ## ## $cov.model ## [1] &quot;wave&quot; ## ## $spatial.component ## sigmasq phi ## 31203.33666 11.93873 ## ## $spatial.component.extra ## kappa ## 0.5 ## ## $nugget.component ## tausq ## 8984.94 ## ## $fix.nugget ## [1] TRUE ## ## $fix.kappa ## [1] TRUE ## ## $practicalRange ## [1] 35.71419 ## ## $sum.of.squares ## value ## 159338722 ## ## $estimated.pars ## sigmasq phi ## 31203.33666 11.93873 ## ## $weights ## [1] &quot;equal&quot; ## ## $call ## variofit(vario = var1, ini.cov.pars = ini1, cov.model = &quot;wave&quot;, ## fix.nugget = TRUE, nugget = 8984.94, weights = &quot;equal&quot;) ## ## attr(,&quot;class&quot;) ## [1] &quot;summary.variomodel&quot; summary(fitvar2) ## $pmethod ## [1] &quot;WLS (weighted least squares)&quot; ## ## $cov.model ## [1] &quot;wave&quot; ## ## $spatial.component ## sigmasq phi ## 31311.81333 12.05997 ## ## $spatial.component.extra ## kappa ## 0.5 ## ## $nugget.component ## tausq ## 8984.94 ## ## $fix.nugget ## [1] TRUE ## ## $fix.kappa ## [1] TRUE ## ## $practicalRange ## [1] 36.07688 ## ## $sum.of.squares ## value ## 32922890311 ## ## $estimated.pars ## sigmasq phi ## 31311.81333 12.05997 ## ## $weights ## [1] &quot;npairs&quot; ## ## $call ## variofit(vario = var1, ini.cov.pars = ini1, cov.model = &quot;wave&quot;, ## fix.nugget = TRUE, nugget = 8984.94, weights = &quot;npairs&quot;) ## ## attr(,&quot;class&quot;) ## [1] &quot;summary.variomodel&quot; summary(fitvar3) ## $pmethod ## [1] &quot;WLS (weighted least squares)&quot; ## ## $cov.model ## [1] &quot;matern&quot; ## ## $spatial.component ## sigmasq phi ## 32541.18204 22.69704 ## ## $spatial.component.extra ## kappa ## 0.5 ## ## $nugget.component ## tausq ## 8984.94 ## ## $fix.nugget ## [1] TRUE ## ## $fix.kappa ## [1] TRUE ## ## $practicalRange ## [1] 67.99426 ## ## $sum.of.squares ## value ## 26.97852 ## ## $estimated.pars ## sigmasq phi ## 32541.18204 22.69704 ## ## $weights ## [1] &quot;cressie&quot; ## ## $call ## variofit(vario = var1, ini.cov.pars = ini1, fix.nugget = TRUE, ## nugget = 8984.94, weights = &quot;cressie&quot;) ## ## attr(,&quot;class&quot;) ## [1] &quot;summary.variomodel&quot; summary(fitvar4) ## Summary of the parameter estimation ## ----------------------------------- ## Estimation method: maximum likelihood ## ## Parameters of the mean component (trend): ## beta0 beta1 beta2 ## 2723.1654 -7.1140 -6.9505 ## ## Parameters of the spatial component: ## correlation function: wave ## (estimated) variance parameter sigmasq (partial sill) = 30806 ## (estimated) cor. fct. parameter phi (range parameter) = 12.11 ## anisotropy parameters: ## (fixed) anisotropy angle = 0 ( 0 degrees ) ## (fixed) anisotropy ratio = 1 ## ## Parameter of the error component: ## (fixed) nugget = 8984.94 ## ## Transformation parameter: ## (fixed) Box-Cox parameter = 1 (no transformation) ## ## Practical Range with cor=0.05 for asymptotic range: 36.2227 ## ## Maximised Likelihood: ## log.L n.params AIC BIC ## &quot;-572.8&quot; &quot;5&quot; &quot;1156&quot; &quot;1168&quot; ## ## non spatial model: ## log.L n.params AIC BIC ## &quot;-570.8&quot; &quot;4&quot; &quot;1150&quot; &quot;1159&quot; ## ## Call: ## likfit(geodata = aquiferg, coords = aquiferg$coords, data = aquiferg$data, ## trend = &quot;1st&quot;, ini.cov.pars = ini1, fix.nugget = T, nugget = 8984.94, ## cov.model = &quot;wave&quot;, lik.method = &quot;ML&quot;) summary(fitvar5) ## Summary of the parameter estimation ## ----------------------------------- ## Estimation method: restricted maximum likelihood ## ## Parameters of the mean component (trend): ## beta0 beta1 beta2 ## 2723.0308 -7.1143 -6.9479 ## ## Parameters of the spatial component: ## correlation function: wave ## (estimated) variance parameter sigmasq (partial sill) = 30806 ## (estimated) cor. fct. parameter phi (range parameter) = 12.16 ## anisotropy parameters: ## (fixed) anisotropy angle = 0 ( 0 degrees ) ## (fixed) anisotropy ratio = 1 ## ## Parameter of the error component: ## (fixed) nugget = 8984.94 ## ## Transformation parameter: ## (fixed) Box-Cox parameter = 1 (no transformation) ## ## Practical Range with cor=0.05 for asymptotic range: 36.38468 ## ## Maximised Likelihood: ## log.L n.params AIC BIC ## &quot;-553.2&quot; &quot;5&quot; &quot;1116&quot; &quot;1129&quot; ## ## non spatial model: ## log.L n.params AIC BIC ## &quot;-552.1&quot; &quot;4&quot; &quot;1112&quot; &quot;1122&quot; ## ## Call: ## likfit(geodata = aquiferg, coords = aquiferg$coords, data = aquiferg$data, ## trend = &quot;1st&quot;, ini.cov.pars = ini1, fix.nugget = T, nugget = 8984.94, ## cov.model = &quot;wave&quot;, lik.method = &quot;REML&quot;) 3.7 Pulimiento de medianas Esta es una alternativa al modelamiento de la media cuando los modelos de regresión polinómicos usuales no logran el objetivo de eliminar la tendencia ya sea porque el tipo de tendencia corresponde mas a unas ventanas móviles o porque hay presentes datos atípicos. 3.7.1 Cargar librerias Lista de librerías con link a la documentación. rm(list=ls()) library(gstat) ## ## Attaching package: &#39;gstat&#39; ## The following objects are masked from &#39;package:sgeostat&#39;: ## ## fit.variogram, krige library(sp) library(mvtnorm) ## ## Attaching package: &#39;mvtnorm&#39; ## The following objects are masked from &#39;package:spam&#39;: ## ## rmvnorm, rmvt gstat sp 3.7.2 Grilla de las ubicaciones espaciales. n_x &lt;- 4 n_y &lt;- 6 x &lt;- seq(0, 1, len = n_x) y &lt;- seq(0, 1, len = n_y) coordenadas &lt;- as.data.frame(expand.grid(x, y)) names(coordenadas) &lt;- c(&quot;X&quot;, &quot;Y&quot;) Encabezado coordenadas X Y 0.0000000 0.0 0.3333333 0.0 0.6666667 0.0 1.0000000 0.0 0.0000000 0.2 0.3333333 0.2 3.7.3 Definición de objeto VGM Esto define un objeto vgm que es el tipo de objeto que usa el paquete gstat para los modelos teóricos de variograma. Con este objeto se pueden definir modelos anidados. vgm vario &lt;- vgm(10, # Punto de silla &quot;Exp&quot;, # Modelo, ver documentación 0.5) # Rango print(vario) ## model psill range ## 1 Exp 10 0.5 3.7.4 Matriz de varianza dadas coordenadas. vgmArea coordinates coordinates(coordenadas) &lt;- ~X + Y class(coordenadas) # Cambio de objedto dataframe a sp ## [1] &quot;SpatialPoints&quot; ## attr(,&quot;package&quot;) ## [1] &quot;sp&quot; cov_mat &lt;- vgmArea(coordenadas, # Matriz de ubiaciones SP vgm = vario) # VGM object print(dim(cov_mat)) ## [1] 24 24 3.7.5 Simulación. Simulación dada la media y la matriz de varianza mu &lt;- rep(0, n_x * n_y) # Media del proceso simu &lt;- rmvnorm(1, mean = mu, sigma = cov_mat) print(simu[1:5]) ## [1] -1.6917695 2.3187923 -0.2661815 -2.4909205 -1.4116579 3.7.6 Pulimiento de medianas Unir las coordenadas con la columna de simulación data &lt;- as.data.frame(cbind(coordenadas@coords, Simula = t(simu))) names(data) &lt;- c(&quot;X&quot;, &quot;Y&quot;, &quot;Var&quot;) print(head(data)) ## X Y Var ## 1 0.0000000 0.0 -1.6917695 ## 2 0.3333333 0.0 2.3187923 ## 3 0.6666667 0.0 -0.2661815 ## 4 1.0000000 0.0 -2.4909205 ## 5 0.0000000 0.2 -1.4116579 ## 6 0.3333333 0.2 0.8264604 Reshape para matriz, esto transforma la tabla de datos en matriz tabla &lt;- reshape2::dcast(data, X ~ Y, value.var = &quot;Var&quot;) rownames(tabla) &lt;- tabla[, 1] tabla &lt;- tabla[, c(-1)] print(tabla) ## 0 0.2 0.4 0.6 0.8 1 ## 0 -1.6917695 -1.4116579 -3.094371 -5.6501806 -0.7965656 -1.999786 ## 0.333333333333333 2.3187923 0.8264604 1.752031 0.6832913 1.9601689 2.909165 ## 0.666666666666667 -0.2661815 -0.3941048 1.970392 1.3728696 2.6450545 7.319216 ## 1 -2.4909205 -0.8986623 1.758796 1.5248534 6.0101314 8.009519 Pulimiento de medianas de la tabla med &lt;- medpolish(tabla) ## 1: 32.48408 ## 2: 32.042 ## Final: 32.042 geo_data &lt;- reshape2::melt(med$residuals) print(med) ## ## Median Polish Results (Dataset: &quot;tabla&quot;) ## ## Overall: 1.290137 ## ## Row Effects: ## 0 0.333333333333333 0.666666666666667 1 ## -4.1937452 -0.0594464 0.0594464 0.3647171 ## ## Column Effects: ## 0 0.2 0.4 0.6 0.8 1 ## -0.2638317 -1.0739593 0.3126407 -0.3387001 1.7012567 3.8240533 ## ## Residuals: ## 0 0.2 0.4 0.6 0.8 1 ## 0 1.4757 2.56591 -0.50340 -2.40787 0.40579 -2.9202 ## 0.333333333333333 1.3519 0.66973 0.20870 -0.20870 -0.97178 -2.1456 ## 0.666666666666667 -1.3519 -0.66973 0.30817 0.36199 -0.40579 2.1456 ## 1 -3.8819 -1.47956 -0.20870 0.20870 2.65402 2.5306 Reshape de los datos, con efecto de la fila y la columna tabla_residuales &lt;- as.data.frame(med$residuals) names(tabla_residuales) &lt;- med$col rownames(tabla_residuales) &lt;- med$row geo_data &lt;- reshape2::melt(as.matrix(tabla_residuales)) geo_data &lt;- cbind(data, geo_data, med$overall) names(geo_data) &lt;- c(&quot;X&quot;, &quot;Y&quot;, &quot;Var&quot;, &quot;Efecto fila&quot;, &quot;Efecto columa&quot;, &quot;Residual&quot;, &quot;Efecto Global&quot;) print(geo_data) ## X Y Var Efecto fila Efecto columa Residual Efecto Global ## 1 0.0000000 0.0 -1.6917695 -4.1937452 -0.2638317 1.4756702 1.290137 ## 2 0.3333333 0.0 2.3187923 -0.0594464 -0.2638317 1.3519333 1.290137 ## 3 0.6666667 0.0 -0.2661815 0.0594464 -0.2638317 -1.3519333 1.290137 ## 4 1.0000000 0.0 -2.4909205 0.3647171 -0.2638317 -3.8819430 1.290137 ## 5 0.0000000 0.2 -1.4116579 -4.1937452 -1.0739593 2.5659094 1.290137 ## 6 0.3333333 0.2 0.8264604 -0.0594464 -1.0739593 0.6697290 1.290137 ## 7 0.6666667 0.2 -0.3941048 0.0594464 -1.0739593 -0.6697290 1.290137 ## 8 1.0000000 0.2 -0.8986623 0.3647171 -1.0739593 -1.4795572 1.290137 ## 9 0.0000000 0.4 -3.0943711 -4.1937452 0.3126407 -0.5034037 1.290137 ## 10 0.3333333 0.4 1.7520307 -0.0594464 0.3126407 0.2086993 1.290137 ## 11 0.6666667 0.4 1.9703920 0.0594464 0.3126407 0.3081678 1.290137 ## 12 1.0000000 0.4 1.7587956 0.3647171 0.3126407 -0.2086993 1.290137 ## 13 0.0000000 0.6 -5.6501806 -4.1937452 -0.3387001 -2.4078724 1.290137 ## 14 0.3333333 0.6 0.6832913 -0.0594464 -0.3387001 -0.2086993 1.290137 ## 15 0.6666667 0.6 1.3728696 0.0594464 -0.3387001 0.3619862 1.290137 ## 16 1.0000000 0.6 1.5248534 0.3647171 -0.3387001 0.2086993 1.290137 ## 17 0.0000000 0.8 -0.7965656 -4.1937452 1.7012567 0.4057858 1.290137 ## 18 0.3333333 0.8 1.9601689 -0.0594464 1.7012567 -0.9717786 1.290137 ## 19 0.6666667 0.8 2.6450545 0.0594464 1.7012567 -0.4057858 1.290137 ## 20 1.0000000 0.8 6.0101314 0.3647171 1.7012567 2.6540204 1.290137 ## 21 0.0000000 1.0 -1.9997864 -4.1937452 3.8240533 -2.9202317 1.290137 ## 22 0.3333333 1.0 2.9091645 -0.0594464 3.8240533 -2.1455795 1.290137 ## 23 0.6666667 1.0 7.3192164 0.0594464 3.8240533 2.1455795 1.290137 ## 24 1.0000000 1.0 8.0095186 0.3647171 3.8240533 2.5306111 1.290137 Validación de la descomposición valida &lt;- cbind(geo_data$Var, geo_data[[&quot;Efecto fila&quot;]] + geo_data[[&quot;Efecto columa&quot;]] + geo_data[[&quot;Residual&quot;]] + geo_data[[&quot;Efecto Global&quot;]]) valida &lt;- as.data.frame(valida) names(valida) &lt;- c(&quot;datos&quot;, &quot;suma&quot;) print(valida) ## datos suma ## 1 -1.6917695 -1.6917695 ## 2 2.3187923 2.3187923 ## 3 -0.2661815 -0.2661815 ## 4 -2.4909205 -2.4909205 ## 5 -1.4116579 -1.4116579 ## 6 0.8264604 0.8264604 ## 7 -0.3941048 -0.3941048 ## 8 -0.8986623 -0.8986623 ## 9 -3.0943711 -3.0943711 ## 10 1.7520307 1.7520307 ## 11 1.9703920 1.9703920 ## 12 1.7587956 1.7587956 ## 13 -5.6501806 -5.6501806 ## 14 0.6832913 0.6832913 ## 15 1.3728696 1.3728696 ## 16 1.5248534 1.5248534 ## 17 -0.7965656 -0.7965656 ## 18 1.9601689 1.9601689 ## 19 2.6450545 2.6450545 ## 20 6.0101314 6.0101314 ## 21 -1.9997864 -1.9997864 ## 22 2.9091645 2.9091645 ## 23 7.3192164 7.3192164 ## 24 8.0095186 8.0095186 "],["otros-tipos-de-kriging.html", "Capítulo 4 Otros Tipos de Kriging 4.1 (TO-DO) 4.2 Kriging Indicador 4.3 Kriging Transgaussiano 4.4 Comparación Kriging Universal y Ordinario", " Capítulo 4 Otros Tipos de Kriging 4.1 (TO-DO) 4.2 Kriging Indicador 4.3 Kriging Transgaussiano 4.4 Comparación Kriging Universal y Ordinario "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
