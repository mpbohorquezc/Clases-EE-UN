[["index.html", "Patrones Puntuales Estudio de Mercadeo Chapter 1 Introducción 1.1 Indice", " Patrones Puntuales Estudio de Mercadeo Martha Bohorquez 2022-12-21 Chapter 1 Introducción En los sisguientes cuadernos encontrará ejemplos con código sobre estadística espacial. Para poder correr todos los ejemplos clone el repositorio de la siguiente forma. Debe tener instalado previamente git en su computador. git clone https://github.com/mpbohorquezc/Clases-EE-UN.git Si esta corriendo sobre Ubuntu o Mint es importante tener algunos compiladores previamente instalados para poder instanciar algunas de las librerías. En general con los siguientes comandos podría correr cualquiera de los cuadernos sin problema sudo apt-get install r-base-dev sudo apt install liblapack-dev libopenblas-dev Si alguna dependencia hace falta algunos repositorios los puede descargar e instalar a manera de archivo .tar.gz o se encuentran simplemente en los repositorios del CRAN. 1.1 Indice Introducción Simulación Proceso Espacio Temporal Spatial modeling leukemia Modelos de regresión espacial Pre-procesamiento de datos Ilustración del kriging simple espacio tiempo Pulimiento de medianas Introducción proceso espacial bivariado Geoestadística con sgeostat Cokriging ntroducción al proceso espacial bivariado Ilustración del kriging simple espacio tiempo Análisis de datos funcionales "],["simulación-proceso-espacio-temporal.html", "Chapter 2 Simulación Proceso Espacio Temporal 2.1 Funciones 2.2 CH 1 no separable 2.3 CH3 no separable 2.4 CH 4", " Chapter 2 Simulación Proceso Espacio Temporal 2.1 Funciones rm(list=ls()) ##Funciones de covarianza espacio temporal exp_esp_temp=function(h,u,p){((p[1])^2)*exp(-h/p[2]-u/p[3])} gauss_esp_temp=function(h,u,p){(p[1]^2)*exp(-(h/p[2])^2-(u/p[3])^2)} cressie1=function(h,u,p){(p[1]^2/((p[2]^2*u^2+1)))*exp(-(p[3]^2*h^2)/(p[2]^2*u^2+1))} Gneiting1=function(h,u,p){p[1]^2/((p[2]*u^(2*p[3])+1)^(p[4]))*exp(-(p[6]*h^(2*p[5]))/((p[2]*u^(2*p[3])+1)^(p[4]*p[5])))} #Gneiting2=function(h,u,sigma,p){p[1]^2/((2^(p[3]-1))*p[7](p[3])*(p[2]*u^(2*p[3])+1)^(p[4]+p[5]))*(((p[6]*h)/((p[2]*u^(2*[3])+1)^(p[5]/2)))^p[3])*besselK(((p[6]*h)/((p[2]*u^(2*[3])+1)^(p[5]/2))),p[3])} Iaco_Cesare=function(h,u,a,b,c){(1+h^p[1]+u^p[2])^(-p[3])} #separables mas comunes: gaussiano y exponencial p=(sigma,a,b) Gaussiano=function(p,h,u){p[1]^2*exp(-p[2]^2*u^2-p[3]^2*h^2)} Exponencial=function(p,h,u){p[1]^2*exp(-p[2]^2*u-p[3]^2*h)} #C R E S S I E - H U A N G (1999) #sigma:desviacion estandar, a es el par?metros de escala del tiempo, b es el par?metros de escala del espacio, d es la dimensi?n espacial; a,b positivos CH_1=function(h,u,p,d){(p[1]^2/((p[2]^2*u^2+1)^(d/2)))*exp(-(p[3]^2*h^2)/(p[2]^2*u^2+1))} CH_2=function(h,u,p,d){(p[1]^2/((p[2]*abs(u)+1)^(d/2)))*exp(-(p[3]^2*h^2)/(p[2]*abs(u)+1))} CH_3=function(h,u,p,d){p[1]^2*((p[2]^2)*(u^2)+1)/(((p[2]^2)*(u^2)+1)^2+(p[3]^2)*h^2)^((d+1)/2)} CH_4=function(h,u,p,d){p[1]^2*(p[2]*abs(u)+1)/((p[2]*abs(u)+1)^2+(p[3]^2)*h^2)^((d+1)/2)} #el caso mas general de C R E S S I E - H U A N G (1999) es cuando d=2, entonces queda CH_1=function(h,u,p){(p[1]^2/((p[2]^2*u^2+1)))*exp(-(p[3]^2*h^2)/(p[2]^2*u^2+1))} CH_2=function(h,u,p){(p[1]^2/((p[2]*abs(u)+1)))*exp(-(p[3]^2*h^2)/(p[2]*abs(u)+1))} CH_3=function(h,u,p){p[1]^2*((p[2]^2)*(u^2)+1)/(((p[2]^2)*(u^2)+1)^2+(p[3]^2)*h^2)^((3)/2)} CH_4=function(h,u,p){p[1]^2*(p[2]*abs(u)+1)/((p[2]*abs(u)+1)^2+(p[3]^2)*h^2)^((3)/2)} ####Gneiting (2002), combina fun1, fun2 y psi en Gneiting##### #fun1 phi1=function(r,c,gama,v){v*exp(-c*r^gama)} #c&gt;0, 0&lt;gama&lt;=1, siempre v=1 phi2=function(r,c,gama,v){((2^(v-1))*gamma(v))^(-1)*(c*r^0.5)^v*besselK(c*r^0.5,v)} #c&gt;0, v&gt;0 phi3=function(r,c,gama,v){(1+c*r^gama)^(-v)} #c&gt;0, 0&lt;gama&lt;=1, v&gt;0 phi4=function(r,c,gama,v){gama*(2^v)*(exp(c*r^0.5)+exp(-c*r^0.5))^(-v)} #c&gt;0, v&gt;0, siempre gama=1 #fun2 psi1=function(r,a,alpha,beta){(a*r^alpha+1)^beta} #a&gt;0, 0&lt;alpha&lt;=1, 0&lt;=beta&lt;=1 psi2=function(r,a,alpha,beta){log(a*r^alpha+beta)/log(beta)} #a&gt;0, beta&gt;1, 0&lt;alpha&lt;=1 psi3=function(r,a,alpha,beta){(a*r^alpha+beta)/(beta*(a*r^alpha+1))} #a&gt;0, 0&lt;beta&lt;=1 0&lt;alpha&lt;=1 #Cualquier combinaci?n genera una funci?n de covarianza v?lida Gneiting=function(h,u,sigma,d,a,alpha,beta,c,gama,v,psi,phi){ (sigma^2/(psi((abs(u)^2),a,alpha,beta))^(d/2))*phi(h^2/(psi(abs(u)^2,a,alpha,beta)),c,gama,v)} #el caso mas general de Gneiting (2002) es cuando d=2, entonces queda Gneiting=function(h,u,sigma,a,alpha,beta,c,gama,v,psi,phi){ (sigma^2/(psi((abs(u)^2),a,alpha,beta)))*phi(h^2/(psi(abs(u)^2,a,alpha,beta)),c,gama,v)} ####IACO_CESSARE C_IACO_CESSARE=function(h,u,sigma,a,b,alpha,beta,gama){ (1 + (h/a)^alpha + (u/b)^beta)^(-gama)} #(Porcu, 2007) Basado en la funci?n de supervivencia de Dagum #funci?n de Dagum Dagum=function(r,lambda,theta,epsilon){1-1/(1+lambda*r^(-theta))^epsilon} #lamdba, theta in (0,7), epsilon in (0,7) Dagumm=function(r,lambda,theta,epsilon){ifelse(r==0,1,Dagum(r,lambda,theta,epsilon))} Porcu_sep=function(h,u,lambda_h,theta_h,epsilon_h,lambda_u,theta_u,epsilon_u){ Dagumm(h,lambda_h,theta_h,epsilon_h)*Dagumm(u,lambda_u,theta_u,epsilon_u)} Porcu_Nsep=function(h,u,lambda_h,theta_h,epsilon_h,lambda_u,theta_u,epsilon_u,vartheta){ vartheta*Dagumm(h,lambda_h,theta_h,epsilon_h)+(1-vartheta)*Dagumm(u,lambda_u,theta_u,epsilon_u)} 2.2 CH 1 no separable ###CH 1 no separable library(mvtnorm) #generar la grilla espacio temporal x1 &lt;- seq(0,30,by = 5) x2 &lt;- seq(10,60,by = 7) t &lt;- seq(1,20,len=10) grillaSpT=expand.grid(x1,x2,t) matDistSp=as.matrix(dist(grillaSpT[,1:2])) matDistT=as.matrix(dist(grillaSpT[,3:3])) ##parameters p, mu, que en este caso son p=c(7,2,1) y mu=120 sigma=cressie1(matDistSp,matDistT,p=c(7,2,1)) sim1=rmvnorm(1,mean=rep(120,nrow(grillaSpT)), sigma=sigma) datos1=cbind(grillaSpT,t(sim1)) names(datos1)=c(&quot;x&quot;,&quot;y&quot;,&quot;t&quot;,&quot;z((x,y),t)&quot;) #View(datos1) grillaSp=expand.grid(x1,x2) colnames(grillaSp)=c(&quot;x&quot;,&quot;y&quot;) rownames(grillaSp)=paste(&quot;S&quot;,1:nrow(grillaSp)) datos1_ord=datos1[order(datos1$x, datos1$y, datos1$t),] dataSim1=matrix(c(datos1_ord[,4]),nrow=length(t),ncol=nrow(grillaSp),byrow=F) colnames(dataSim1)=rownames(grillaSp) rownames(dataSim1)=t dataSim1_path = file(&quot;data_1_SimulationTemporalEspatial/dataSim1.txt&quot;,open=&quot;at&quot;) write.table(dataSim1,dataSim1_path) “” CH 2 no sepaarable #CH 2 no separable library(mvtnorm) #generar la grilla espacio temporal x1 &lt;- seq(0,30,by = 6) x2 &lt;- seq(10,60,by = 8) t &lt;- seq(1,20,len=10) grillaSpT=expand.grid(x1,x2,t) matDistSp=as.matrix(dist(grillaSpT[,1:2])) matDistT=as.matrix(dist(grillaSpT[,3:3])) ##parameters p, mu, que en este caso son p=c(7,2,1) y mu=120 sigma=CH_2(matDistSp,matDistT,p=c(10,3,4)) sim2=rmvnorm(1,mean=rep(34,nrow(grillaSpT)), sigma=sigma) datos2=cbind(grillaSpT,t(sim2)) names(datos2)=c(&quot;x&quot;,&quot;y&quot;,&quot;t&quot;,&quot;zz((x,y),t)&quot;) #View(datos2) grillaSp=expand.grid(x1,x2) colnames(grillaSp)=c(&quot;x&quot;,&quot;y&quot;) rownames(grillaSp)=paste(&quot;S&quot;,1:nrow(grillaSp)) datos2_ord=datos2[order(datos2$x, datos2$y, datos2$t),] dataSim2=matrix(c(datos2_ord[,4]),nrow=length(t),ncol=nrow(grillaSp),byrow=F) colnames(dataSim2)=rownames(grillaSp) rownames(dataSim2)=t dataSim2_path = file(&quot;data_1_SimulationTemporalEspatial/dataSim2.txt&quot;,open=&quot;at&quot;) write.table(dataSim2,dataSim2_path) class(dataSim2) ## [1] &quot;matrix&quot; &quot;array&quot; 2.3 CH3 no separable #CH 3 no separable x1 &lt;- seq(0,30,by = 5) x2 &lt;- seq(10,60,by = 7) grillaSp=expand.grid(x1,x2) colnames(grillaSp)=c(&quot;x&quot;,&quot;y&quot;) rownames(grillaSp)=paste(&quot;S&quot;,1:nrow(grillaSp)) t &lt;- seq(1,20,len=10) grillaSpT=expand.grid(x1,x2,t) matDistSp=as.matrix(dist(grillaSpT[,1:2])) matDistT=as.matrix(dist(grillaSpT[,3:3])) ##parameters p, mu, que en este caso son p=c(7,2,1) y mu=120 sigma=CH_3(matDistSp,matDistT,p=c(6,2.5,3.2)) sim3=rmvnorm(1,mean=rep(34,nrow(grillaSpT)), sigma=sigma) datos2=cbind(grillaSpT,t(sim3)) names(datos2)=c(&quot;x&quot;,&quot;y&quot;,&quot;t&quot;,&quot;zz((x,y),t)&quot;) #View(datos2) datos3 = datos2 datos3_ord=datos3[order(datos3$x, datos3$y, datos3$t),] dataSim3=matrix(c(datos3_ord[,4]),nrow=length(t),ncol=nrow(grillaSp),byrow=F) colnames(dataSim3)=rownames(grillaSp) rownames(dataSim3)=t 2.4 CH 4 #caso 4 library(mvtnorm) #generar la grilla espacio temporal x1 &lt;- seq(1,35,by = 7) x2 &lt;- seq(10,60,by = 10) grillaSp=expand.grid(x1,x2) colnames(grillaSp)=c(&quot;x&quot;,&quot;y&quot;) rownames(grillaSp)=paste(&quot;S&quot;,1:nrow(grillaSp)) t &lt;- seq(1,20,len=10) grillaSpT=expand.grid(x1,x2,t) matDistSp=as.matrix(dist(grillaSpT[,1:2])) matDistT=as.matrix(dist(grillaSpT[,3:3])) ##parameters p, mu, que en este caso son p=c(7,2,1) y mu=120 sigma=CH_3(matDistSp,matDistT,p=c(6,2.5,3.2)) sim4=rmvnorm(1,mean=rep(34,nrow(grillaSpT)), sigma=sigma) datos4=cbind(grillaSpT,t(sim4)) names(datos4)=c(&quot;x&quot;,&quot;y&quot;,&quot;t&quot;,&quot;zz((x,y),t)&quot;) #View(datos4) datos4_ord=datos4[order(datos4$x, datos4$y, datos4$t),] dataSim4=matrix(c(datos4_ord[,4]),nrow=length(t),ncol=nrow(grillaSp),byrow=F) colnames(dataSim4)=rownames(grillaSp) rownames(dataSim4)=t "],["spatial-modeling-leukemia.html", "Chapter 3 Spatial modeling leukemia 3.1 Mortality 3.2 Incidence", " Chapter 3 Spatial modeling leukemia 3.1 Mortality Spatial modeling of incidence and mortality childhood leukemia based on Colombian armed conflict and poverty for children born during the years 2002-2013 3.1.1 Packages Mortality rm(list=ls()) require(rgdal) require(pscl) require(sf) require(spdep) require(spatialreg) #test.W, scores.listw require(stringr) require(performance) require(AER) require(ggplot2) require(vcdExtra) require(dbscan) 3.1.2 Code Mortality Reading the shapefile of 1124 Colombian municipalities, defining the Coordinate Reference System and centroid and building some variables #Reading the shapefile of 1124 Colombian municipalities muncol &lt;- rgdal::readOGR(dsn=&quot;data_2_Leukemia/muncol.shp&quot;) ## OGR data source with driver: ESRI Shapefile ## Source: &quot;/home/jncc/Documents/Monitorias/EspacialPage/Clases-EE-UN/data_2_Leukemia/muncol.shp&quot;, layer: &quot;muncol&quot; ## with 1124 features ## It has 17 fields muncol=spTransform(muncol,CRS(&quot;+init=epsg:21897&quot;)) (l &lt;- length(muncol)) ## [1] 1124 #Representative coordinate (centroid) options(warn = -1) xy0=data.frame(x=muncol$x,y=muncol$y) coordinates(xy0) &lt;- c(&#39;x&#39;,&#39;y&#39;) proj4string(xy0) &lt;- CRS(&quot;+init=epsg:4326&quot;) xy0=spTransform(xy0,CRS(&quot;+init=epsg:21897&quot;)) ###Loops for avoiding NA r &lt;- sum(muncol$Ndeaths)/sum(muncol$NPop) for (i in 1:l){ if(muncol$NPop[i]==0){ muncol$EsperadosDeNCancer[i] &lt;- 1 } else{ muncol$EsperadosDeNCancer[i] &lt;- muncol$NPop[i]*r } } muncol$IICA_Cat=muncol$IICA_Ca muncol$IICA_Cat=str_replace_all(muncol$IICA_Cat,&quot;Bajo&quot;, &quot;Low&quot;) muncol$IICA_Cat=str_replace_all(muncol$IICA_Cat,&quot;Medio&quot;, &quot;Medium&quot;) muncol$IICA_CatLow=ifelse(muncol$IICA_Cat==&quot;Low&quot;,1,0) muncol$IICA_CatMed=ifelse(muncol$IICA_Cat==&quot;Medium&quot;,1,0) muncol$IICA_High=as.character(1-(muncol$IICA_CatLow+muncol$IICA_CatMed)) muncol$UBN=muncol$NBI Modeling leukemia Mortality Rate (LR) in terms of Colombian armed conflict index, poverty, rurality and health coverage. First, the usual Poisson regression model with mortality rate as response variable is estimated. glmbaseLMR&lt;-glm(Ndeaths ~IICA_High+UBN+Per_Rur+Cobertura+offset(log(EsperadosDeNCancer)), family = poisson,data = muncol) anova(glmbaseLMR) ## Analysis of Deviance Table ## ## Model: poisson, link: log ## ## Response: Ndeaths ## ## Terms added sequentially (first to last) ## ## ## Df Deviance Resid. Df Resid. Dev ## NULL 1123 799.92 ## IICA_High 1 0.694 1122 799.22 ## UBN 1 43.405 1121 755.82 ## Per_Rur 1 4.017 1120 751.80 ## Cobertura 1 9.185 1119 742.62 muncol$residLMR=residuals(glmbaseLMR) summary(glmbaseLMR) ## ## Call: ## glm(formula = Ndeaths ~ IICA_High + UBN + Per_Rur + Cobertura + ## offset(log(EsperadosDeNCancer)), family = poisson, data = muncol) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -2.9317 -0.5949 -0.4108 -0.2389 3.3300 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -0.583783 0.307508 -1.898 0.05764 . ## IICA_High1 0.107822 0.084777 1.272 0.20343 ## UBN -0.007902 0.003003 -2.632 0.00850 ** ## Per_Rur -0.002705 0.002370 -1.141 0.25380 ## Cobertura 0.991687 0.336039 2.951 0.00317 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for poisson family taken to be 1) ## ## Null deviance: 799.92 on 1123 degrees of freedom ## Residual deviance: 742.62 on 1119 degrees of freedom ## AIC: 1271.7 ## ## Number of Fisher Scoring iterations: 6 Rurality and conflict armed index are not statistically significant in this first auxiliar model. However, we maintain these variables in the rest of the analysis and review its significance in the final model. Checking excess zeros by comparison between the number of zeros predicted by the model with the observed number of zeros. Also checking overdispersion. mu_LMR &lt;- predict(glmbaseLMR, type = &quot;response&quot;) # predict expected mean count expLMR &lt;- sum(dpois(x = 0, lambda = mu_LMR)) # sum the probabilities of a zero count for each mean round(expLMR) #predicted number of zeros ## [1] 898 sum(muncol$Ndeaths &lt; 1) #observed number of zeros ## [1] 907 zero.test(muncol$Ndeaths) #score test (van den Broek, 1995) ## Score test for zero inflation ## ## Chi-square = 902.95398 ## df = 1 ## pvalue: &lt; 2.22e-16 ##Checking overdispersion dispersiontest(glmbaseLMR) #Cameron &amp; Trivedi (1990) ## ## Overdispersion test ## ## data: glmbaseLMR ## z = 2.2049, p-value = 0.01373 ## alternative hypothesis: true dispersion is greater than 1 ## sample estimates: ## dispersion ## 1.109361 The observed frequency of zeroes in data exceeds the predicted in the Leukemia mortality rate (LMR) model. Also, overdispersion is detected. Now, to validate the independence assumption, first, it is necessary to define spatial weighting possible matrices. rook_nb_b=nb2listw(poly2nb(muncol,queen=FALSE), style=&quot;B&quot;,zero.policy = TRUE) rook_nb_w=nb2listw(poly2nb(muncol,queen=FALSE), style=&quot;W&quot;,zero.policy = TRUE) queen_nb_b=nb2listw(poly2nb(muncol,queen=TRUE), style=&quot;B&quot;,zero.policy = TRUE) queen_nb_w=nb2listw(poly2nb(muncol,queen=TRUE), style=&quot;W&quot;,zero.policy = TRUE) #Graphs neighbours trinb=tri2nb(xy0) options(warn = -1) tri_nb_b=nb2listw(tri2nb(xy0), style=&quot;B&quot;,zero.policy = TRUE) tri_nb_w=nb2listw(tri2nb(xy0), style=&quot;W&quot;,zero.policy = TRUE) soi_nb_b=nb2listw(graph2nb(soi.graph(trinb,xy0)), style=&quot;B&quot;,zero.policy = TRUE) soi_nb_w=nb2listw(graph2nb(soi.graph(trinb,xy0)), style=&quot;W&quot;,zero.policy = TRUE) relative_nb_b=nb2listw(graph2nb(relativeneigh(xy0), sym=TRUE), style=&quot;B&quot;,zero.policy = TRUE) relative_nb_w=nb2listw(graph2nb(relativeneigh(xy0), sym=TRUE), style=&quot;W&quot;,zero.policy = TRUE) gabriel_nb_b=nb2listw(graph2nb(gabrielneigh(xy0), sym=TRUE), style=&quot;B&quot;,zero.policy = TRUE) gabriel_nb_w=nb2listw(graph2nb(gabrielneigh(xy0), sym=TRUE), style=&quot;W&quot;,zero.policy = TRUE) #Distance neighbours knn1_nb_b=nb2listw(knn2nb(knearneigh(xy0, k = 1)), style=&quot;B&quot;,zero.policy = TRUE) knn1_nb_w=nb2listw(knn2nb(knearneigh(xy0, k = 1)), style=&quot;W&quot;,zero.policy = TRUE) knn2_nb_b=nb2listw(knn2nb(knearneigh(xy0, k = 2)), style=&quot;B&quot;,zero.policy = TRUE) knn2_nb_w=nb2listw(knn2nb(knearneigh(xy0, k = 2)), style=&quot;W&quot;,zero.policy = TRUE) knn3_nb_b=nb2listw(knn2nb(knearneigh(xy0, k = 3)), style=&quot;B&quot;,zero.policy = TRUE) knn3_nb_w=nb2listw(knn2nb(knearneigh(xy0, k = 3)), style=&quot;W&quot;,zero.policy = TRUE) knn4_nb_b=nb2listw(knn2nb(knearneigh(xy0, k = 4)), style=&quot;B&quot;,zero.policy = TRUE) knn4_nb_w=nb2listw(knn2nb(knearneigh(xy0, k = 4)), style=&quot;W&quot;,zero.policy = TRUE) mat=list(rook_nb_b,rook_nb_w, queen_nb_b,queen_nb_w, tri_nb_b,tri_nb_w, soi_nb_b,soi_nb_w, gabriel_nb_b,gabriel_nb_w, relative_nb_b,relative_nb_w, knn1_nb_b,knn1_nb_w, knn2_nb_b,knn2_nb_w, knn3_nb_b,knn3_nb_w, knn4_nb_b,knn4_nb_w) Testing spatial autocorrelation using Moran index test based on weighting matrices built in the last step. Note that with all weighting matrices we obtain a significant spatial autocorrelation. aux=numeric(0) options(warn = -1) { for(i in 1:length(mat)) aux[i]=moran.test(muncol$residLMR,mat[[i]],alternative=&quot;two.sided&quot;)$&quot;statistic&quot; aux } ## [1] 1.238996 1.473832 1.428553 1.629968 1.367192 1.592464 1.921616 2.011106 1.860100 2.247294 2.629440 2.588622 ## [13] 1.099401 1.099401 2.469062 2.469062 3.088200 3.088200 3.450986 3.450986 which.max(aux) ## [1] 19 moran.test(muncol$residLMR, mat[[which.max(aux)]], alternative=&quot;two.sided&quot;) ## ## Moran I test under randomisation ## ## data: muncol$residLMR ## weights: mat[[which.max(aux)]] ## ## Moran I statistic standard deviate = 3.451, p-value = 0.0005585 ## alternative hypothesis: two.sided ## sample estimates: ## Moran I statistic Expectation Variance ## 0.0672352967 -0.0008904720 0.0003897053 First, Poisson Hurdle model is estimated without consider spatial autocorrelation. mod.hurdleLMR &lt;- hurdle(Ndeaths ~IICA_High+UBN+Per_Rur+Cobertura+offset(log(EsperadosDeNCancer))|IICA_High+UBN+Per_Rur+Cobertura+offset(log(EsperadosDeNCancer)),data = muncol,dist = &quot;poisson&quot;, zero.dist = &quot;binomial&quot;) resid_Pois_Hurdle=residuals(mod.hurdleLMR,&quot;response&quot;) summary(mod.hurdleLMR) ## ## Call: ## hurdle(formula = Ndeaths ~ IICA_High + UBN + Per_Rur + Cobertura + offset(log(EsperadosDeNCancer)) | ## IICA_High + UBN + Per_Rur + Cobertura + offset(log(EsperadosDeNCancer)), data = muncol, dist = &quot;poisson&quot;, ## zero.dist = &quot;binomial&quot;) ## ## Pearson residuals: ## Min 1Q Median 3Q Max ## -1.6105 -0.4155 -0.2926 -0.1781 7.8519 ## ## Count model coefficients (truncated poisson with log link): ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 0.0131708 0.3793725 0.035 0.9723 ## IICA_High1 0.2239159 0.1048208 2.136 0.0327 * ## UBN -0.0006294 0.0050823 -0.124 0.9014 ## Per_Rur -0.0064173 0.0049162 -1.305 0.1918 ## Cobertura 0.1702217 0.4227398 0.403 0.6872 ## Zero hurdle model coefficients (binomial with logit link): ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -1.013658 0.570592 -1.777 0.075650 . ## IICA_High1 -0.091317 0.177363 -0.515 0.606652 ## UBN -0.011792 0.004690 -2.514 0.011928 * ## Per_Rur -0.005190 0.003982 -1.303 0.192473 ## Cobertura 2.283308 0.624231 3.658 0.000254 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Number of iterations in BFGS optimization: 10 ## Log-likelihood: -624 on 10 Df pR2(mod.hurdleLMR) ## fitting null model for pseudo-r2 ## llh llhNull G2 McFadden r2ML r2CU ## -623.9804020 -1369.2239672 1490.4871304 0.5442817 0.7344776 0.8048896 moran.test(resid_Pois_Hurdle, mat[[which.max(aux)]], alternative=&quot;two.sided&quot;) ## ## Moran I test under randomisation ## ## data: resid_Pois_Hurdle ## weights: mat[[which.max(aux)]] ## ## Moran I statistic standard deviate = 4.8924, p-value = 9.964e-07 ## alternative hypothesis: two.sided ## sample estimates: ## Moran I statistic Expectation Variance ## 0.0935041339 -0.0008904720 0.0003722701 Only Conflict armed index predictor is significant but model residuals are significantly spatially autocorrelated. So, we use spatial filtering and check significance again. Below we find Moran Eigenvectors. MEpoisLMR &lt;- spatialreg::ME(Ndeaths ~ IICA_High+UBN+Per_Rur+Cobertura+offset(log(EsperadosDeNCancer)),data=muncol,family=&quot;poisson&quot;,listw=knn4_nb_b, alpha=0.02, verbose=TRUE) ## eV[,11], I: 0.02918226 ZI: NA, pr(ZI): 0.06 MoranEigenVLMR=data.frame(fitted(MEpoisLMR)) #summary(MoranEigenVLMR) Now, we used Poisson Hurdle model to manage the overdispersion due to zero excess and Moran eigenfunctions are included as additional explanatory variables, so that spatial autocorrelation is considered. mod.hurdleLMR &lt;- hurdle( Ndeaths ~ IICA_High+UBN+Per_Rur+Cobertura+ fitted(MEpoisLMR)+offset(log(EsperadosDeNCancer))|IICA_High+ UBN+Per_Rur+Cobertura+offset(log(EsperadosDeNCancer)), data = muncol, dist = &quot;poisson&quot;, zero.dist = &quot;binomial&quot;) resid_Pois_Hurdle=residuals(mod.hurdleLMR,&quot;response&quot;) summary(mod.hurdleLMR) ## ## Call: ## hurdle(formula = Ndeaths ~ IICA_High + UBN + Per_Rur + Cobertura + fitted(MEpoisLMR) + offset(log(EsperadosDeNCancer)) | ## IICA_High + UBN + Per_Rur + Cobertura + offset(log(EsperadosDeNCancer)), data = muncol, dist = &quot;poisson&quot;, ## zero.dist = &quot;binomial&quot;) ## ## Pearson residuals: ## Min 1Q Median 3Q Max ## -1.6969 -0.4153 -0.2920 -0.1791 7.8744 ## ## Count model coefficients (truncated poisson with log link): ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 0.374295 0.391853 0.955 0.33948 ## IICA_High1 0.286868 0.104433 2.747 0.00602 ** ## UBN -0.010727 0.005917 -1.813 0.06986 . ## Per_Rur -0.003464 0.005096 -0.680 0.49664 ## Cobertura -0.058726 0.436141 -0.135 0.89289 ## fitted(MEpoisLMR) -8.856022 1.670191 -5.302 1.14e-07 *** ## Zero hurdle model coefficients (binomial with logit link): ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -1.013658 0.570592 -1.777 0.075650 . ## IICA_High1 -0.091317 0.177363 -0.515 0.606652 ## UBN -0.011792 0.004690 -2.514 0.011928 * ## Per_Rur -0.005190 0.003982 -1.303 0.192473 ## Cobertura 2.283308 0.624231 3.658 0.000254 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Number of iterations in BFGS optimization: 12 ## Log-likelihood: -610 on 11 Df pR2(mod.hurdleLMR) ## fitting null model for pseudo-r2 ## llh llhNull G2 McFadden r2ML r2CU ## -610.0288758 -1369.2239672 1518.3901828 0.5544711 0.7409880 0.8120241 moran.test(resid_Pois_Hurdle, mat[[which.max(aux)]], alternative=&quot;two.sided&quot;) ## ## Moran I test under randomisation ## ## data: resid_Pois_Hurdle ## weights: mat[[which.max(aux)]] ## ## Moran I statistic standard deviate = 1.4546, p-value = 0.1458 ## alternative hypothesis: two.sided ## sample estimates: ## Moran I statistic Expectation Variance ## 0.027522708 -0.000890472 0.000381564 Rurality and health coverage are not statistically significant for counto model. So, those predictors are excluded of the spatial filtering and model. MEpoisLMR &lt;- spatialreg::ME( Ndeaths ~ IICA_High+UBN+offset(log(EsperadosDeNCancer)), data=muncol, family=&quot;poisson&quot;, listw=knn4_nb_b, alpha=0.02, verbose=TRUE) ## eV[,11], I: 0.01071212 ZI: NA, pr(ZI): 0.37 MoranEigenVLMR=data.frame(fitted(MEpoisLMR)) #summary(MoranEigenVLMR) mod.hurdleLMR &lt;- hurdle( Ndeaths ~ IICA_High+UBN+fitted(MEpoisLMR)+ offset(log(EsperadosDeNCancer))|UBN+Cobertura+offset(log(EsperadosDeNCancer)), data = muncol, dist = &quot;poisson&quot;, zero.dist = &quot;binomial&quot;) summary(mod.hurdleLMR) ## ## Call: ## hurdle(formula = Ndeaths ~ IICA_High + UBN + fitted(MEpoisLMR) + offset(log(EsperadosDeNCancer)) | UBN + ## Cobertura + offset(log(EsperadosDeNCancer)), data = muncol, dist = &quot;poisson&quot;, zero.dist = &quot;binomial&quot;) ## ## Pearson residuals: ## Min 1Q Median 3Q Max ## -1.5905 -0.4184 -0.2973 -0.1823 7.3265 ## ## Count model coefficients (truncated poisson with log link): ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 0.355460 0.097724 3.637 0.000275 *** ## IICA_High1 0.274468 0.100011 2.744 0.006062 ** ## UBN -0.013803 0.003796 -3.636 0.000277 *** ## fitted(MEpoisLMR) -9.134355 1.617421 -5.647 1.63e-08 *** ## Zero hurdle model coefficients (binomial with logit link): ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -1.279352 0.535993 -2.387 0.016992 * ## UBN -0.014391 0.004288 -3.356 0.000789 *** ## Cobertura 2.354642 0.616661 3.818 0.000134 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Number of iterations in BFGS optimization: 11 ## Log-likelihood: -611.3 on 7 Df pR2(mod.hurdleLMR) ## fitting null model for pseudo-r2 ## llh llhNull G2 McFadden r2ML r2CU ## -611.2637930 -1369.2239672 1515.9203483 0.5535692 0.7404182 0.8113997 moran.test(resid_Pois_Hurdle, mat[[which.max(aux)]], alternative=&quot;two.sided&quot;) ## ## Moran I test under randomisation ## ## data: resid_Pois_Hurdle ## weights: mat[[which.max(aux)]] ## ## Moran I statistic standard deviate = 1.4546, p-value = 0.1458 ## alternative hypothesis: two.sided ## sample estimates: ## Moran I statistic Expectation Variance ## 0.027522708 -0.000890472 0.000381564 Now, Poisson-Hurdle model residuals are not significant spatially autocorrelated. The LMR’s positive values depend only on the Index of armed conflict (IICA) and on the unsatisfied basic needs index (UBN) and LMR’s zero values depend on the UBN and health coverage. Note that the model shows good performance, according to pseudo R2 and the comparison between observed and predicted frequencies. mf &lt;- model.frame(mod.hurdleLMR) y &lt;- model.response(mf) w &lt;- model.weights(mf) if(is.null(w)) w &lt;- rep(1, NROW(y)) max0 &lt;- 20L obs &lt;- as.vector(xtabs(w ~ factor(y, levels = 0L:max0))) exp &lt;- colSums(predict(mod.hurdleLMR, type = &quot;prob&quot;, at = 0L:max0) * w) fitted_vs_observed &lt;- data.frame(Expected = exp, Observed = obs) data &lt;- reshape2::melt(fitted_vs_observed) ## No id variables; using all as measure variables data &lt;- data.frame(data, x = 0:20) data1 &lt;- data[1:21, ] data2 &lt;- data[22:42, ] pMortality &lt;- ggplot() + geom_line(data1, mapping = aes(x = x, y = value, group = variable , color = variable)) + geom_point(data1, mapping = aes(x = x, y = value, group = variable, color = variable)) + geom_col(data2, mapping = aes(x = x, y = value, group = variable), alpha = 0.7) + theme_light() + labs(x = &quot;Number of deaths&quot;, y = &quot;Frecuencies&quot;) pMortality 3.2 Incidence Spatial modeling of incidence and mortality childhood leukemia based on Colombian armed conflict and poverty for children born during the years 2002-2013 3.2.1 Packages Incidence rm(list=ls()) require(rgdal) require(pscl) require(sf) require(spdep) require(spatialreg) #test.W, scores.listw require(stringr) require(performance) require(AER) require(ggplot2) require(vcdExtra) 3.2.2 Code Incidence Reading the shapefile of 1124 Colombian municipalities, defining the Coordinate Reference System and centroid and building some variables #Reading the shapefile of 1124 Colombian municipalities muncol &lt;- rgdal::readOGR(dsn=&quot;data_2_Leukemia/muncol.shp&quot;) ## OGR data source with driver: ESRI Shapefile ## Source: &quot;/home/jncc/Documents/Monitorias/EspacialPage/Clases-EE-UN/data_2_Leukemia/muncol.shp&quot;, layer: &quot;muncol&quot; ## with 1124 features ## It has 17 fields muncol=spTransform(muncol,CRS(&quot;+init=epsg:21897&quot;)) (l &lt;- length(muncol)) ## [1] 1124 #Representative coordinate (centroid) xy0=data.frame(x=muncol$x,y=muncol$y) coordinates(xy0) &lt;- c(&#39;x&#39;,&#39;y&#39;) proj4string(xy0) &lt;- CRS(&quot;+init=epsg:4326&quot;) xy0=spTransform(xy0,CRS(&quot;+init=epsg:21897&quot;)) ###Loops for avoiding NA r &lt;- sum(muncol$NCases)/sum(muncol$NPop) for (i in 1:l){ if(muncol$NPop[i]==0){ muncol$EsperadosNCancer[i] &lt;- 1 } else{ muncol$EsperadosNCancer[i] &lt;- muncol$NPop[i]*r } } muncol$IICA_Cat=muncol$IICA_Ca muncol$IICA_Cat=str_replace_all(muncol$IICA_Cat,&quot;Bajo&quot;, &quot;Low&quot;) muncol$IICA_Cat=str_replace_all(muncol$IICA_Cat,&quot;Medio&quot;, &quot;Medium&quot;) muncol$IICA_CatLow=ifelse(muncol$IICA_Cat==&quot;Low&quot;,1,0) muncol$IICA_CatMed=ifelse(muncol$IICA_Cat==&quot;Medium&quot;,1,0) muncol$IICA_High=as.character(1-(muncol$IICA_CatLow+muncol$IICA_CatMed)) muncol$UBN=muncol$NBI Modeling leukemia Incidence Rate (LR) in terms of Colombian armed conflict index, poverty and rurality. First, the usual Poisson regression model with incidence rate as response variable is estimated. glmbaseLR&lt;-glm( NCases ~ IICA_High+UBN+Per_Rur+ offset(log(EsperadosNCancer)), family = poisson,data = muncol) anova(glmbaseLR) ## Analysis of Deviance Table ## ## Model: poisson, link: log ## ## Response: NCases ## ## Terms added sequentially (first to last) ## ## ## Df Deviance Resid. Df Resid. Dev ## NULL 1123 2524.9 ## IICA_High 1 0.75 1122 2524.1 ## UBN 1 328.90 1121 2195.2 ## Per_Rur 1 0.11 1120 2195.1 summary(glmbaseLR) ## ## Call: ## glm(formula = NCases ~ IICA_High + UBN + Per_Rur + offset(log(EsperadosNCancer)), ## family = poisson, data = muncol) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -5.1779 -1.1632 -0.5270 0.6082 7.7193 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 0.3226036 0.0276280 11.677 &lt; 2e-16 *** ## IICA_High1 0.0818208 0.0294297 2.780 0.00543 ** ## UBN -0.0123797 0.0010425 -11.875 &lt; 2e-16 *** ## Per_Rur -0.0002510 0.0007692 -0.326 0.74419 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for poisson family taken to be 1) ## ## Null deviance: 2524.9 on 1123 degrees of freedom ## Residual deviance: 2195.1 on 1120 degrees of freedom ## AIC: 4174.2 ## ## Number of Fisher Scoring iterations: 5 muncol$residLR=residuals(glmbaseLR) Rurality is not statistically significant in this first auxiliar model. However, we maintain this variable in the rest of the analysis and review its significance in the final model. Checking excess zeros by comparison between the number of zeros predicted by the model with the observed number of zeros. Also checking overdispersion. mu_LR &lt;- predict(glmbaseLR, type = &quot;response&quot;) # predict expected mean count expLR &lt;- sum(dpois(x = 0, lambda = mu_LR)) # sum the probabilities of a zero count for each mean round(expLR) #predicted number of zeros ## [1] 382 sum(muncol$NCases &lt; 1) #observed number of zeros ## [1] 443 zero.test(muncol$NCases) #score test (van den Broek, 1995) ## Score test for zero inflation ## ## Chi-square = 12268.7129 ## df = 1 ## pvalue: &lt; 2.22e-16 ##Checking overdispersion dispersiontest(glmbaseLR) #Cameron &amp; Trivedi (1990) ## ## Overdispersion test ## ## data: glmbaseLR ## z = 4.1887, p-value = 1.403e-05 ## alternative hypothesis: true dispersion is greater than 1 ## sample estimates: ## dispersion ## 2.309041 check_overdispersion(glmbaseLR) #Gelman and Hill (2007) ## # Overdispersion test ## ## dispersion ratio = 2.431 ## Pearson&#39;s Chi-Squared = 2722.353 ## p-value = &lt; 0.001 ## Overdispersion detected. The observed frequency of zeroes in data exceeds the predicted in the Leukemia incidence rate (LR) model. Also, overdispersion is detected. Now, to validate the independence assumption, first, it is necessary to define spatial weighting possible matrices. rook_nb_b=nb2listw(poly2nb(muncol,queen=FALSE), style=&quot;B&quot;,zero.policy = TRUE) rook_nb_w=nb2listw(poly2nb(muncol,queen=FALSE), style=&quot;W&quot;,zero.policy = TRUE) queen_nb_b=nb2listw(poly2nb(muncol,queen=TRUE), style=&quot;B&quot;,zero.policy = TRUE) queen_nb_w=nb2listw(poly2nb(muncol,queen=TRUE), style=&quot;W&quot;,zero.policy = TRUE) #Graphs neighbours trinb=tri2nb(xy0) options(warn = -1) tri_nb_b=nb2listw(tri2nb(xy0), style=&quot;B&quot;,zero.policy = TRUE) tri_nb_w=nb2listw(tri2nb(xy0), style=&quot;W&quot;,zero.policy = TRUE) soi_nb_b=nb2listw(graph2nb(soi.graph(trinb,xy0)), style=&quot;B&quot;,zero.policy = TRUE) soi_nb_w=nb2listw(graph2nb(soi.graph(trinb,xy0)), style=&quot;W&quot;,zero.policy = TRUE) relative_nb_b=nb2listw(graph2nb(relativeneigh(xy0), sym=TRUE), style=&quot;B&quot;,zero.policy = TRUE) relative_nb_w=nb2listw(graph2nb(relativeneigh(xy0), sym=TRUE), style=&quot;W&quot;,zero.policy = TRUE) gabriel_nb_b=nb2listw(graph2nb(gabrielneigh(xy0), sym=TRUE), style=&quot;B&quot;,zero.policy = TRUE) gabriel_nb_w=nb2listw(graph2nb(gabrielneigh(xy0), sym=TRUE), style=&quot;W&quot;,zero.policy = TRUE) #Distance neighbours knn1_nb_b=nb2listw(knn2nb(knearneigh(xy0, k = 1)), style=&quot;B&quot;,zero.policy = TRUE) knn1_nb_w=nb2listw(knn2nb(knearneigh(xy0, k = 1)), style=&quot;W&quot;,zero.policy = TRUE) knn2_nb_b=nb2listw(knn2nb(knearneigh(xy0, k = 2)), style=&quot;B&quot;,zero.policy = TRUE) knn2_nb_w=nb2listw(knn2nb(knearneigh(xy0, k = 2)), style=&quot;W&quot;,zero.policy = TRUE) knn3_nb_b=nb2listw(knn2nb(knearneigh(xy0, k = 3)), style=&quot;B&quot;,zero.policy = TRUE) knn3_nb_w=nb2listw(knn2nb(knearneigh(xy0, k = 3)), style=&quot;W&quot;,zero.policy = TRUE) knn4_nb_b=nb2listw(knn2nb(knearneigh(xy0, k = 4)), style=&quot;B&quot;,zero.policy = TRUE) knn4_nb_w=nb2listw(knn2nb(knearneigh(xy0, k = 4)), style=&quot;W&quot;,zero.policy = TRUE) knn6_nb_b=nb2listw(knn2nb(knearneigh(xy0, k = 6)), style=&quot;B&quot;,zero.policy = TRUE) knn6_nb_w=nb2listw(knn2nb(knearneigh(xy0, k = 6)), style=&quot;W&quot;,zero.policy = TRUE) mat=list(rook_nb_b,rook_nb_w, queen_nb_b,queen_nb_w, tri_nb_b,tri_nb_w, soi_nb_b,soi_nb_w, gabriel_nb_b,gabriel_nb_w, relative_nb_b,relative_nb_w, knn1_nb_b,knn1_nb_w, knn2_nb_b,knn2_nb_w, knn3_nb_b,knn3_nb_w, knn4_nb_b,knn4_nb_w, knn6_nb_b,knn6_nb_w) Testing spatial autocorrelation using Moran index test based on weighting matrices built in the last step. Note that with all weighting matrices we obtain a significant spatial autocorrelation. aux=numeric(0) options(warn = -1) { for(i in 1:length(mat)) aux[i]=moran.test(muncol$residLR,mat[[i]],alternative=&quot;two.sided&quot;)$&quot;p&quot; } aux ## [1] 1.776445e-09 1.630534e-11 1.116295e-09 3.409196e-11 2.619438e-10 1.984900e-11 2.800074e-11 2.648473e-11 ## [9] 7.073103e-11 4.068005e-12 1.345336e-09 5.867655e-09 6.342820e-04 6.342820e-04 5.337856e-09 5.337856e-09 ## [17] 4.653660e-12 4.653660e-12 2.138542e-13 2.138542e-13 5.932765e-13 5.932765e-13 moran.test(muncol$residLR, mat[[which.max(aux)]], alternative=&quot;two.sided&quot;) ## ## Moran I test under randomisation ## ## data: muncol$residLR ## weights: mat[[which.max(aux)]] ## ## Moran I statistic standard deviate = 3.4165, p-value = 0.0006343 ## alternative hypothesis: two.sided ## sample estimates: ## Moran I statistic Expectation Variance ## 0.123653792 -0.000890472 0.001328865 First, Poisson Hurdle model is estimated without consider spatial autocorrelation. mod.hurdleLR &lt;- hurdle( NCases ~ IICA_High+UBN+Per_Rur+ offset(log(EsperadosNCancer))|IICA_High+UBN+ Per_Rur+offset(log(EsperadosNCancer)), data = muncol, dist = &quot;poisson&quot;, zero.dist = &quot;binomial&quot;) resid_Pois_Hurdle=residuals(mod.hurdleLR,&quot;response&quot;) summary(mod.hurdleLR) ## ## Call: ## hurdle(formula = NCases ~ IICA_High + UBN + Per_Rur + offset(log(EsperadosNCancer)) | IICA_High + UBN + ## Per_Rur + offset(log(EsperadosNCancer)), data = muncol, dist = &quot;poisson&quot;, zero.dist = &quot;binomial&quot;) ## ## Pearson residuals: ## Min 1Q Median 3Q Max ## -3.6935 -0.7943 -0.3775 0.6266 17.7799 ## ## Count model coefficients (truncated poisson with log link): ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 0.3151943 0.0289252 10.897 &lt;2e-16 *** ## IICA_High1 0.0769858 0.0309613 2.487 0.0129 * ## UBN -0.0123171 0.0011548 -10.666 &lt;2e-16 *** ## Per_Rur 0.0020604 0.0008876 2.321 0.0203 * ## Zero hurdle model coefficients (binomial with logit link): ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 1.001514 0.249402 4.016 5.93e-05 *** ## IICA_High1 0.072259 0.137921 0.524 0.600 ## UBN -0.013830 0.003541 -3.906 9.39e-05 *** ## Per_Rur -0.004660 0.003364 -1.385 0.166 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Number of iterations in BFGS optimization: 9 ## Log-likelihood: -2051 on 8 Df pR2(mod.hurdleLR) ## fitting null model for pseudo-r2 ## llh llhNull G2 McFadden r2ML r2CU ## -2051.4697559 -9229.3509481 14355.7623845 0.7777233 0.9999972 0.9999972 moran.test(resid_Pois_Hurdle, mat[[which.max(aux)]], alternative=&quot;two.sided&quot;) ## ## Moran I test under randomisation ## ## data: resid_Pois_Hurdle ## weights: mat[[which.max(aux)]] ## ## Moran I statistic standard deviate = 4.5053, p-value = 6.627e-06 ## alternative hypothesis: two.sided ## sample estimates: ## Moran I statistic Expectation Variance ## 0.158812671 -0.000890472 0.001256531 Thus, residuals are significantly spatially autocorrelated. So, we are going tu use spatial filtering. Below we find Moran Eigenvectors. MEpoisLR &lt;- spatialreg::ME( NCases ~ IICA_High+UBN+Per_Rur+ offset(log(EsperadosNCancer)), data=muncol, family=&quot;poisson&quot;, listw=mat[[3]], alpha=0.02, verbose=TRUE) ## eV[,29], I: 0.01179903 ZI: NA, pr(ZI): 0.22 MoranEigenVLR=data.frame(fitted(MEpoisLR)) Now, we used Poisson Hurdle model to manage the overdispersion due to zero excess and Moran eigenfunctions are included as additional explanatory variables, so that spatial autocorrelation is considered. mod.hurdleLR &lt;- hurdle( NCases ~ IICA_High+UBN+Per_Rur+fitted(MEpoisLR)+ offset(log(EsperadosNCancer))|Per_Rur+ offset(log(EsperadosNCancer)), data = muncol, dist = &quot;poisson&quot;, zero.dist = &quot;binomial&quot;) resid_Pois_Hurdle=residuals(mod.hurdleLR,&quot;response&quot;) moran.test(resid_Pois_Hurdle, mat[[3]], alternative=&quot;two.sided&quot;) ## ## Moran I test under randomisation ## ## data: resid_Pois_Hurdle ## weights: mat[[3]] ## ## Moran I statistic standard deviate = 1.0424, p-value = 0.2972 ## alternative hypothesis: two.sided ## sample estimates: ## Moran I statistic Expectation Variance ## 0.0162024286 -0.0008904720 0.0002689009 summary(mod.hurdleLR) ## ## Call: ## hurdle(formula = NCases ~ IICA_High + UBN + Per_Rur + fitted(MEpoisLR) + offset(log(EsperadosNCancer)) | ## Per_Rur + offset(log(EsperadosNCancer)), data = muncol, dist = &quot;poisson&quot;, zero.dist = &quot;binomial&quot;) ## ## Pearson residuals: ## Min 1Q Median 3Q Max ## -3.2263 -0.7927 -0.3875 0.6339 17.8272 ## ## Count model coefficients (truncated poisson with log link): ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 0.2275843 0.0328678 6.924 4.38e-12 *** ## IICA_High1 0.1568024 0.0342051 4.584 4.56e-06 *** ## UBN -0.0113328 0.0011644 -9.733 &lt; 2e-16 *** ## Per_Rur 0.0016899 0.0008965 1.885 0.0594 . ## fitted(MEpoisLR) 2.6540637 0.4767638 5.567 2.59e-08 *** ## Zero hurdle model coefficients (binomial with logit link): ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 0.646903 0.213106 3.036 0.0024 ** ## Per_Rur -0.008731 0.003237 -2.697 0.0070 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Number of iterations in BFGS optimization: 10 ## Log-likelihood: -2044 on 7 Df pR2(mod.hurdleLR) ## fitting null model for pseudo-r2 ## llh llhNull G2 McFadden r2ML r2CU ## -2043.6785123 -9229.3509481 14371.3448717 0.7785675 0.9999972 0.9999973 Rurality is not statistically significant to explain the Leukemia incidence rate. The only predictor statistically significant for zeroes model is rurality. In addition, the Spatial filtering results are the same without this variable. MEpoisLR &lt;- spatialreg::ME( NCases ~ IICA_High+UBN+offset(log(EsperadosNCancer)), data=muncol, family=&quot;poisson&quot;, listw=mat[[3]], alpha=0.02, verbose=TRUE) ## eV[,29], I: 0.01112525 ZI: NA, pr(ZI): 0.24 MoranEigenVLR=data.frame(fitted(MEpoisLR)) mod.hurdleLR &lt;- hurdle( NCases ~ IICA_High+UBN+fitted(MEpoisLR)+ offset(log(EsperadosNCancer))|Per_Rur+offset(log(EsperadosNCancer)), data = muncol, dist = &quot;poisson&quot;, zero.dist = &quot;binomial&quot;) resid_Pois_Hurdle=residuals(mod.hurdleLR,&quot;response&quot;) moran.test(resid_Pois_Hurdle, mat[[3]], alternative=&quot;two.sided&quot;) ## ## Moran I test under randomisation ## ## data: resid_Pois_Hurdle ## weights: mat[[3]] ## ## Moran I statistic standard deviate = 1.2484, p-value = 0.2119 ## alternative hypothesis: two.sided ## sample estimates: ## Moran I statistic Expectation Variance ## 0.0194478991 -0.0008904720 0.0002654261 summary(mod.hurdleLR) ## ## Call: ## hurdle(formula = NCases ~ IICA_High + UBN + fitted(MEpoisLR) + offset(log(EsperadosNCancer)) | Per_Rur + ## offset(log(EsperadosNCancer)), data = muncol, dist = &quot;poisson&quot;, zero.dist = &quot;binomial&quot;) ## ## Pearson residuals: ## Min 1Q Median 3Q Max ## -3.3173 -0.7976 -0.3786 0.6607 18.2757 ## ## Count model coefficients (truncated poisson with log link): ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 0.2143974 0.0321264 6.674 2.50e-11 *** ## IICA_High1 0.1700350 0.0335266 5.072 3.94e-07 *** ## UBN -0.0097928 0.0008191 -11.955 &lt; 2e-16 *** ## fitted(MEpoisLR) 2.7262303 0.4759204 5.728 1.01e-08 *** ## Zero hurdle model coefficients (binomial with logit link): ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 0.646903 0.213106 3.036 0.0024 ** ## Per_Rur -0.008731 0.003237 -2.697 0.0070 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Number of iterations in BFGS optimization: 9 ## Log-likelihood: -2045 on 6 Df pR2(mod.hurdleLR) ## fitting null model for pseudo-r2 ## llh llhNull G2 McFadden r2ML r2CU ## -2045.4283395 -9229.3509481 14367.8452173 0.7783779 0.9999972 0.9999973 Hence, Poisson-Hurdle model residuals are not significant spatially autocorrelated. The LR’s positive values depend only on the Index of armed conflict (IICA) and on the unsatisfied basic needs index (UBN) and its zero values depend on the rurality. Note that the model shows good performance, according to pseudo R2 and the comparison between observed and predicted frequencies. mf &lt;- model.frame(mod.hurdleLR) y &lt;- model.response(mf) w &lt;- model.weights(mf) if(is.null(w)) w &lt;- rep(1, NROW(y)) max0 &lt;- 20L obs &lt;- as.vector(xtabs(w ~ factor(y, levels = 0L:max0))) exp &lt;- colSums(predict(mod.hurdleLR, type = &quot;prob&quot;, at = 0L:max0) * w) fitted_vs_observed &lt;- data.frame(Expected = exp, Observed = obs) data &lt;- reshape2::melt(fitted_vs_observed) ## No id variables; using all as measure variables data &lt;- data.frame(data, x = 0:20) data1 &lt;- data[1:21, ] data2 &lt;- data[22:42, ] pl1 &lt;- ggplot() + geom_line(data1, mapping = aes(x = x, y = value, group = variable , color = variable)) + geom_point(data1, mapping = aes(x = x, y = value, group = variable, color = variable)) + geom_col(data2, mapping = aes(x = x, y = value, group = variable), alpha = 0.7) + theme_light() + labs(x = &quot;Number of cases&quot;, y = &quot;Frecuencies&quot;) pl1 "],["modelos-de-regresión-espacial.html", "Chapter 4 Modelos de regresión espacial 4.1 Estudio de Mercadeo 4.2 Paquetes 4.3 Lectura de Datos 4.4 Matriz de vecindades 4.5 Mapa de valores observados 4.6 Pruebas de Autocorrelación 4.7 Mapas 4.8 Resumen de modelos 4.9 Calculo de varibles significativas 4.10 Mapa Estimado", " Chapter 4 Modelos de regresión espacial 4.1 Estudio de Mercadeo Se comparan varios tipos de modelos de regresión espacial para ver con cual se obtiene el mejor ajuste. Se consideran modelos autoregresivos y de medias móvviles así como su combinación. 4.2 Paquetes rm(list=ls()) library(openxlsx) library(dplyr) ## ## Attaching package: &#39;dplyr&#39; ## The following object is masked from &#39;package:vcdExtra&#39;: ## ## summarise ## The following object is masked from &#39;package:car&#39;: ## ## recode ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union library(rgdal) library(maptools) ## Checking rgeos availability: TRUE ## Please note that &#39;maptools&#39; will be retired during 2023, ## plan transition at your earliest convenience; ## some functionality will be moved to &#39;sp&#39;. ## ## Attaching package: &#39;maptools&#39; ## The following object is masked from &#39;package:car&#39;: ## ## pointLabel library(GISTools) ## Loading required package: RColorBrewer ## Loading required package: MASS ## ## Attaching package: &#39;MASS&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## select ## Loading required package: rgeos ## rgeos version: 0.5-9, (SVN revision 684) ## GEOS runtime version: 3.10.2-CAPI-1.16.0 ## Please note that rgeos will be retired by the end of 2023, ## plan transition to sf functions using GEOS at your earliest convenience. ## GEOS using OverlayNG ## Linking to sp version: 1.5-1 ## Polygon checking: TRUE library(spdep) library(readr) library(car) library(readxl) library(psych) ## ## Attaching package: &#39;psych&#39; ## The following objects are masked from &#39;package:ggplot2&#39;: ## ## %+%, alpha ## The following object is masked from &#39;package:car&#39;: ## ## logit library(rgdal) library(FactoClass) ## Loading required package: ade4 ## ## Attaching package: &#39;ade4&#39; ## The following object is masked from &#39;package:spdep&#39;: ## ## mstree ## Loading required package: ggrepel ## Loading required package: xtable ## ## Attaching package: &#39;xtable&#39; ## The following object is masked from &#39;package:maptools&#39;: ## ## label ## The following object is masked from &#39;package:performance&#39;: ## ## display ## Loading required package: scatterplot3d library(spdep) require(&quot;GWmodel&quot;) ## Loading required package: GWmodel ## Loading required package: robustbase ## ## Attaching package: &#39;robustbase&#39; ## The following object is masked from &#39;package:survival&#39;: ## ## heart ## Loading required package: Rcpp ## Welcome to GWmodel version 2.2-9. library(&quot;mapsRinteractive&quot;) ## ## Attaching package: &#39;mapsRinteractive&#39; ## The following objects are masked from &#39;package:performance&#39;: ## ## mae, r2, rmse options(scipen = 999) 4.3 Lectura de Datos # Lectura de Datos BASE &lt;- read_excel(&quot;data_3_EstudioDeMercadoEspacial/BASE.xlsx&quot;) # Lectura del Shape de Colombia por Departamentos Colombia = readOGR(dsn = &quot;data_3_EstudioDeMercadoEspacial/Geodatabase Colombia&quot;, layer = &quot;departamentos&quot;) ## OGR data source with driver: ESRI Shapefile ## Source: &quot;/home/jncc/Documents/Monitorias/EspacialPage/Clases-EE-UN/data_3_EstudioDeMercadoEspacial/Geodatabase Colombia&quot;, layer: &quot;departamentos&quot; ## with 33 features ## It has 6 fields ## Integer64 fields read as strings: AñO_CREAC 4.3.1 Cruce de información y arreglo de coordenadas #Cruce de información con el shape cargado Insumo = merge(Colombia, BASE, by.x=&quot;COD_DANE&quot;, by.y=&quot;Cod&quot;) Insumo = subset(Insumo[c(1:31,33),]) # Conversión a Coordenadas UTM Crs.geo = CRS(&quot;+proj=tmerc +lat_0=4.599047222222222 +lon_0=-74.08091666666667 +k=1 +x_0=1000000 +y_0=1000000 +ellps=intl +towgs84=307,304,-318,0,0,0,0 +units=m +no_defs&quot;) proj4string(Insumo) &lt;- Crs.geo Insumo.utm = spTransform(Insumo, CRS(&quot;+init=epsg:3724 +units=km&quot;)) 4.4 Matriz de vecindades #--- # MATRIZ DE VECINDADES (W) #--- ## Centroides de las Áreas Centros = getSpPPolygonsLabptSlots(Insumo.utm) Centroids &lt;- SpatialPointsDataFrame(coords = Centros, data=Insumo.utm@data, proj4string=CRS(&quot;+init=epsg:3724 +units=km&quot;)) # Matriz de Distancias entre los Centriodes Wdist = dist(Centros, up=T) # Matriz W de vecindades library(pgirmess) ## ## Attaching package: &#39;pgirmess&#39; ## The following object is masked from &#39;package:psych&#39;: ## ## shannon library(HistogramTools) library(strucchange) ## ## Attaching package: &#39;strucchange&#39; ## The following object is masked from &#39;package:stringr&#39;: ## ## boundary library(spdep) Insumo.nb = poly2nb(Insumo.utm, queen=T) #n &lt;- max(sapply(Insumo.nb, length)) #ll &lt;- lapply(Insumo.nb, function(X) { # c(as.numeric(X), rep(0, times = n - length(X))) #}) #out &lt;- do.call(cbind, ll) #Departamentos&lt;-Insumo$Departamento #MatW&lt;-matrix(NA,32,32) #for (i in 1:8) { # for (j in 1:32) { # if (out[i,j]!=0) { # MatW[out[i,j],j]&lt;-1 # } else{MatW[out[i,j],j]&lt;-0} # } #} #for (i in 1:32) { # for (j in 1:32) { # if (is.na(MatW[i,j])) { # MatW[i,j]&lt;-0 # } # } #} #colnames(MatW)&lt;-Departamentos #rownames(MatW)&lt;-Departamentos #MatW1&lt;-MatW[,1:16] #MatW2&lt;-MatW[,17:32] # Martiz W (Estilos) Insumo.lw = nb2listw(Insumo.nb) Insumo.lwb = nb2listw(Insumo.nb, style=&quot;B&quot;) Insumo.lwc = nb2listw(Insumo.nb, style=&quot;C&quot;) Insumo.lwu = nb2listw(Insumo.nb, style=&quot;U&quot;) Insumo.lww = nb2listw(Insumo.nb, style=&quot;W&quot;) 4.5 Mapa de valores observados # Mapa de Valores Observados #dev.new() #windows() choropleth(Insumo, Insumo$CAP_BAC) shad = auto.shading(Insumo$CAP_BAC, n=5, cols=(brewer.pal(5,&quot;Reds&quot;)), cutter = quantileCuts) choro.legend(1555874,535165.5, shad, fmt=&quot;%1.1f&quot;, title = &quot;Valores Locales&quot;, cex=0.7, under = &quot;Menos de&quot;, between = &quot;a&quot;, over = &quot;Mas de&quot;) title(&quot;Valores Observados para las captaciones del banco agrario en Colombia, cuarto trimestre 2020&quot;, cex.main=1) map.scale(755874,335165.5, 250000, &quot;km&quot;, 2, 50, sfcol=&#39;brown&#39;) 4.6 Pruebas de Autocorrelación #---------------------------- # PRUEBAS DE AUTOCORRELACION #---------------------------- # Moran moran.test(Insumo$CAP_BAC, Insumo.lw) ## ## Moran I test under randomisation ## ## data: Insumo$CAP_BAC ## weights: Insumo.lw ## ## Moran I statistic standard deviate = 2.0024, p-value = 0.02262 ## alternative hypothesis: greater ## sample estimates: ## Moran I statistic Expectation Variance ## 0.153081266 -0.032258065 0.008566935 # Dispersograma de Moran #dev.new() #windows() moran.plot(Insumo$CAP_BAC, Insumo.lw, labels=as.character(Insumo$Departamento), xlab=&quot;Captaciones BAC&quot;, ylab=&quot;Captaciones BAC rezagado&quot;, las=1, pch=16, cex=0.5) legend(&quot;bottomright&quot;, legend=c(&quot;I de Moran: 0.1530&quot;, &quot;Valor P: 0.02262&quot;), cex=1, bg=&#39;lightgreen&#39;) title(&quot;Dispersograma de Moran para las captaciones del banco agrario en los Departamentos de Colombia, cuarto trimestre 2020&quot;, cex.main=1) # Local G nearng = dnearneigh(coordinates(Insumo.utm), 0, 550) Insumo.lw.g = nb2listw(nearng, style=&quot;B&quot;) localG = localG(Insumo$CAP_BAC, Insumo.lw.g); localG ## [1] 1.66525050 0.02608278 1.33032949 1.15892050 1.85852161 0.68445519 1.49486468 0.10163662 1.64717068 ## [10] 1.32714028 2.53361281 2.21899396 -0.71311540 0.50952811 1.48899277 0.81676480 0.98434717 2.09087184 ## [19] 2.08725553 1.05493906 1.32486118 2.09147517 2.16305539 1.89323276 1.52155929 0.84992902 -1.19798594 ## [28] -1.33847805 0.29701426 -1.60300117 1.67015910 1.96543367 ## attr(,&quot;cluster&quot;) ## [1] High Low Low High Low Low High Low Low High Low High Low Low Low High High Low Low High Low High ## [23] High Low Low Low Low Low Low Low Low High ## Levels: Low High ## attr(,&quot;gstari&quot;) ## [1] FALSE ## attr(,&quot;call&quot;) ## localG(x = Insumo$CAP_BAC, listw = Insumo.lw.g) ## attr(,&quot;class&quot;) ## [1] &quot;localG&quot; # Simulaci?n montecarlo sim.G = matrix(0,1000,32) for(i in 1:1000) sim.G[i,] = localG(sample(Insumo$CAP_BAC),Insumo.lw.g) mc.pvalor.G = (colSums(sweep(sim.G,2,localG,&quot;&gt;=&quot;))+1)/(nrow(sim.G)+1) mc.pvalor.G ## [1] 0.011988012 0.423576424 0.082917083 0.101898102 0.000999001 0.273726274 0.079920080 0.468531469 0.029970030 ## [10] 0.032967033 0.000999001 0.001998002 0.720279720 0.296703297 0.029970030 0.211788212 0.183816184 0.000999001 ## [19] 0.000999001 0.140859141 0.093906094 0.000999001 0.001998002 0.021978022 0.047952048 0.233766234 0.971028971 ## [28] 0.963036963 0.438561439 0.994005994 0.060939061 0.000999001 4.7 Mapas # Mapas par(mfrow=c(1,2), mar=c(1,1,8,1)/2) shadeg = auto.shading(localG, n=5, cols=(brewer.pal(5,&quot;Purples&quot;)), cutter=quantileCuts) #dev.new() #windows() choropleth(Insumo, localG, shading=shadeg) choro.legend(1555874, 535165.5, shadeg, fmt=&quot;%1.2f&quot;, title = &quot;G&quot;, cex=0.7, under = &quot;Menos de&quot;, between = &quot;a&quot;, over = &quot;Mas de&quot;) title(&quot;G Getis Ord Local para las captaciones del banco agrario en Colombia, cuarto trimestre 2020&quot;, cex.main=1) map.scale(755874,335165.5, 250000, &quot;km&quot;, 2, 50, sfcol=&#39;brown&#39;) # Mapa de P-values #dev.new() #windows() shadegp = shading(c(0.01,0.05,0.1), cols = (brewer.pal(4,&quot;Spectral&quot;))) choropleth(Insumo, mc.pvalor.G, shading=shadegp) choro.legend(1555874, 535165.5, shadegp, fmt=&quot;%1.2f&quot;, title = &quot;P-valor de G&quot;, cex=0.7, under = &quot;Menos de&quot;, between = &quot;a&quot;, over = &quot;Mas de&quot;) title(&quot;P- Valor de G Getis Ord Local para las captaciones del banco agrario en Colombia, cuarto trimestre 2020&quot;, cex.main=1) map.scale(755874,335165.5, 250000, &quot;km&quot;, 2, 50, sfcol=&#39;brown&#39;) ##Modelos SDEM, SDM, Manski, SARAR ####Modelos SDEM, SDM, Manski, SARAR######## #reg.eq1=CAP_BAC ~ PIB + NBI + CAP_BOG + CAP_BC + CAP_OCC + CAP_CS + Población + IPM reg.eq1=CAP_BAC ~ PIB + NBI + CAP_BOG+CAP_BC + CAP_OCC + CAP_CS+ Población reg1=lm(reg.eq1,data=Insumo) #OLS y=XB+e, reg2=lmSLX(reg.eq1,data=Insumo, Insumo.lw) #SLX y=XB+WxT+e reg3=lagsarlm(reg.eq1,data= Insumo, Insumo.lw) #Lag Y y=XB+WxT+u, u=LWu+e reg4=errorsarlm(reg.eq1,data=Insumo, Insumo.lw) #Spatial Error y=pWy+XB+e reg5=errorsarlm(reg.eq1, data=Insumo, Insumo.lw, etype=&quot;emixed&quot;) #SDEM Spatial Durbin Error Model y=XB+WxT+u, u=LWu+e reg6=lagsarlm(reg.eq1, data=Insumo,Insumo.lw, type=&quot;mixed&quot;) #SDM Spatial Durbin Model (add lag X to SAR) y=pWy+XB+WXT+e reg7=sacsarlm(reg.eq1,data=Insumo, Insumo.lw, type=&quot;sacmixed&quot;) #Manski Model: y=pWy+XB+WXT+u, u=LWu+e (no recomendado) reg8=sacsarlm(reg.eq1,data=Insumo,Insumo.lw, type=&quot;sac&quot;) #SARAR o Kelejian-Prucha, Cliff-Ord, o SAC If all T=0,y=pWy+XB+u, u=LWu+e 4.8 Resumen de modelos #Resumen de modelos s=summary s(reg1)#OLS ## ## Call: ## lm(formula = reg.eq1, data = Insumo) ## ## Residuals: ## Min 1Q Median 3Q Max ## -276.51 -65.60 -7.76 46.60 396.20 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 148.21380364 79.80068638 1.857 0.0756 . ## PIB 0.00389642 0.00328986 1.184 0.2479 ## NBI -1.28539812 1.73982368 -0.739 0.4672 ## CAP_BOG -0.06643826 0.05411306 -1.228 0.2314 ## CAP_BC 0.00397406 0.00607852 0.654 0.5195 ## CAP_OCC -0.04340185 0.02170799 -1.999 0.0570 . ## CAP_CS 0.47283237 0.31370238 1.507 0.1448 ## Población 0.00000137 0.00006700 0.020 0.9839 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 141.6 on 24 degrees of freedom ## Multiple R-squared: 0.8807, Adjusted R-squared: 0.8459 ## F-statistic: 25.31 on 7 and 24 DF, p-value: 0.000000001309 s(reg2)#SLX ## ## Call: ## lm(formula = formula(paste(&quot;y ~ &quot;, paste(colnames(x)[-1], collapse = &quot;+&quot;))), ## data = as.data.frame(x), weights = weights) ## ## Residuals: ## Min 1Q Median 3Q Max ## -201.00 -74.99 -0.51 34.55 342.00 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 392.97159157 284.42668099 1.382 0.185 ## PIB 0.00429319 0.00383973 1.118 0.279 ## NBI -0.57603773 2.48213535 -0.232 0.819 ## CAP_BOG -0.00703635 0.07700761 -0.091 0.928 ## CAP_BC -0.00075536 0.01003615 -0.075 0.941 ## CAP_OCC -0.05372016 0.03418522 -1.571 0.135 ## CAP_CS 0.12199794 0.43670734 0.279 0.783 ## Población 0.00004753 0.00012149 0.391 0.701 ## lag.PIB 0.00317318 0.00943185 0.336 0.741 ## lag.NBI -6.81433196 5.99552430 -1.137 0.271 ## lag.CAP_BOG -0.06868663 0.18842513 -0.365 0.720 ## lag.CAP_BC 0.00684589 0.01472675 0.465 0.648 ## lag.CAP_OCC -0.00984285 0.05447122 -0.181 0.859 ## lag.CAP_CS 0.33585267 1.09533771 0.307 0.763 ## lag.Población -0.00016927 0.00017459 -0.970 0.346 ## ## Residual standard error: 151.6 on 17 degrees of freedom ## Multiple R-squared: 0.9031, Adjusted R-squared: 0.8234 ## F-statistic: 11.32 on 14 and 17 DF, p-value: 0.000005467 s(reg3)#Lag Y ## ## Call:lagsarlm(formula = reg.eq1, data = Insumo, listw = Insumo.lw) ## ## Residuals: ## Min 1Q Median 3Q Max ## -213.859 -60.238 -17.811 42.960 393.389 ## ## Type: lag ## Coefficients: (numerical Hessian approximate standard errors) ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 77.75431414819 80.79616201670 0.9624 0.33587 ## PIB 0.00330780477 0.00254966082 1.2974 0.19451 ## NBI -0.77863467134 1.49479379488 -0.5209 0.60244 ## CAP_BOG -0.05466121768 0.04510317006 -1.2119 0.22554 ## CAP_BC 0.00533211210 0.00501910191 1.0624 0.28807 ## CAP_OCC -0.03421667698 0.01868849261 -1.8309 0.06712 ## CAP_CS 0.40699816254 0.26348656211 1.5447 0.12243 ## Población 0.00000091508 0.00004281372 0.0214 0.98295 ## ## Rho: 0.22884, LR test value: 2.096, p-value: 0.14768 ## Approximate (numerical Hessian) standard error: 0.15357 ## z-value: 1.4901, p-value: 0.13619 ## Wald statistic: 2.2204, p-value: 0.13619 ## ## Log likelihood: -198.251 for lag model ## ML residual variance (sigma squared): 13916, (sigma: 117.97) ## Number of observations: 32 ## Number of parameters estimated: 10 ## AIC: 416.5, (AIC for lm: 416.6) s(reg4)#Lag Error (SEM) ## ## Call:errorsarlm(formula = reg.eq1, data = Insumo, listw = Insumo.lw) ## ## Residuals: ## Min 1Q Median 3Q Max ## -215.7428 -56.4299 -2.2091 46.6630 425.7867 ## ## Type: error ## Coefficients: (asymptotic standard errors) ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 94.500062171 73.097740078 1.2928 0.19608 ## PIB 0.003656790 0.002619923 1.3958 0.16279 ## NBI -0.334674295 1.408551013 -0.2376 0.81219 ## CAP_BOG -0.032484041 0.049990129 -0.6498 0.51582 ## CAP_BC 0.001202332 0.005555428 0.2164 0.82866 ## CAP_OCC -0.048739699 0.019538015 -2.4946 0.01261 ## CAP_CS 0.285572474 0.287233645 0.9942 0.32012 ## Población 0.000040164 0.000066648 0.6026 0.54676 ## ## Lambda: 0.50692, LR test value: 3.8031, p-value: 0.051158 ## Approximate (numerical Hessian) standard error: 0.21454 ## z-value: 2.3629, p-value: 0.018135 ## Wald statistic: 5.5831, p-value: 0.018135 ## ## Log likelihood: -197.3975 for error model ## ML residual variance (sigma squared): 12495, (sigma: 111.78) ## Number of observations: 32 ## Number of parameters estimated: 10 ## AIC: 414.79, (AIC for lm: 416.6) s(reg5)#Durbin Error (SDEM) ## ## Call:errorsarlm(formula = reg.eq1, data = Insumo, listw = Insumo.lw, etype = &quot;emixed&quot;) ## ## Residuals: ## Min 1Q Median 3Q Max ## -199.7723 -69.8844 -2.0075 37.9235 362.9104 ## ## Type: error ## Coefficients: (asymptotic standard errors) ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 248.934586826 220.997176296 1.1264 0.25999 ## PIB 0.004499050 0.002763860 1.6278 0.10356 ## NBI -0.058411226 1.767448337 -0.0330 0.97364 ## CAP_BOG -0.026724632 0.054644416 -0.4891 0.62480 ## CAP_BC -0.000183348 0.007104435 -0.0258 0.97941 ## CAP_OCC -0.051006013 0.024157938 -2.1114 0.03474 ## CAP_CS 0.227498753 0.309055950 0.7361 0.46166 ## Población 0.000035177 0.000084525 0.4162 0.67729 ## lag.PIB 0.003069904 0.007273446 0.4221 0.67297 ## lag.NBI -4.397302667 4.370216203 -1.0062 0.31432 ## lag.CAP_BOG -0.078935302 0.133353634 -0.5919 0.55390 ## lag.CAP_BC 0.000970534 0.011031858 0.0880 0.92990 ## lag.CAP_OCC -0.013417106 0.040319109 -0.3328 0.73931 ## lag.CAP_CS 0.374124922 0.777502436 0.4812 0.63038 ## lag.Población -0.000103911 0.000125213 -0.8299 0.40661 ## ## Lambda: 0.28217, LR test value: 0.34013, p-value: 0.55976 ## Approximate (numerical Hessian) standard error: 0.43688 ## z-value: 0.64589, p-value: 0.51835 ## Wald statistic: 0.41717, p-value: 0.51835 ## ## Log likelihood: -195.7931 for error model ## ML residual variance (sigma squared): 11856, (sigma: 108.89) ## Number of observations: 32 ## Number of parameters estimated: 17 ## AIC: 425.59, (AIC for lm: 423.93) s(reg6)#Durbin (SDM) ## ## Call:lagsarlm(formula = reg.eq1, data = Insumo, listw = Insumo.lw, type = &quot;mixed&quot;) ## ## Residuals: ## Min 1Q Median 3Q Max ## -185.6170 -74.5630 -1.2308 34.6848 363.6597 ## ## Type: mixed ## Coefficients: (numerical Hessian approximate standard errors) ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 259.002902069 55.621142504 4.6566 0.000003215 ## PIB 0.004292096 0.002531326 1.6956 0.08996 ## NBI -0.068020300 NaN NaN NaN ## CAP_BOG -0.013498834 0.057267316 -0.2357 0.81365 ## CAP_BC -0.000674466 0.007073100 -0.0954 0.92403 ## CAP_OCC -0.052995708 0.024225842 -2.1876 0.02870 ## CAP_CS 0.159111966 0.330144713 0.4819 0.62984 ## Población 0.000046528 0.000093081 0.4999 0.61717 ## lag.PIB 0.001006279 0.005492940 0.1832 0.85464 ## lag.NBI -5.022145973 4.547493579 -1.1044 0.26943 ## lag.CAP_BOG -0.060141056 0.061322296 -0.9807 0.32672 ## lag.CAP_BC 0.003372687 0.010237335 0.3294 0.74182 ## lag.CAP_OCC 0.001941496 0.042927437 0.0452 0.96393 ## lag.CAP_CS 0.265435964 0.307708639 0.8626 0.38835 ## lag.Población -0.000120261 0.000095918 -1.2538 0.20992 ## ## Rho: 0.28321, LR test value: 0.99104, p-value: 0.31949 ## Approximate (numerical Hessian) standard error: 0.25885 ## z-value: 1.0941, p-value: 0.27392 ## Wald statistic: 1.197, p-value: 0.27392 ## ## Log likelihood: -195.4676 for mixed model ## ML residual variance (sigma squared): 11616, (sigma: 107.78) ## Number of observations: 32 ## Number of parameters estimated: 17 ## AIC: 424.94, (AIC for lm: 423.93) s(reg7)#Manski ## ## Call:sacsarlm(formula = reg.eq1, data = Insumo, listw = Insumo.lw, type = &quot;sacmixed&quot;) ## ## Residuals: ## Min 1Q Median 3Q Max ## -179.6048 -72.7882 -2.7818 33.8501 346.2488 ## ## Type: sacmixed ## Coefficients: (numerical Hessian approximate standard errors) ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 307.899506935 245.174840544 1.2558 0.20918 ## PIB 0.004070842 0.002818181 1.4445 0.14860 ## NBI -0.195254122 1.741252781 -0.1121 0.91072 ## CAP_BOG 0.002531849 0.035792716 0.0707 0.94361 ## CAP_BC -0.001838769 0.006389043 -0.2878 0.77350 ## CAP_OCC -0.056119738 0.023484361 -2.3897 0.01686 ## CAP_CS 0.071595240 0.203731481 0.3514 0.72527 ## Población 0.000065749 0.000085924 0.7652 0.44415 ## lag.PIB 0.000817609 0.006451837 0.1267 0.89916 ## lag.NBI -6.096432537 5.166092289 -1.1801 0.23797 ## lag.CAP_BOG -0.052377434 0.133052991 -0.3937 0.69383 ## lag.CAP_BC 0.006801659 0.011453433 0.5939 0.55261 ## lag.CAP_OCC 0.008763486 0.040120481 0.2184 0.82709 ## lag.CAP_CS 0.219189292 0.775091430 0.2828 0.77734 ## lag.Población -0.000162608 0.000147069 -1.1057 0.26888 ## ## Rho: 0.38485 ## Approximate (numerical Hessian) standard error: 0.34303 ## z-value: 1.1219, p-value: 0.2619 ## Lambda: -0.26343 ## Approximate (numerical Hessian) standard error: 0.62199 ## z-value: -0.42353, p-value: 0.67191 ## ## LR test value: 7.7816, p-value: 0.5563 ## ## Log likelihood: -195.4082 for sacmixed model ## ML residual variance (sigma squared): 11213, (sigma: 105.89) ## Number of observations: 32 ## Number of parameters estimated: 18 ## AIC: 426.82, (AIC for lm: 416.6) s(reg8)#SARAR lag Y and lag e (SAC) ## ## Call:sacsarlm(formula = reg.eq1, data = Insumo, listw = Insumo.lw, type = &quot;sac&quot;) ## ## Residuals: ## Min 1Q Median 3Q Max ## -203.1991 -58.2427 -4.1109 46.5336 421.1733 ## ## Type: sac ## Coefficients: (numerical Hessian approximate standard errors) ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 73.149386026 83.556706428 0.8754 0.38133 ## PIB 0.003487952 0.002661736 1.3104 0.19006 ## NBI -0.337466937 1.455155630 -0.2319 0.81661 ## CAP_BOG -0.038888663 0.051338733 -0.7575 0.44876 ## CAP_BC 0.002799262 0.006119689 0.4574 0.64737 ## CAP_OCC -0.043084476 0.021693387 -1.9861 0.04703 ## CAP_CS 0.320438586 0.294474987 1.0882 0.27652 ## Población 0.000028476 0.000068136 0.4179 0.67599 ## ## Rho: 0.1104 ## Approximate (numerical Hessian) standard error: 0.19087 ## z-value: 0.57842, p-value: 0.56298 ## Lambda: 0.41973 ## Approximate (numerical Hessian) standard error: 0.27323 ## z-value: 1.5362, p-value: 0.1245 ## ## LR test value: 4.1193, p-value: 0.1275 ## ## Log likelihood: -197.2394 for sac model ## ML residual variance (sigma squared): 12624, (sigma: 112.36) ## Number of observations: 32 ## Number of parameters estimated: 11 ## AIC: 416.48, (AIC for lm: 416.6) 4.9 Calculo de varibles significativas #Calculo de variables signid¿ficativas reg.eq2=CAP_BAC ~ PIB + CAP_BOG+CAP_BC + CAP_OCC + CAP_CS+ Población reg4=errorsarlm(reg.eq2,data=Insumo, Insumo.lw) s(reg4)#Lag Error (SEM) ## ## Call:errorsarlm(formula = reg.eq2, data = Insumo, listw = Insumo.lw) ## ## Residuals: ## Min 1Q Median 3Q Max ## -211.1287 -54.9469 -1.1316 40.5690 428.8317 ## ## Type: error ## Coefficients: (asymptotic standard errors) ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 82.780380374 57.200033443 1.4472 0.14784 ## PIB 0.003786089 0.002550194 1.4846 0.13764 ## CAP_BOG -0.033655761 0.049317358 -0.6824 0.49497 ## CAP_BC 0.001072561 0.005563108 0.1928 0.84712 ## CAP_OCC -0.049110630 0.019547548 -2.5124 0.01199 ## CAP_CS 0.290079762 0.285013021 1.0178 0.30878 ## Población 0.000039933 0.000066827 0.5976 0.55013 ## ## Lambda: 0.51895, LR test value: 4.4697, p-value: 0.0345 ## Approximate (numerical Hessian) standard error: 0.20428 ## z-value: 2.5404, p-value: 0.011073 ## Wald statistic: 6.4536, p-value: 0.011073 ## ## Log likelihood: -197.4239 for error model ## ML residual variance (sigma squared): 12470, (sigma: 111.67) ## Number of observations: 32 ## Number of parameters estimated: 9 ## AIC: 412.85, (AIC for lm: 415.32) reg.eq3=CAP_BAC ~ PIB + CAP_BOG + CAP_OCC + CAP_CS+ Población reg4=errorsarlm(reg.eq3,data=Insumo, Insumo.lw) s(reg4)#Lag Error (SEM) ## ## Call:errorsarlm(formula = reg.eq3, data = Insumo, listw = Insumo.lw) ## ## Residuals: ## Min 1Q Median 3Q Max ## -214.6537 -56.5893 -1.9568 41.1618 430.2455 ## ## Type: error ## Coefficients: (asymptotic standard errors) ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 76.659390740 48.733983813 1.5730 0.1157149 ## PIB 0.003936351 0.002412095 1.6319 0.1026960 ## CAP_BOG -0.026724274 0.035542538 -0.7519 0.4521139 ## CAP_OCC -0.051550780 0.014822573 -3.4779 0.0005054 ## CAP_CS 0.249952788 0.204318664 1.2233 0.2211984 ## Población 0.000047471 0.000055107 0.8614 0.3890008 ## ## Lambda: 0.52489, LR test value: 4.7822, p-value: 0.028756 ## Approximate (numerical Hessian) standard error: 0.19904 ## z-value: 2.6371, p-value: 0.0083613 ## Wald statistic: 6.9544, p-value: 0.0083613 ## ## Log likelihood: -197.4421 for error model ## ML residual variance (sigma squared): 12461, (sigma: 111.63) ## Number of observations: 32 ## Number of parameters estimated: 8 ## AIC: 410.88, (AIC for lm: 413.67) reg.eq4=CAP_BAC ~ PIB + CAP_OCC + CAP_CS+ Población reg4=errorsarlm(reg.eq4,data=Insumo, Insumo.lw) s(reg4)#Lag Error (SEM) ## ## Call:errorsarlm(formula = reg.eq4, data = Insumo, listw = Insumo.lw) ## ## Residuals: ## Min 1Q Median 3Q Max ## -200.4867 -63.5891 -8.8979 41.1675 444.7078 ## ## Type: error ## Coefficients: (asymptotic standard errors) ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 78.047295629 51.760314984 1.5079 0.1315904 ## PIB 0.003727043 0.002409110 1.5471 0.1218483 ## CAP_OCC -0.050131489 0.014726792 -3.4041 0.0006638 ## CAP_CS 0.099564078 0.037675929 2.6426 0.0082261 ## Población 0.000057480 0.000053995 1.0646 0.2870778 ## ## Lambda: 0.56286, LR test value: 6.894, p-value: 0.0086485 ## Approximate (numerical Hessian) standard error: 0.17903 ## z-value: 3.144, p-value: 0.0016664 ## Wald statistic: 9.8849, p-value: 0.0016664 ## ## Log likelihood: -197.7004 for error model ## ML residual variance (sigma squared): 12505, (sigma: 111.82) ## Number of observations: 32 ## Number of parameters estimated: 7 ## AIC: 409.4, (AIC for lm: 414.29) reg.eq5=CAP_BAC ~ PIB + CAP_OCC + CAP_CS reg4=errorsarlm(reg.eq5,data=Insumo, Insumo.lw) s(reg4)#Lag Error (SEM) ## ## Call:errorsarlm(formula = reg.eq5, data = Insumo, listw = Insumo.lw) ## ## Residuals: ## Min 1Q Median 3Q Max ## -189.815 -68.002 -13.434 35.002 443.595 ## ## Type: error ## Coefficients: (asymptotic standard errors) ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 100.98165977 46.44259581 2.1743 0.029680 ## PIB 0.00611113 0.00092889 6.5789 0.00000000004738 ## CAP_OCC -0.04669321 0.01466331 -3.1844 0.001451 ## CAP_CS 0.07261035 0.02868558 2.5312 0.011366 ## ## Lambda: 0.54225, LR test value: 6.0083, p-value: 0.014239 ## Asymptotic standard error: 0.17423 ## z-value: 3.1123, p-value: 0.0018565 ## Wald statistic: 9.6862, p-value: 0.0018565 ## ## Log likelihood: -198.2513 for error model ## ML residual variance (sigma squared): 13034, (sigma: 114.17) ## Number of observations: 32 ## Number of parameters estimated: 6 ## AIC: 408.5, (AIC for lm: 412.51) 4.10 Mapa Estimado ###Mapa estimado fit = reg4$fitted.values #dev.new() #windows() shade.fit = shading(c(100,130,200,400), cols=(brewer.pal(5,&quot;Reds&quot;))) choropleth(Insumo, fit, shading=shade.fit) choro.legend(1555874, 535165.5, shade.fit, fmt=&quot;%1.2f&quot;, title = &quot;Estimaciones&quot;, cex=0.7, under = &quot;Menos de&quot;, between = &quot;a&quot;, over = &quot;Mas de&quot;) title(&quot;Valores ajustados mediante el modelo SEM para las captaciones del banco agrario en Colombia, cuarto trimestre 2020&quot;, cex.main=1) map.scale(755874,335165.5, 250000, &quot;km&quot;, 2, 50, sfcol=&#39;brown&#39;) ###R^2 Nagelkerke # summary.sarlm(reg4,Nagelkerke = TRUE) TO-DO ###Test de moran residuales modelo SEM moran.test(reg4$residuals, Insumo.lw) ## ## Moran I test under randomisation ## ## data: reg4$residuals ## weights: Insumo.lw ## ## Moran I statistic standard deviate = 0.83723, p-value = 0.2012 ## alternative hypothesis: greater ## sample estimates: ## Moran I statistic Expectation Variance ## 0.05266908 -0.03225806 0.01028984 #Municipal ColombiaM = readOGR(dsn = &quot;data_3_EstudioDeMercadoEspacial/Geodatabase Colombia&quot;, layer = &quot;municipios&quot;) ## OGR data source with driver: ESRI Shapefile ## Source: &quot;/home/jncc/Documents/Monitorias/EspacialPage/Clases-EE-UN/data_3_EstudioDeMercadoEspacial/Geodatabase Colombia&quot;, layer: &quot;municipios&quot; ## with 1107 features ## It has 6 fields ## Integer64 fields read as strings: COD_MUN COD_DEPTO "],["ilustración-del-kriging-simple-espacio-tiempo.html", "Chapter 5 Ilustración del kriging simple espacio tiempo 5.1 librerías 5.2 Simulación no condicional de una realización de un campo aleatorio espacio temporal no separable usando el modelo de covarianza cressie1 5.3 Algunas funciones de covarianza espacio temporal no separables", " Chapter 5 Ilustración del kriging simple espacio tiempo Martha Bohorquez 16/5/2022 5.1 librerías rm(list=ls()) library(mvtnorm) 5.2 Simulación no condicional de una realización de un campo aleatorio espacio temporal no separable usando el modelo de covarianza cressie1 En primer lugar, se generar la grilla espacio temporal. Aquí suponemos n=6 ubicaciones espaciales y T=4 momentos en el tiempo, así en total son 24 ubicaciones espacio-tiempo. Se llevará a cabo la simulación y posteriormente se usará el predictor kriging con su respectiva estimación de varianza del error de predicción, en un punto no “observado”. Se asume conocida la función de covarianza. En la práctica esta matriz se puede estimar por métodos como maxima veorsimilitud, pseudoverosimilitud y métodos basados en mínimos cuadrados. x1 &lt;- seq(0,3,len = 3) x2 &lt;- seq(1,6,len = 2) t &lt;- 1:4 grillaSpT=expand.grid(x1,x2,t) #matriz de distancias (rezagos) espaciales matDistSp=as.matrix(dist(grillaSpT[,1:2])) #matriz de distancias (rezagos) temporales matDistT=as.matrix(dist(grillaSpT[,3:3])) cressie1=function(h,u,p){ (p[1]^2/((p[2]^2*u^2+1)))*exp(-(p[3]^2*h^2)/(p[2]^2*u^2+1))} ##parámetros p, mu, que en este caso son p=c(0.4,1.7,1.9) y mu=0 sigma=cressie1(matDistSp,matDistT,p=c(0.15,1.7,1.9)) sim1=rmvnorm(1,mean=rep(0,nrow(grillaSpT)), sigma=sigma) datos1=cbind(grillaSpT,t(sim1)) names(datos1)=c(&quot;x&quot;,&quot;y&quot;,&quot;t&quot;,&quot;z((x,y),t)&quot;) matDistSp ## 1 2 3 4 5 6 7 8 9 10 11 12 ## 1 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 ## 2 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 ## 3 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 ## 4 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 ## 5 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 ## 6 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 ## 7 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 ## 8 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 ## 9 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 ## 10 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 ## 11 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 ## 12 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 ## 13 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 ## 14 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 ## 15 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 ## 16 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 ## 17 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 ## 18 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 ## 19 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 ## 20 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 ## 21 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 ## 22 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 ## 23 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 ## 24 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 ## 13 14 15 16 17 18 19 20 21 22 23 24 ## 1 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 ## 2 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 ## 3 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 ## 4 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 ## 5 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 ## 6 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 ## 7 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 ## 8 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 ## 9 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 ## 10 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 ## 11 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 ## 12 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 ## 13 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 ## 14 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 ## 15 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 ## 16 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 ## 17 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 ## 18 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 ## 19 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 ## 20 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 ## 21 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 ## 22 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 ## 23 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 ## 24 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 matDistT ## 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 ## 1 0 0 0 0 0 0 1 1 1 1 1 1 2 2 2 2 2 2 3 3 3 3 3 3 ## 2 0 0 0 0 0 0 1 1 1 1 1 1 2 2 2 2 2 2 3 3 3 3 3 3 ## 3 0 0 0 0 0 0 1 1 1 1 1 1 2 2 2 2 2 2 3 3 3 3 3 3 ## 4 0 0 0 0 0 0 1 1 1 1 1 1 2 2 2 2 2 2 3 3 3 3 3 3 ## 5 0 0 0 0 0 0 1 1 1 1 1 1 2 2 2 2 2 2 3 3 3 3 3 3 ## 6 0 0 0 0 0 0 1 1 1 1 1 1 2 2 2 2 2 2 3 3 3 3 3 3 ## 7 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 1 2 2 2 2 2 2 ## 8 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 1 2 2 2 2 2 2 ## 9 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 1 2 2 2 2 2 2 ## 10 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 1 2 2 2 2 2 2 ## 11 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 1 2 2 2 2 2 2 ## 12 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 1 2 2 2 2 2 2 ## 13 2 2 2 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 1 ## 14 2 2 2 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 1 ## 15 2 2 2 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 1 ## 16 2 2 2 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 1 ## 17 2 2 2 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 1 ## 18 2 2 2 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 1 ## 19 3 3 3 3 3 3 2 2 2 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 ## 20 3 3 3 3 3 3 2 2 2 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 ## 21 3 3 3 3 3 3 2 2 2 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 ## 22 3 3 3 3 3 3 2 2 2 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 ## 23 3 3 3 3 3 3 2 2 2 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 ## 24 3 3 3 3 3 3 2 2 2 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 sigma ## 1 ## 1 0.0224999999999999991673327315311325946822762489318847656250000 ## 2 0.0000066776797753472399274865707596848807270362158305943012238 ## 3 0.0000000000000001745640467031612522788968514235007086808448520 ## 4 0.0000000000000000000000000000000000000000143583827581367797582 ## 5 0.0000000000000000000000000000000000000000000042613636511423543 ## 6 0.0000000000000000000000000000000000000000000000000000001113981 ## 7 0.0057840616966580975927270102943111851345747709274291992187500 ## 8 0.0007168131149851337830664066430585990019608289003372192382812 ## 9 0.0000013643475657859583439243233299320579021696175914257764816 ## 10 0.0000000000004857106754824595982789570016222239747178193725041 ## 11 0.0000000000000601936494687245644879201301829867522713872138307 ## 12 0.0000000000000001145696938456985277283312171491699972437340957 ## 13 0.0017914012738853503543812184517491914448328316211700439453125 ## 14 0.0009382885903262112121600568848123202769784256815910339355469 ## 15 0.0001348239681125494701576655875996380018477793782949447631836 ## 16 0.0000013569558875775789074329515451755590049742750125005841255 ## 17 0.0000007107375915439390617206211891998535179482132662087678909 ## 18 0.0000001021268545377872649108357970722249508099821468931622803 ## 19 0.0008330248056275453864480406984682758775306865572929382324219 ## 20 0.0006166745823446492802411000866413814947009086608886718750000 ## 21 0.0002501787346616134882250348514531879118294455111026763916016 ## 22 0.0000294798909060135976912316729814378390983620192855596542358 ## 23 0.0000218234790719545488843489344787940353853628039360046386719 ## 24 0.0000088535680510412586229854886576973171941062901169061660767 ## 2 ## 1 0.000006677679775347239927486570759684880727036215831 ## 2 0.022499999999999999167332731531132594682276248931885 ## 3 0.000006677679775347239927486570759684880727036215831 ## 4 0.000000000000000000000000000000000000000000004261364 ## 5 0.000000000000000000000000000000000000000014358382758 ## 6 0.000000000000000000000000000000000000000000004261364 ## 7 0.000716813114985133783066406643058599001960828900337 ## 8 0.005784061696658097592727010294311185134574770927429 ## 9 0.000716813114985133783066406643058599001960828900337 ## 10 0.000000000000060193649468724564487920130182986752271 ## 11 0.000000000000485710675482459598278957001622223974718 ## 12 0.000000000000060193649468724564487920130182986752271 ## 13 0.000938288590326211212160056884812320276978425681591 ## 14 0.001791401273885350354381218451749191444832831621170 ## 15 0.000938288590326211212160056884812320276978425681591 ## 16 0.000000710737591543939061720621189199853517948213266 ## 17 0.000001356955887577578907432951545175559004974275013 ## 18 0.000000710737591543939061720621189199853517948213266 ## 19 0.000616674582344649280241100086641381494700908660889 ## 20 0.000833024805627545386448040698468275877530686557293 ## 21 0.000616674582344649280241100086641381494700908660889 ## 22 0.000021823479071954548884348934478794035385362803936 ## 23 0.000029479890906013597691231672981437839098362019286 ## 24 0.000021823479071954548884348934478794035385362803936 ## 3 ## 1 0.0000000000000001745640467031612522788968514235007086808448520 ## 2 0.0000066776797753472399274865707596848807270362158305943012238 ## 3 0.0224999999999999991673327315311325946822762489318847656250000 ## 4 0.0000000000000000000000000000000000000000000000000000001113981 ## 5 0.0000000000000000000000000000000000000000000042613636511423543 ## 6 0.0000000000000000000000000000000000000000143583827581367797582 ## 7 0.0000013643475657859583439243233299320579021696175914257764816 ## 8 0.0007168131149851337830664066430585990019608289003372192382812 ## 9 0.0057840616966580975927270102943111851345747709274291992187500 ## 10 0.0000000000000001145696938456985277283312171491699972437340957 ## 11 0.0000000000000601936494687245644879201301829867522713872138307 ## 12 0.0000000000004857106754824595982789570016222239747178193725041 ## 13 0.0001348239681125494701576655875996380018477793782949447631836 ## 14 0.0009382885903262112121600568848123202769784256815910339355469 ## 15 0.0017914012738853503543812184517491914448328316211700439453125 ## 16 0.0000001021268545377872649108357970722249508099821468931622803 ## 17 0.0000007107375915439390617206211891998535179482132662087678909 ## 18 0.0000013569558875775789074329515451755590049742750125005841255 ## 19 0.0002501787346616134882250348514531879118294455111026763916016 ## 20 0.0006166745823446492802411000866413814947009086608886718750000 ## 21 0.0008330248056275453864480406984682758775306865572929382324219 ## 22 0.0000088535680510412586229854886576973171941062901169061660767 ## 23 0.0000218234790719545488843489344787940353853628039360046386719 ## 24 0.0000294798909060135976912316729814378390983620192855596542358 ## 4 ## 1 0.0000000000000000000000000000000000000000143583827581367797582 ## 2 0.0000000000000000000000000000000000000000000042613636511423543 ## 3 0.0000000000000000000000000000000000000000000000000000001113981 ## 4 0.0224999999999999991673327315311325946822762489318847656250000 ## 5 0.0000066776797753472399274865707596848807270362158305943012238 ## 6 0.0000000000000001745640467031612522788968514235007086808448520 ## 7 0.0000000000004857106754824595982789570016222239747178193725041 ## 8 0.0000000000000601936494687245644879201301829867522713872138307 ## 9 0.0000000000000001145696938456985277283312171491699972437340957 ## 10 0.0057840616966580975927270102943111851345747709274291992187500 ## 11 0.0007168131149851337830664066430585990019608289003372192382812 ## 12 0.0000013643475657859583439243233299320579021696175914257764816 ## 13 0.0000013569558875775789074329515451755590049742750125005841255 ## 14 0.0000007107375915439390617206211891998535179482132662087678909 ## 15 0.0000001021268545377872649108357970722249508099821468931622803 ## 16 0.0017914012738853503543812184517491914448328316211700439453125 ## 17 0.0009382885903262112121600568848123202769784256815910339355469 ## 18 0.0001348239681125494701576655875996380018477793782949447631836 ## 19 0.0000294798909060135976912316729814378390983620192855596542358 ## 20 0.0000218234790719545488843489344787940353853628039360046386719 ## 21 0.0000088535680510412586229854886576973171941062901169061660767 ## 22 0.0008330248056275453864480406984682758775306865572929382324219 ## 23 0.0006166745823446492802411000866413814947009086608886718750000 ## 24 0.0002501787346616134882250348514531879118294455111026763916016 ## 5 ## 1 0.000000000000000000000000000000000000000000004261364 ## 2 0.000000000000000000000000000000000000000014358382758 ## 3 0.000000000000000000000000000000000000000000004261364 ## 4 0.000006677679775347239927486570759684880727036215831 ## 5 0.022499999999999999167332731531132594682276248931885 ## 6 0.000006677679775347239927486570759684880727036215831 ## 7 0.000000000000060193649468724564487920130182986752271 ## 8 0.000000000000485710675482459598278957001622223974718 ## 9 0.000000000000060193649468724564487920130182986752271 ## 10 0.000716813114985133783066406643058599001960828900337 ## 11 0.005784061696658097592727010294311185134574770927429 ## 12 0.000716813114985133783066406643058599001960828900337 ## 13 0.000000710737591543939061720621189199853517948213266 ## 14 0.000001356955887577578907432951545175559004974275013 ## 15 0.000000710737591543939061720621189199853517948213266 ## 16 0.000938288590326211212160056884812320276978425681591 ## 17 0.001791401273885350354381218451749191444832831621170 ## 18 0.000938288590326211212160056884812320276978425681591 ## 19 0.000021823479071954548884348934478794035385362803936 ## 20 0.000029479890906013597691231672981437839098362019286 ## 21 0.000021823479071954548884348934478794035385362803936 ## 22 0.000616674582344649280241100086641381494700908660889 ## 23 0.000833024805627545386448040698468275877530686557293 ## 24 0.000616674582344649280241100086641381494700908660889 ## 6 ## 1 0.0000000000000000000000000000000000000000000000000000001113981 ## 2 0.0000000000000000000000000000000000000000000042613636511423543 ## 3 0.0000000000000000000000000000000000000000143583827581367797582 ## 4 0.0000000000000001745640467031612522788968514235007086808448520 ## 5 0.0000066776797753472399274865707596848807270362158305943012238 ## 6 0.0224999999999999991673327315311325946822762489318847656250000 ## 7 0.0000000000000001145696938456985277283312171491699972437340957 ## 8 0.0000000000000601936494687245644879201301829867522713872138307 ## 9 0.0000000000004857106754824595982789570016222239747178193725041 ## 10 0.0000013643475657859583439243233299320579021696175914257764816 ## 11 0.0007168131149851337830664066430585990019608289003372192382812 ## 12 0.0057840616966580975927270102943111851345747709274291992187500 ## 13 0.0000001021268545377872649108357970722249508099821468931622803 ## 14 0.0000007107375915439390617206211891998535179482132662087678909 ## 15 0.0000013569558875775789074329515451755590049742750125005841255 ## 16 0.0001348239681125494701576655875996380018477793782949447631836 ## 17 0.0009382885903262112121600568848123202769784256815910339355469 ## 18 0.0017914012738853503543812184517491914448328316211700439453125 ## 19 0.0000088535680510412586229854886576973171941062901169061660767 ## 20 0.0000218234790719545488843489344787940353853628039360046386719 ## 21 0.0000294798909060135976912316729814378390983620192855596542358 ## 22 0.0002501787346616134882250348514531879118294455111026763916016 ## 23 0.0006166745823446492802411000866413814947009086608886718750000 ## 24 0.0008330248056275453864480406984682758775306865572929382324219 ## 7 ## 1 0.0057840616966580975927270102943111851345747709274291992187500 ## 2 0.0007168131149851337830664066430585990019608289003372192382812 ## 3 0.0000013643475657859583439243233299320579021696175914257764816 ## 4 0.0000000000004857106754824595982789570016222239747178193725041 ## 5 0.0000000000000601936494687245644879201301829867522713872138307 ## 6 0.0000000000000001145696938456985277283312171491699972437340957 ## 7 0.0224999999999999991673327315311325946822762489318847656250000 ## 8 0.0000066776797753472399274865707596848807270362158305943012238 ## 9 0.0000000000000001745640467031612522788968514235007086808448520 ## 10 0.0000000000000000000000000000000000000000143583827581367797582 ## 11 0.0000000000000000000000000000000000000000000042613636511423543 ## 12 0.0000000000000000000000000000000000000000000000000000001113981 ## 13 0.0057840616966580975927270102943111851345747709274291992187500 ## 14 0.0007168131149851337830664066430585990019608289003372192382812 ## 15 0.0000013643475657859583439243233299320579021696175914257764816 ## 16 0.0000000000004857106754824595982789570016222239747178193725041 ## 17 0.0000000000000601936494687245644879201301829867522713872138307 ## 18 0.0000000000000001145696938456985277283312171491699972437340957 ## 19 0.0017914012738853503543812184517491914448328316211700439453125 ## 20 0.0009382885903262112121600568848123202769784256815910339355469 ## 21 0.0001348239681125494701576655875996380018477793782949447631836 ## 22 0.0000013569558875775789074329515451755590049742750125005841255 ## 23 0.0000007107375915439390617206211891998535179482132662087678909 ## 24 0.0000001021268545377872649108357970722249508099821468931622803 ## 8 ## 1 0.000716813114985133783066406643058599001960828900337 ## 2 0.005784061696658097592727010294311185134574770927429 ## 3 0.000716813114985133783066406643058599001960828900337 ## 4 0.000000000000060193649468724564487920130182986752271 ## 5 0.000000000000485710675482459598278957001622223974718 ## 6 0.000000000000060193649468724564487920130182986752271 ## 7 0.000006677679775347239927486570759684880727036215831 ## 8 0.022499999999999999167332731531132594682276248931885 ## 9 0.000006677679775347239927486570759684880727036215831 ## 10 0.000000000000000000000000000000000000000000004261364 ## 11 0.000000000000000000000000000000000000000014358382758 ## 12 0.000000000000000000000000000000000000000000004261364 ## 13 0.000716813114985133783066406643058599001960828900337 ## 14 0.005784061696658097592727010294311185134574770927429 ## 15 0.000716813114985133783066406643058599001960828900337 ## 16 0.000000000000060193649468724564487920130182986752271 ## 17 0.000000000000485710675482459598278957001622223974718 ## 18 0.000000000000060193649468724564487920130182986752271 ## 19 0.000938288590326211212160056884812320276978425681591 ## 20 0.001791401273885350354381218451749191444832831621170 ## 21 0.000938288590326211212160056884812320276978425681591 ## 22 0.000000710737591543939061720621189199853517948213266 ## 23 0.000001356955887577578907432951545175559004974275013 ## 24 0.000000710737591543939061720621189199853517948213266 ## 9 ## 1 0.0000013643475657859583439243233299320579021696175914257764816 ## 2 0.0007168131149851337830664066430585990019608289003372192382812 ## 3 0.0057840616966580975927270102943111851345747709274291992187500 ## 4 0.0000000000000001145696938456985277283312171491699972437340957 ## 5 0.0000000000000601936494687245644879201301829867522713872138307 ## 6 0.0000000000004857106754824595982789570016222239747178193725041 ## 7 0.0000000000000001745640467031612522788968514235007086808448520 ## 8 0.0000066776797753472399274865707596848807270362158305943012238 ## 9 0.0224999999999999991673327315311325946822762489318847656250000 ## 10 0.0000000000000000000000000000000000000000000000000000001113981 ## 11 0.0000000000000000000000000000000000000000000042613636511423543 ## 12 0.0000000000000000000000000000000000000000143583827581367797582 ## 13 0.0000013643475657859583439243233299320579021696175914257764816 ## 14 0.0007168131149851337830664066430585990019608289003372192382812 ## 15 0.0057840616966580975927270102943111851345747709274291992187500 ## 16 0.0000000000000001145696938456985277283312171491699972437340957 ## 17 0.0000000000000601936494687245644879201301829867522713872138307 ## 18 0.0000000000004857106754824595982789570016222239747178193725041 ## 19 0.0001348239681125494701576655875996380018477793782949447631836 ## 20 0.0009382885903262112121600568848123202769784256815910339355469 ## 21 0.0017914012738853503543812184517491914448328316211700439453125 ## 22 0.0000001021268545377872649108357970722249508099821468931622803 ## 23 0.0000007107375915439390617206211891998535179482132662087678909 ## 24 0.0000013569558875775789074329515451755590049742750125005841255 ## 10 ## 1 0.0000000000004857106754824595982789570016222239747178193725041 ## 2 0.0000000000000601936494687245644879201301829867522713872138307 ## 3 0.0000000000000001145696938456985277283312171491699972437340957 ## 4 0.0057840616966580975927270102943111851345747709274291992187500 ## 5 0.0007168131149851337830664066430585990019608289003372192382812 ## 6 0.0000013643475657859583439243233299320579021696175914257764816 ## 7 0.0000000000000000000000000000000000000000143583827581367797582 ## 8 0.0000000000000000000000000000000000000000000042613636511423543 ## 9 0.0000000000000000000000000000000000000000000000000000001113981 ## 10 0.0224999999999999991673327315311325946822762489318847656250000 ## 11 0.0000066776797753472399274865707596848807270362158305943012238 ## 12 0.0000000000000001745640467031612522788968514235007086808448520 ## 13 0.0000000000004857106754824595982789570016222239747178193725041 ## 14 0.0000000000000601936494687245644879201301829867522713872138307 ## 15 0.0000000000000001145696938456985277283312171491699972437340957 ## 16 0.0057840616966580975927270102943111851345747709274291992187500 ## 17 0.0007168131149851337830664066430585990019608289003372192382812 ## 18 0.0000013643475657859583439243233299320579021696175914257764816 ## 19 0.0000013569558875775789074329515451755590049742750125005841255 ## 20 0.0000007107375915439390617206211891998535179482132662087678909 ## 21 0.0000001021268545377872649108357970722249508099821468931622803 ## 22 0.0017914012738853503543812184517491914448328316211700439453125 ## 23 0.0009382885903262112121600568848123202769784256815910339355469 ## 24 0.0001348239681125494701576655875996380018477793782949447631836 ## 11 ## 1 0.000000000000060193649468724564487920130182986752271 ## 2 0.000000000000485710675482459598278957001622223974718 ## 3 0.000000000000060193649468724564487920130182986752271 ## 4 0.000716813114985133783066406643058599001960828900337 ## 5 0.005784061696658097592727010294311185134574770927429 ## 6 0.000716813114985133783066406643058599001960828900337 ## 7 0.000000000000000000000000000000000000000000004261364 ## 8 0.000000000000000000000000000000000000000014358382758 ## 9 0.000000000000000000000000000000000000000000004261364 ## 10 0.000006677679775347239927486570759684880727036215831 ## 11 0.022499999999999999167332731531132594682276248931885 ## 12 0.000006677679775347239927486570759684880727036215831 ## 13 0.000000000000060193649468724564487920130182986752271 ## 14 0.000000000000485710675482459598278957001622223974718 ## 15 0.000000000000060193649468724564487920130182986752271 ## 16 0.000716813114985133783066406643058599001960828900337 ## 17 0.005784061696658097592727010294311185134574770927429 ## 18 0.000716813114985133783066406643058599001960828900337 ## 19 0.000000710737591543939061720621189199853517948213266 ## 20 0.000001356955887577578907432951545175559004974275013 ## 21 0.000000710737591543939061720621189199853517948213266 ## 22 0.000938288590326211212160056884812320276978425681591 ## 23 0.001791401273885350354381218451749191444832831621170 ## 24 0.000938288590326211212160056884812320276978425681591 ## 12 ## 1 0.0000000000000001145696938456985277283312171491699972437340957 ## 2 0.0000000000000601936494687245644879201301829867522713872138307 ## 3 0.0000000000004857106754824595982789570016222239747178193725041 ## 4 0.0000013643475657859583439243233299320579021696175914257764816 ## 5 0.0007168131149851337830664066430585990019608289003372192382812 ## 6 0.0057840616966580975927270102943111851345747709274291992187500 ## 7 0.0000000000000000000000000000000000000000000000000000001113981 ## 8 0.0000000000000000000000000000000000000000000042613636511423543 ## 9 0.0000000000000000000000000000000000000000143583827581367797582 ## 10 0.0000000000000001745640467031612522788968514235007086808448520 ## 11 0.0000066776797753472399274865707596848807270362158305943012238 ## 12 0.0224999999999999991673327315311325946822762489318847656250000 ## 13 0.0000000000000001145696938456985277283312171491699972437340957 ## 14 0.0000000000000601936494687245644879201301829867522713872138307 ## 15 0.0000000000004857106754824595982789570016222239747178193725041 ## 16 0.0000013643475657859583439243233299320579021696175914257764816 ## 17 0.0007168131149851337830664066430585990019608289003372192382812 ## 18 0.0057840616966580975927270102943111851345747709274291992187500 ## 19 0.0000001021268545377872649108357970722249508099821468931622803 ## 20 0.0000007107375915439390617206211891998535179482132662087678909 ## 21 0.0000013569558875775789074329515451755590049742750125005841255 ## 22 0.0001348239681125494701576655875996380018477793782949447631836 ## 23 0.0009382885903262112121600568848123202769784256815910339355469 ## 24 0.0017914012738853503543812184517491914448328316211700439453125 ## 13 ## 1 0.0017914012738853503543812184517491914448328316211700439453125 ## 2 0.0009382885903262112121600568848123202769784256815910339355469 ## 3 0.0001348239681125494701576655875996380018477793782949447631836 ## 4 0.0000013569558875775789074329515451755590049742750125005841255 ## 5 0.0000007107375915439390617206211891998535179482132662087678909 ## 6 0.0000001021268545377872649108357970722249508099821468931622803 ## 7 0.0057840616966580975927270102943111851345747709274291992187500 ## 8 0.0007168131149851337830664066430585990019608289003372192382812 ## 9 0.0000013643475657859583439243233299320579021696175914257764816 ## 10 0.0000000000004857106754824595982789570016222239747178193725041 ## 11 0.0000000000000601936494687245644879201301829867522713872138307 ## 12 0.0000000000000001145696938456985277283312171491699972437340957 ## 13 0.0224999999999999991673327315311325946822762489318847656250000 ## 14 0.0000066776797753472399274865707596848807270362158305943012238 ## 15 0.0000000000000001745640467031612522788968514235007086808448520 ## 16 0.0000000000000000000000000000000000000000143583827581367797582 ## 17 0.0000000000000000000000000000000000000000000042613636511423543 ## 18 0.0000000000000000000000000000000000000000000000000000001113981 ## 19 0.0057840616966580975927270102943111851345747709274291992187500 ## 20 0.0007168131149851337830664066430585990019608289003372192382812 ## 21 0.0000013643475657859583439243233299320579021696175914257764816 ## 22 0.0000000000004857106754824595982789570016222239747178193725041 ## 23 0.0000000000000601936494687245644879201301829867522713872138307 ## 24 0.0000000000000001145696938456985277283312171491699972437340957 ## 14 ## 1 0.000938288590326211212160056884812320276978425681591 ## 2 0.001791401273885350354381218451749191444832831621170 ## 3 0.000938288590326211212160056884812320276978425681591 ## 4 0.000000710737591543939061720621189199853517948213266 ## 5 0.000001356955887577578907432951545175559004974275013 ## 6 0.000000710737591543939061720621189199853517948213266 ## 7 0.000716813114985133783066406643058599001960828900337 ## 8 0.005784061696658097592727010294311185134574770927429 ## 9 0.000716813114985133783066406643058599001960828900337 ## 10 0.000000000000060193649468724564487920130182986752271 ## 11 0.000000000000485710675482459598278957001622223974718 ## 12 0.000000000000060193649468724564487920130182986752271 ## 13 0.000006677679775347239927486570759684880727036215831 ## 14 0.022499999999999999167332731531132594682276248931885 ## 15 0.000006677679775347239927486570759684880727036215831 ## 16 0.000000000000000000000000000000000000000000004261364 ## 17 0.000000000000000000000000000000000000000014358382758 ## 18 0.000000000000000000000000000000000000000000004261364 ## 19 0.000716813114985133783066406643058599001960828900337 ## 20 0.005784061696658097592727010294311185134574770927429 ## 21 0.000716813114985133783066406643058599001960828900337 ## 22 0.000000000000060193649468724564487920130182986752271 ## 23 0.000000000000485710675482459598278957001622223974718 ## 24 0.000000000000060193649468724564487920130182986752271 ## 15 ## 1 0.0001348239681125494701576655875996380018477793782949447631836 ## 2 0.0009382885903262112121600568848123202769784256815910339355469 ## 3 0.0017914012738853503543812184517491914448328316211700439453125 ## 4 0.0000001021268545377872649108357970722249508099821468931622803 ## 5 0.0000007107375915439390617206211891998535179482132662087678909 ## 6 0.0000013569558875775789074329515451755590049742750125005841255 ## 7 0.0000013643475657859583439243233299320579021696175914257764816 ## 8 0.0007168131149851337830664066430585990019608289003372192382812 ## 9 0.0057840616966580975927270102943111851345747709274291992187500 ## 10 0.0000000000000001145696938456985277283312171491699972437340957 ## 11 0.0000000000000601936494687245644879201301829867522713872138307 ## 12 0.0000000000004857106754824595982789570016222239747178193725041 ## 13 0.0000000000000001745640467031612522788968514235007086808448520 ## 14 0.0000066776797753472399274865707596848807270362158305943012238 ## 15 0.0224999999999999991673327315311325946822762489318847656250000 ## 16 0.0000000000000000000000000000000000000000000000000000001113981 ## 17 0.0000000000000000000000000000000000000000000042613636511423543 ## 18 0.0000000000000000000000000000000000000000143583827581367797582 ## 19 0.0000013643475657859583439243233299320579021696175914257764816 ## 20 0.0007168131149851337830664066430585990019608289003372192382812 ## 21 0.0057840616966580975927270102943111851345747709274291992187500 ## 22 0.0000000000000001145696938456985277283312171491699972437340957 ## 23 0.0000000000000601936494687245644879201301829867522713872138307 ## 24 0.0000000000004857106754824595982789570016222239747178193725041 ## 16 ## 1 0.0000013569558875775789074329515451755590049742750125005841255 ## 2 0.0000007107375915439390617206211891998535179482132662087678909 ## 3 0.0000001021268545377872649108357970722249508099821468931622803 ## 4 0.0017914012738853503543812184517491914448328316211700439453125 ## 5 0.0009382885903262112121600568848123202769784256815910339355469 ## 6 0.0001348239681125494701576655875996380018477793782949447631836 ## 7 0.0000000000004857106754824595982789570016222239747178193725041 ## 8 0.0000000000000601936494687245644879201301829867522713872138307 ## 9 0.0000000000000001145696938456985277283312171491699972437340957 ## 10 0.0057840616966580975927270102943111851345747709274291992187500 ## 11 0.0007168131149851337830664066430585990019608289003372192382812 ## 12 0.0000013643475657859583439243233299320579021696175914257764816 ## 13 0.0000000000000000000000000000000000000000143583827581367797582 ## 14 0.0000000000000000000000000000000000000000000042613636511423543 ## 15 0.0000000000000000000000000000000000000000000000000000001113981 ## 16 0.0224999999999999991673327315311325946822762489318847656250000 ## 17 0.0000066776797753472399274865707596848807270362158305943012238 ## 18 0.0000000000000001745640467031612522788968514235007086808448520 ## 19 0.0000000000004857106754824595982789570016222239747178193725041 ## 20 0.0000000000000601936494687245644879201301829867522713872138307 ## 21 0.0000000000000001145696938456985277283312171491699972437340957 ## 22 0.0057840616966580975927270102943111851345747709274291992187500 ## 23 0.0007168131149851337830664066430585990019608289003372192382812 ## 24 0.0000013643475657859583439243233299320579021696175914257764816 ## 17 ## 1 0.000000710737591543939061720621189199853517948213266 ## 2 0.000001356955887577578907432951545175559004974275013 ## 3 0.000000710737591543939061720621189199853517948213266 ## 4 0.000938288590326211212160056884812320276978425681591 ## 5 0.001791401273885350354381218451749191444832831621170 ## 6 0.000938288590326211212160056884812320276978425681591 ## 7 0.000000000000060193649468724564487920130182986752271 ## 8 0.000000000000485710675482459598278957001622223974718 ## 9 0.000000000000060193649468724564487920130182986752271 ## 10 0.000716813114985133783066406643058599001960828900337 ## 11 0.005784061696658097592727010294311185134574770927429 ## 12 0.000716813114985133783066406643058599001960828900337 ## 13 0.000000000000000000000000000000000000000000004261364 ## 14 0.000000000000000000000000000000000000000014358382758 ## 15 0.000000000000000000000000000000000000000000004261364 ## 16 0.000006677679775347239927486570759684880727036215831 ## 17 0.022499999999999999167332731531132594682276248931885 ## 18 0.000006677679775347239927486570759684880727036215831 ## 19 0.000000000000060193649468724564487920130182986752271 ## 20 0.000000000000485710675482459598278957001622223974718 ## 21 0.000000000000060193649468724564487920130182986752271 ## 22 0.000716813114985133783066406643058599001960828900337 ## 23 0.005784061696658097592727010294311185134574770927429 ## 24 0.000716813114985133783066406643058599001960828900337 ## 18 ## 1 0.0000001021268545377872649108357970722249508099821468931622803 ## 2 0.0000007107375915439390617206211891998535179482132662087678909 ## 3 0.0000013569558875775789074329515451755590049742750125005841255 ## 4 0.0001348239681125494701576655875996380018477793782949447631836 ## 5 0.0009382885903262112121600568848123202769784256815910339355469 ## 6 0.0017914012738853503543812184517491914448328316211700439453125 ## 7 0.0000000000000001145696938456985277283312171491699972437340957 ## 8 0.0000000000000601936494687245644879201301829867522713872138307 ## 9 0.0000000000004857106754824595982789570016222239747178193725041 ## 10 0.0000013643475657859583439243233299320579021696175914257764816 ## 11 0.0007168131149851337830664066430585990019608289003372192382812 ## 12 0.0057840616966580975927270102943111851345747709274291992187500 ## 13 0.0000000000000000000000000000000000000000000000000000001113981 ## 14 0.0000000000000000000000000000000000000000000042613636511423543 ## 15 0.0000000000000000000000000000000000000000143583827581367797582 ## 16 0.0000000000000001745640467031612522788968514235007086808448520 ## 17 0.0000066776797753472399274865707596848807270362158305943012238 ## 18 0.0224999999999999991673327315311325946822762489318847656250000 ## 19 0.0000000000000001145696938456985277283312171491699972437340957 ## 20 0.0000000000000601936494687245644879201301829867522713872138307 ## 21 0.0000000000004857106754824595982789570016222239747178193725041 ## 22 0.0000013643475657859583439243233299320579021696175914257764816 ## 23 0.0007168131149851337830664066430585990019608289003372192382812 ## 24 0.0057840616966580975927270102943111851345747709274291992187500 ## 19 ## 1 0.0008330248056275453864480406984682758775306865572929382324219 ## 2 0.0006166745823446492802411000866413814947009086608886718750000 ## 3 0.0002501787346616134882250348514531879118294455111026763916016 ## 4 0.0000294798909060135976912316729814378390983620192855596542358 ## 5 0.0000218234790719545488843489344787940353853628039360046386719 ## 6 0.0000088535680510412586229854886576973171941062901169061660767 ## 7 0.0017914012738853503543812184517491914448328316211700439453125 ## 8 0.0009382885903262112121600568848123202769784256815910339355469 ## 9 0.0001348239681125494701576655875996380018477793782949447631836 ## 10 0.0000013569558875775789074329515451755590049742750125005841255 ## 11 0.0000007107375915439390617206211891998535179482132662087678909 ## 12 0.0000001021268545377872649108357970722249508099821468931622803 ## 13 0.0057840616966580975927270102943111851345747709274291992187500 ## 14 0.0007168131149851337830664066430585990019608289003372192382812 ## 15 0.0000013643475657859583439243233299320579021696175914257764816 ## 16 0.0000000000004857106754824595982789570016222239747178193725041 ## 17 0.0000000000000601936494687245644879201301829867522713872138307 ## 18 0.0000000000000001145696938456985277283312171491699972437340957 ## 19 0.0224999999999999991673327315311325946822762489318847656250000 ## 20 0.0000066776797753472399274865707596848807270362158305943012238 ## 21 0.0000000000000001745640467031612522788968514235007086808448520 ## 22 0.0000000000000000000000000000000000000000143583827581367797582 ## 23 0.0000000000000000000000000000000000000000000042613636511423543 ## 24 0.0000000000000000000000000000000000000000000000000000001113981 ## 20 ## 1 0.000616674582344649280241100086641381494700908660889 ## 2 0.000833024805627545386448040698468275877530686557293 ## 3 0.000616674582344649280241100086641381494700908660889 ## 4 0.000021823479071954548884348934478794035385362803936 ## 5 0.000029479890906013597691231672981437839098362019286 ## 6 0.000021823479071954548884348934478794035385362803936 ## 7 0.000938288590326211212160056884812320276978425681591 ## 8 0.001791401273885350354381218451749191444832831621170 ## 9 0.000938288590326211212160056884812320276978425681591 ## 10 0.000000710737591543939061720621189199853517948213266 ## 11 0.000001356955887577578907432951545175559004974275013 ## 12 0.000000710737591543939061720621189199853517948213266 ## 13 0.000716813114985133783066406643058599001960828900337 ## 14 0.005784061696658097592727010294311185134574770927429 ## 15 0.000716813114985133783066406643058599001960828900337 ## 16 0.000000000000060193649468724564487920130182986752271 ## 17 0.000000000000485710675482459598278957001622223974718 ## 18 0.000000000000060193649468724564487920130182986752271 ## 19 0.000006677679775347239927486570759684880727036215831 ## 20 0.022499999999999999167332731531132594682276248931885 ## 21 0.000006677679775347239927486570759684880727036215831 ## 22 0.000000000000000000000000000000000000000000004261364 ## 23 0.000000000000000000000000000000000000000014358382758 ## 24 0.000000000000000000000000000000000000000000004261364 ## 21 ## 1 0.0002501787346616134882250348514531879118294455111026763916016 ## 2 0.0006166745823446492802411000866413814947009086608886718750000 ## 3 0.0008330248056275453864480406984682758775306865572929382324219 ## 4 0.0000088535680510412586229854886576973171941062901169061660767 ## 5 0.0000218234790719545488843489344787940353853628039360046386719 ## 6 0.0000294798909060135976912316729814378390983620192855596542358 ## 7 0.0001348239681125494701576655875996380018477793782949447631836 ## 8 0.0009382885903262112121600568848123202769784256815910339355469 ## 9 0.0017914012738853503543812184517491914448328316211700439453125 ## 10 0.0000001021268545377872649108357970722249508099821468931622803 ## 11 0.0000007107375915439390617206211891998535179482132662087678909 ## 12 0.0000013569558875775789074329515451755590049742750125005841255 ## 13 0.0000013643475657859583439243233299320579021696175914257764816 ## 14 0.0007168131149851337830664066430585990019608289003372192382812 ## 15 0.0057840616966580975927270102943111851345747709274291992187500 ## 16 0.0000000000000001145696938456985277283312171491699972437340957 ## 17 0.0000000000000601936494687245644879201301829867522713872138307 ## 18 0.0000000000004857106754824595982789570016222239747178193725041 ## 19 0.0000000000000001745640467031612522788968514235007086808448520 ## 20 0.0000066776797753472399274865707596848807270362158305943012238 ## 21 0.0224999999999999991673327315311325946822762489318847656250000 ## 22 0.0000000000000000000000000000000000000000000000000000001113981 ## 23 0.0000000000000000000000000000000000000000000042613636511423543 ## 24 0.0000000000000000000000000000000000000000143583827581367797582 ## 22 ## 1 0.0000294798909060135976912316729814378390983620192855596542358 ## 2 0.0000218234790719545488843489344787940353853628039360046386719 ## 3 0.0000088535680510412586229854886576973171941062901169061660767 ## 4 0.0008330248056275453864480406984682758775306865572929382324219 ## 5 0.0006166745823446492802411000866413814947009086608886718750000 ## 6 0.0002501787346616134882250348514531879118294455111026763916016 ## 7 0.0000013569558875775789074329515451755590049742750125005841255 ## 8 0.0000007107375915439390617206211891998535179482132662087678909 ## 9 0.0000001021268545377872649108357970722249508099821468931622803 ## 10 0.0017914012738853503543812184517491914448328316211700439453125 ## 11 0.0009382885903262112121600568848123202769784256815910339355469 ## 12 0.0001348239681125494701576655875996380018477793782949447631836 ## 13 0.0000000000004857106754824595982789570016222239747178193725041 ## 14 0.0000000000000601936494687245644879201301829867522713872138307 ## 15 0.0000000000000001145696938456985277283312171491699972437340957 ## 16 0.0057840616966580975927270102943111851345747709274291992187500 ## 17 0.0007168131149851337830664066430585990019608289003372192382812 ## 18 0.0000013643475657859583439243233299320579021696175914257764816 ## 19 0.0000000000000000000000000000000000000000143583827581367797582 ## 20 0.0000000000000000000000000000000000000000000042613636511423543 ## 21 0.0000000000000000000000000000000000000000000000000000001113981 ## 22 0.0224999999999999991673327315311325946822762489318847656250000 ## 23 0.0000066776797753472399274865707596848807270362158305943012238 ## 24 0.0000000000000001745640467031612522788968514235007086808448520 ## 23 ## 1 0.000021823479071954548884348934478794035385362803936 ## 2 0.000029479890906013597691231672981437839098362019286 ## 3 0.000021823479071954548884348934478794035385362803936 ## 4 0.000616674582344649280241100086641381494700908660889 ## 5 0.000833024805627545386448040698468275877530686557293 ## 6 0.000616674582344649280241100086641381494700908660889 ## 7 0.000000710737591543939061720621189199853517948213266 ## 8 0.000001356955887577578907432951545175559004974275013 ## 9 0.000000710737591543939061720621189199853517948213266 ## 10 0.000938288590326211212160056884812320276978425681591 ## 11 0.001791401273885350354381218451749191444832831621170 ## 12 0.000938288590326211212160056884812320276978425681591 ## 13 0.000000000000060193649468724564487920130182986752271 ## 14 0.000000000000485710675482459598278957001622223974718 ## 15 0.000000000000060193649468724564487920130182986752271 ## 16 0.000716813114985133783066406643058599001960828900337 ## 17 0.005784061696658097592727010294311185134574770927429 ## 18 0.000716813114985133783066406643058599001960828900337 ## 19 0.000000000000000000000000000000000000000000004261364 ## 20 0.000000000000000000000000000000000000000014358382758 ## 21 0.000000000000000000000000000000000000000000004261364 ## 22 0.000006677679775347239927486570759684880727036215831 ## 23 0.022499999999999999167332731531132594682276248931885 ## 24 0.000006677679775347239927486570759684880727036215831 ## 24 ## 1 0.0000088535680510412586229854886576973171941062901169061660767 ## 2 0.0000218234790719545488843489344787940353853628039360046386719 ## 3 0.0000294798909060135976912316729814378390983620192855596542358 ## 4 0.0002501787346616134882250348514531879118294455111026763916016 ## 5 0.0006166745823446492802411000866413814947009086608886718750000 ## 6 0.0008330248056275453864480406984682758775306865572929382324219 ## 7 0.0000001021268545377872649108357970722249508099821468931622803 ## 8 0.0000007107375915439390617206211891998535179482132662087678909 ## 9 0.0000013569558875775789074329515451755590049742750125005841255 ## 10 0.0001348239681125494701576655875996380018477793782949447631836 ## 11 0.0009382885903262112121600568848123202769784256815910339355469 ## 12 0.0017914012738853503543812184517491914448328316211700439453125 ## 13 0.0000000000000001145696938456985277283312171491699972437340957 ## 14 0.0000000000000601936494687245644879201301829867522713872138307 ## 15 0.0000000000004857106754824595982789570016222239747178193725041 ## 16 0.0000013643475657859583439243233299320579021696175914257764816 ## 17 0.0007168131149851337830664066430585990019608289003372192382812 ## 18 0.0057840616966580975927270102943111851345747709274291992187500 ## 19 0.0000000000000000000000000000000000000000000000000000001113981 ## 20 0.0000000000000000000000000000000000000000000042613636511423543 ## 21 0.0000000000000000000000000000000000000000143583827581367797582 ## 22 0.0000000000000001745640467031612522788968514235007086808448520 ## 23 0.0000066776797753472399274865707596848807270362158305943012238 ## 24 0.0224999999999999991673327315311325946822762489318847656250000 datos1 ## x y t z((x,y),t) ## 1 0.0 1 1 0.209841857 ## 2 1.5 1 1 -0.073537005 ## 3 3.0 1 1 0.227720221 ## 4 0.0 6 1 0.137431838 ## 5 1.5 6 1 -0.146414702 ## 6 3.0 6 1 0.076385131 ## 7 0.0 1 2 0.082436950 ## 8 1.5 1 2 0.150144835 ## 9 3.0 1 2 -0.205722362 ## 10 0.0 6 2 -0.027673965 ## 11 1.5 6 2 -0.088120617 ## 12 3.0 6 2 0.019220366 ## 13 0.0 1 3 0.140244362 ## 14 1.5 1 3 -0.135968700 ## 15 3.0 1 3 0.020263568 ## 16 0.0 6 3 0.038055638 ## 17 1.5 6 3 -0.007998637 ## 18 3.0 6 3 0.186340295 ## 19 0.0 1 4 -0.028831102 ## 20 1.5 1 4 0.045677638 ## 21 3.0 1 4 -0.100529499 ## 22 0.0 6 4 0.227727716 ## 23 1.5 6 4 0.209252338 ## 24 3.0 6 4 0.255284364 Se requiere predecir predecir en el tiempo \\(t=2.3\\) y en el lugar \\(s_0=(1.5,2.7)\\). Nótese que tanto el dominio espacial como el dominio temporal con continuos y fijos. A continuación se presenta el procedimiento para llevar a cabo Kriging simple con su respectiva varianza de error de predicción estimada grillaSpT0=rbind(expand.grid(x1,x2,t),c(1.5,2.7,2.3)) matDistSp0=as.matrix(dist(grillaSpT0[,1:2])) matDistT0=as.matrix(dist(grillaSpT0[,3:3])) sigma0=cressie1(matDistSp0,matDistT0,p=c(0.15,1.7,1.9)) #vector de covarianzas entre la coordenada a predecir y las observadas sigma0 ## 1 ## 1 0.0224999999999999991673327315311325946822762489318847656250000 ## 2 0.0000066776797753472399274865707596848807270362158305943012238 ## 3 0.0000000000000001745640467031612522788968514235007086808448520 ## 4 0.0000000000000000000000000000000000000000143583827581367797582 ## 5 0.0000000000000000000000000000000000000000000042613636511423543 ## 6 0.0000000000000000000000000000000000000000000000000000001113981 ## 7 0.0057840616966580975927270102943111851345747709274291992187500 ## 8 0.0007168131149851337830664066430585990019608289003372192382812 ## 9 0.0000013643475657859583439243233299320579021696175914257764816 ## 10 0.0000000000004857106754824595982789570016222239747178193725041 ## 11 0.0000000000000601936494687245644879201301829867522713872138307 ## 12 0.0000000000000001145696938456985277283312171491699972437340957 ## 13 0.0017914012738853503543812184517491914448328316211700439453125 ## 14 0.0009382885903262112121600568848123202769784256815910339355469 ## 15 0.0001348239681125494701576655875996380018477793782949447631836 ## 16 0.0000013569558875775789074329515451755590049742750125005841255 ## 17 0.0000007107375915439390617206211891998535179482132662087678909 ## 18 0.0000001021268545377872649108357970722249508099821468931622803 ## 19 0.0008330248056275453864480406984682758775306865572929382324219 ## 20 0.0006166745823446492802411000866413814947009086608886718750000 ## 21 0.0002501787346616134882250348514531879118294455111026763916016 ## 22 0.0000294798909060135976912316729814378390983620192855596542358 ## 23 0.0000218234790719545488843489344787940353853628039360046386719 ## 24 0.0000088535680510412586229854886576973171941062901169061660767 ## 25 0.0001632912431678741887065148263857849997293669730424880981445 ## 2 ## 1 0.000006677679775347239927486570759684880727036215831 ## 2 0.022499999999999999167332731531132594682276248931885 ## 3 0.000006677679775347239927486570759684880727036215831 ## 4 0.000000000000000000000000000000000000000000004261364 ## 5 0.000000000000000000000000000000000000000014358382758 ## 6 0.000000000000000000000000000000000000000000004261364 ## 7 0.000716813114985133783066406643058599001960828900337 ## 8 0.005784061696658097592727010294311185134574770927429 ## 9 0.000716813114985133783066406643058599001960828900337 ## 10 0.000000000000060193649468724564487920130182986752271 ## 11 0.000000000000485710675482459598278957001622223974718 ## 12 0.000000000000060193649468724564487920130182986752271 ## 13 0.000938288590326211212160056884812320276978425681591 ## 14 0.001791401273885350354381218451749191444832831621170 ## 15 0.000938288590326211212160056884812320276978425681591 ## 16 0.000000710737591543939061720621189199853517948213266 ## 17 0.000001356955887577578907432951545175559004974275013 ## 18 0.000000710737591543939061720621189199853517948213266 ## 19 0.000616674582344649280241100086641381494700908660889 ## 20 0.000833024805627545386448040698468275877530686557293 ## 21 0.000616674582344649280241100086641381494700908660889 ## 22 0.000021823479071954548884348934478794035385362803936 ## 23 0.000029479890906013597691231672981437839098362019286 ## 24 0.000021823479071954548884348934478794035385362803936 ## 25 0.000649336057644723011438026016861613243236206471920 ## 3 ## 1 0.0000000000000001745640467031612522788968514235007086808448520 ## 2 0.0000066776797753472399274865707596848807270362158305943012238 ## 3 0.0224999999999999991673327315311325946822762489318847656250000 ## 4 0.0000000000000000000000000000000000000000000000000000001113981 ## 5 0.0000000000000000000000000000000000000000000042613636511423543 ## 6 0.0000000000000000000000000000000000000000143583827581367797582 ## 7 0.0000013643475657859583439243233299320579021696175914257764816 ## 8 0.0007168131149851337830664066430585990019608289003372192382812 ## 9 0.0057840616966580975927270102943111851345747709274291992187500 ## 10 0.0000000000000001145696938456985277283312171491699972437340957 ## 11 0.0000000000000601936494687245644879201301829867522713872138307 ## 12 0.0000000000004857106754824595982789570016222239747178193725041 ## 13 0.0001348239681125494701576655875996380018477793782949447631836 ## 14 0.0009382885903262112121600568848123202769784256815910339355469 ## 15 0.0017914012738853503543812184517491914448328316211700439453125 ## 16 0.0000001021268545377872649108357970722249508099821468931622803 ## 17 0.0000007107375915439390617206211891998535179482132662087678909 ## 18 0.0000013569558875775789074329515451755590049742750125005841255 ## 19 0.0002501787346616134882250348514531879118294455111026763916016 ## 20 0.0006166745823446492802411000866413814947009086608886718750000 ## 21 0.0008330248056275453864480406984682758775306865572929382324219 ## 22 0.0000088535680510412586229854886576973171941062901169061660767 ## 23 0.0000218234790719545488843489344787940353853628039360046386719 ## 24 0.0000294798909060135976912316729814378390983620192855596542358 ## 25 0.0001632912431678741887065148263857849997293669730424880981445 ## 4 ## 1 0.0000000000000000000000000000000000000000143583827581367797582 ## 2 0.0000000000000000000000000000000000000000000042613636511423543 ## 3 0.0000000000000000000000000000000000000000000000000000001113981 ## 4 0.0224999999999999991673327315311325946822762489318847656250000 ## 5 0.0000066776797753472399274865707596848807270362158305943012238 ## 6 0.0000000000000001745640467031612522788968514235007086808448520 ## 7 0.0000000000004857106754824595982789570016222239747178193725041 ## 8 0.0000000000000601936494687245644879201301829867522713872138307 ## 9 0.0000000000000001145696938456985277283312171491699972437340957 ## 10 0.0057840616966580975927270102943111851345747709274291992187500 ## 11 0.0007168131149851337830664066430585990019608289003372192382812 ## 12 0.0000013643475657859583439243233299320579021696175914257764816 ## 13 0.0000013569558875775789074329515451755590049742750125005841255 ## 14 0.0000007107375915439390617206211891998535179482132662087678909 ## 15 0.0000001021268545377872649108357970722249508099821468931622803 ## 16 0.0017914012738853503543812184517491914448328316211700439453125 ## 17 0.0009382885903262112121600568848123202769784256815910339355469 ## 18 0.0001348239681125494701576655875996380018477793782949447631836 ## 19 0.0000294798909060135976912316729814378390983620192855596542358 ## 20 0.0000218234790719545488843489344787940353853628039360046386719 ## 21 0.0000088535680510412586229854886576973171941062901169061660767 ## 22 0.0008330248056275453864480406984682758775306865572929382324219 ## 23 0.0006166745823446492802411000866413814947009086608886718750000 ## 24 0.0002501787346616134882250348514531879118294455111026763916016 ## 25 0.0000012061013013676200694398229357195972966110275592654943466 ## 5 ## 1 0.000000000000000000000000000000000000000000004261364 ## 2 0.000000000000000000000000000000000000000014358382758 ## 3 0.000000000000000000000000000000000000000000004261364 ## 4 0.000006677679775347239927486570759684880727036215831 ## 5 0.022499999999999999167332731531132594682276248931885 ## 6 0.000006677679775347239927486570759684880727036215831 ## 7 0.000000000000060193649468724564487920130182986752271 ## 8 0.000000000000485710675482459598278957001622223974718 ## 9 0.000000000000060193649468724564487920130182986752271 ## 10 0.000716813114985133783066406643058599001960828900337 ## 11 0.005784061696658097592727010294311185134574770927429 ## 12 0.000716813114985133783066406643058599001960828900337 ## 13 0.000000710737591543939061720621189199853517948213266 ## 14 0.000001356955887577578907432951545175559004974275013 ## 15 0.000000710737591543939061720621189199853517948213266 ## 16 0.000938288590326211212160056884812320276978425681591 ## 17 0.001791401273885350354381218451749191444832831621170 ## 18 0.000938288590326211212160056884812320276978425681591 ## 19 0.000021823479071954548884348934478794035385362803936 ## 20 0.000029479890906013597691231672981437839098362019286 ## 21 0.000021823479071954548884348934478794035385362803936 ## 22 0.000616674582344649280241100086641381494700908660889 ## 23 0.000833024805627545386448040698468275877530686557293 ## 24 0.000616674582344649280241100086641381494700908660889 ## 25 0.000004796124084529605901433026160507466784110874869 ## 6 ## 1 0.0000000000000000000000000000000000000000000000000000001113981 ## 2 0.0000000000000000000000000000000000000000000042613636511423543 ## 3 0.0000000000000000000000000000000000000000143583827581367797582 ## 4 0.0000000000000001745640467031612522788968514235007086808448520 ## 5 0.0000066776797753472399274865707596848807270362158305943012238 ## 6 0.0224999999999999991673327315311325946822762489318847656250000 ## 7 0.0000000000000001145696938456985277283312171491699972437340957 ## 8 0.0000000000000601936494687245644879201301829867522713872138307 ## 9 0.0000000000004857106754824595982789570016222239747178193725041 ## 10 0.0000013643475657859583439243233299320579021696175914257764816 ## 11 0.0007168131149851337830664066430585990019608289003372192382812 ## 12 0.0057840616966580975927270102943111851345747709274291992187500 ## 13 0.0000001021268545377872649108357970722249508099821468931622803 ## 14 0.0000007107375915439390617206211891998535179482132662087678909 ## 15 0.0000013569558875775789074329515451755590049742750125005841255 ## 16 0.0001348239681125494701576655875996380018477793782949447631836 ## 17 0.0009382885903262112121600568848123202769784256815910339355469 ## 18 0.0017914012738853503543812184517491914448328316211700439453125 ## 19 0.0000088535680510412586229854886576973171941062901169061660767 ## 20 0.0000218234790719545488843489344787940353853628039360046386719 ## 21 0.0000294798909060135976912316729814378390983620192855596542358 ## 22 0.0002501787346616134882250348514531879118294455111026763916016 ## 23 0.0006166745823446492802411000866413814947009086608886718750000 ## 24 0.0008330248056275453864480406984682758775306865572929382324219 ## 25 0.0000012061013013676200694398229357195972966110275592654943466 ## 7 ## 1 0.0057840616966580975927270102943111851345747709274291992187500 ## 2 0.0007168131149851337830664066430585990019608289003372192382812 ## 3 0.0000013643475657859583439243233299320579021696175914257764816 ## 4 0.0000000000004857106754824595982789570016222239747178193725041 ## 5 0.0000000000000601936494687245644879201301829867522713872138307 ## 6 0.0000000000000001145696938456985277283312171491699972437340957 ## 7 0.0224999999999999991673327315311325946822762489318847656250000 ## 8 0.0000066776797753472399274865707596848807270362158305943012238 ## 9 0.0000000000000001745640467031612522788968514235007086808448520 ## 10 0.0000000000000000000000000000000000000000143583827581367797582 ## 11 0.0000000000000000000000000000000000000000000042613636511423543 ## 12 0.0000000000000000000000000000000000000000000000000000001113981 ## 13 0.0057840616966580975927270102943111851345747709274291992187500 ## 14 0.0007168131149851337830664066430585990019608289003372192382812 ## 15 0.0000013643475657859583439243233299320579021696175914257764816 ## 16 0.0000000000004857106754824595982789570016222239747178193725041 ## 17 0.0000000000000601936494687245644879201301829867522713872138307 ## 18 0.0000000000000001145696938456985277283312171491699972437340957 ## 19 0.0017914012738853503543812184517491914448328316211700439453125 ## 20 0.0009382885903262112121600568848123202769784256815910339355469 ## 21 0.0001348239681125494701576655875996380018477793782949447631836 ## 22 0.0000013569558875775789074329515451755590049742750125005841255 ## 23 0.0000007107375915439390617206211891998535179482132662087678909 ## 24 0.0000001021268545377872649108357970722249508099821468931622803 ## 25 0.0000000071885934411270752634838349332067203301122049197147135 ## 8 ## 1 0.000716813114985133783066406643058599001960828900337 ## 2 0.005784061696658097592727010294311185134574770927429 ## 3 0.000716813114985133783066406643058599001960828900337 ## 4 0.000000000000060193649468724564487920130182986752271 ## 5 0.000000000000485710675482459598278957001622223974718 ## 6 0.000000000000060193649468724564487920130182986752271 ## 7 0.000006677679775347239927486570759684880727036215831 ## 8 0.022499999999999999167332731531132594682276248931885 ## 9 0.000006677679775347239927486570759684880727036215831 ## 10 0.000000000000000000000000000000000000000000004261364 ## 11 0.000000000000000000000000000000000000000014358382758 ## 12 0.000000000000000000000000000000000000000000004261364 ## 13 0.000716813114985133783066406643058599001960828900337 ## 14 0.005784061696658097592727010294311185134574770927429 ## 15 0.000716813114985133783066406643058599001960828900337 ## 16 0.000000000000060193649468724564487920130182986752271 ## 17 0.000000000000485710675482459598278957001622223974718 ## 18 0.000000000000060193649468724564487920130182986752271 ## 19 0.000938288590326211212160056884812320276978425681591 ## 20 0.001791401273885350354381218451749191444832831621170 ## 21 0.000938288590326211212160056884812320276978425681591 ## 22 0.000000710737591543939061720621189199853517948213266 ## 23 0.000001356955887577578907432951545175559004974275013 ## 24 0.000000710737591543939061720621189199853517948213266 ## 25 0.000004529706908199270517319159207181300530464795884 ## 9 ## 1 0.0000013643475657859583439243233299320579021696175914257764816 ## 2 0.0007168131149851337830664066430585990019608289003372192382812 ## 3 0.0057840616966580975927270102943111851345747709274291992187500 ## 4 0.0000000000000001145696938456985277283312171491699972437340957 ## 5 0.0000000000000601936494687245644879201301829867522713872138307 ## 6 0.0000000000004857106754824595982789570016222239747178193725041 ## 7 0.0000000000000001745640467031612522788968514235007086808448520 ## 8 0.0000066776797753472399274865707596848807270362158305943012238 ## 9 0.0224999999999999991673327315311325946822762489318847656250000 ## 10 0.0000000000000000000000000000000000000000000000000000001113981 ## 11 0.0000000000000000000000000000000000000000000042613636511423543 ## 12 0.0000000000000000000000000000000000000000143583827581367797582 ## 13 0.0000013643475657859583439243233299320579021696175914257764816 ## 14 0.0007168131149851337830664066430585990019608289003372192382812 ## 15 0.0057840616966580975927270102943111851345747709274291992187500 ## 16 0.0000000000000001145696938456985277283312171491699972437340957 ## 17 0.0000000000000601936494687245644879201301829867522713872138307 ## 18 0.0000000000004857106754824595982789570016222239747178193725041 ## 19 0.0001348239681125494701576655875996380018477793782949447631836 ## 20 0.0009382885903262112121600568848123202769784256815910339355469 ## 21 0.0017914012738853503543812184517491914448328316211700439453125 ## 22 0.0000001021268545377872649108357970722249508099821468931622803 ## 23 0.0000007107375915439390617206211891998535179482132662087678909 ## 24 0.0000013569558875775789074329515451755590049742750125005841255 ## 25 0.0000000071885934411270752634838349332067203301122049197147135 ## 10 ## 1 0.0000000000004857106754824595982789570016222239747178193725041 ## 2 0.0000000000000601936494687245644879201301829867522713872138307 ## 3 0.0000000000000001145696938456985277283312171491699972437340957 ## 4 0.0057840616966580975927270102943111851345747709274291992187500 ## 5 0.0007168131149851337830664066430585990019608289003372192382812 ## 6 0.0000013643475657859583439243233299320579021696175914257764816 ## 7 0.0000000000000000000000000000000000000000143583827581367797582 ## 8 0.0000000000000000000000000000000000000000000042613636511423543 ## 9 0.0000000000000000000000000000000000000000000000000000001113981 ## 10 0.0224999999999999991673327315311325946822762489318847656250000 ## 11 0.0000066776797753472399274865707596848807270362158305943012238 ## 12 0.0000000000000001745640467031612522788968514235007086808448520 ## 13 0.0000000000004857106754824595982789570016222239747178193725041 ## 14 0.0000000000000601936494687245644879201301829867522713872138307 ## 15 0.0000000000000001145696938456985277283312171491699972437340957 ## 16 0.0057840616966580975927270102943111851345747709274291992187500 ## 17 0.0007168131149851337830664066430585990019608289003372192382812 ## 18 0.0000013643475657859583439243233299320579021696175914257764816 ## 19 0.0000013569558875775789074329515451755590049742750125005841255 ## 20 0.0000007107375915439390617206211891998535179482132662087678909 ## 21 0.0000001021268545377872649108357970722249508099821468931622803 ## 22 0.0017914012738853503543812184517491914448328316211700439453125 ## 23 0.0009382885903262112121600568848123202769784256815910339355469 ## 24 0.0001348239681125494701576655875996380018477793782949447631836 ## 25 0.0000000000000000008000711605775138903917974564434023496189163 ## 11 ## 1 0.000000000000060193649468724564487920130182986752271 ## 2 0.000000000000485710675482459598278957001622223974718 ## 3 0.000000000000060193649468724564487920130182986752271 ## 4 0.000716813114985133783066406643058599001960828900337 ## 5 0.005784061696658097592727010294311185134574770927429 ## 6 0.000716813114985133783066406643058599001960828900337 ## 7 0.000000000000000000000000000000000000000000004261364 ## 8 0.000000000000000000000000000000000000000014358382758 ## 9 0.000000000000000000000000000000000000000000004261364 ## 10 0.000006677679775347239927486570759684880727036215831 ## 11 0.022499999999999999167332731531132594682276248931885 ## 12 0.000006677679775347239927486570759684880727036215831 ## 13 0.000000000000060193649468724564487920130182986752271 ## 14 0.000000000000485710675482459598278957001622223974718 ## 15 0.000000000000060193649468724564487920130182986752271 ## 16 0.000716813114985133783066406643058599001960828900337 ## 17 0.005784061696658097592727010294311185134574770927429 ## 18 0.000716813114985133783066406643058599001960828900337 ## 19 0.000000710737591543939061720621189199853517948213266 ## 20 0.000001356955887577578907432951545175559004974275013 ## 21 0.000000710737591543939061720621189199853517948213266 ## 22 0.000938288590326211212160056884812320276978425681591 ## 23 0.001791401273885350354381218451749191444832831621170 ## 24 0.000938288590326211212160056884812320276978425681591 ## 25 0.000000000000000504144224151701356394133694403909602 ## 12 ## 1 0.0000000000000001145696938456985277283312171491699972437340957 ## 2 0.0000000000000601936494687245644879201301829867522713872138307 ## 3 0.0000000000004857106754824595982789570016222239747178193725041 ## 4 0.0000013643475657859583439243233299320579021696175914257764816 ## 5 0.0007168131149851337830664066430585990019608289003372192382812 ## 6 0.0057840616966580975927270102943111851345747709274291992187500 ## 7 0.0000000000000000000000000000000000000000000000000000001113981 ## 8 0.0000000000000000000000000000000000000000000042613636511423543 ## 9 0.0000000000000000000000000000000000000000143583827581367797582 ## 10 0.0000000000000001745640467031612522788968514235007086808448520 ## 11 0.0000066776797753472399274865707596848807270362158305943012238 ## 12 0.0224999999999999991673327315311325946822762489318847656250000 ## 13 0.0000000000000001145696938456985277283312171491699972437340957 ## 14 0.0000000000000601936494687245644879201301829867522713872138307 ## 15 0.0000000000004857106754824595982789570016222239747178193725041 ## 16 0.0000013643475657859583439243233299320579021696175914257764816 ## 17 0.0007168131149851337830664066430585990019608289003372192382812 ## 18 0.0057840616966580975927270102943111851345747709274291992187500 ## 19 0.0000001021268545377872649108357970722249508099821468931622803 ## 20 0.0000007107375915439390617206211891998535179482132662087678909 ## 21 0.0000013569558875775789074329515451755590049742750125005841255 ## 22 0.0001348239681125494701576655875996380018477793782949447631836 ## 23 0.0009382885903262112121600568848123202769784256815910339355469 ## 24 0.0017914012738853503543812184517491914448328316211700439453125 ## 25 0.0000000000000000008000711605775138903917974564434023496189163 ## 13 ## 1 0.0017914012738853503543812184517491914448328316211700439453125 ## 2 0.0009382885903262112121600568848123202769784256815910339355469 ## 3 0.0001348239681125494701576655875996380018477793782949447631836 ## 4 0.0000013569558875775789074329515451755590049742750125005841255 ## 5 0.0000007107375915439390617206211891998535179482132662087678909 ## 6 0.0000001021268545377872649108357970722249508099821468931622803 ## 7 0.0057840616966580975927270102943111851345747709274291992187500 ## 8 0.0007168131149851337830664066430585990019608289003372192382812 ## 9 0.0000013643475657859583439243233299320579021696175914257764816 ## 10 0.0000000000004857106754824595982789570016222239747178193725041 ## 11 0.0000000000000601936494687245644879201301829867522713872138307 ## 12 0.0000000000000001145696938456985277283312171491699972437340957 ## 13 0.0224999999999999991673327315311325946822762489318847656250000 ## 14 0.0000066776797753472399274865707596848807270362158305943012238 ## 15 0.0000000000000001745640467031612522788968514235007086808448520 ## 16 0.0000000000000000000000000000000000000000143583827581367797582 ## 17 0.0000000000000000000000000000000000000000000042613636511423543 ## 18 0.0000000000000000000000000000000000000000000000000000001113981 ## 19 0.0057840616966580975927270102943111851345747709274291992187500 ## 20 0.0007168131149851337830664066430585990019608289003372192382812 ## 21 0.0000013643475657859583439243233299320579021696175914257764816 ## 22 0.0000000000004857106754824595982789570016222239747178193725041 ## 23 0.0000000000000601936494687245644879201301829867522713872138307 ## 24 0.0000000000000001145696938456985277283312171491699972437340957 ## 25 0.0000043025960066369215722297848769617445441326708532869815826 ## 14 ## 1 0.000938288590326211212160056884812320276978425681591 ## 2 0.001791401273885350354381218451749191444832831621170 ## 3 0.000938288590326211212160056884812320276978425681591 ## 4 0.000000710737591543939061720621189199853517948213266 ## 5 0.000001356955887577578907432951545175559004974275013 ## 6 0.000000710737591543939061720621189199853517948213266 ## 7 0.000716813114985133783066406643058599001960828900337 ## 8 0.005784061696658097592727010294311185134574770927429 ## 9 0.000716813114985133783066406643058599001960828900337 ## 10 0.000000000000060193649468724564487920130182986752271 ## 11 0.000000000000485710675482459598278957001622223974718 ## 12 0.000000000000060193649468724564487920130182986752271 ## 13 0.000006677679775347239927486570759684880727036215831 ## 14 0.022499999999999999167332731531132594682276248931885 ## 15 0.000006677679775347239927486570759684880727036215831 ## 16 0.000000000000000000000000000000000000000000004261364 ## 17 0.000000000000000000000000000000000000000014358382758 ## 18 0.000000000000000000000000000000000000000000004261364 ## 19 0.000716813114985133783066406643058599001960828900337 ## 20 0.005784061696658097592727010294311185134574770927429 ## 21 0.000716813114985133783066406643058599001960828900337 ## 22 0.000000000000060193649468724564487920130182986752271 ## 23 0.000000000000485710675482459598278957001622223974718 ## 24 0.000000000000060193649468724564487920130182986752271 ## 25 0.000124094247233588712365018325023413581220665946603 ## 15 ## 1 0.0001348239681125494701576655875996380018477793782949447631836 ## 2 0.0009382885903262112121600568848123202769784256815910339355469 ## 3 0.0017914012738853503543812184517491914448328316211700439453125 ## 4 0.0000001021268545377872649108357970722249508099821468931622803 ## 5 0.0000007107375915439390617206211891998535179482132662087678909 ## 6 0.0000013569558875775789074329515451755590049742750125005841255 ## 7 0.0000013643475657859583439243233299320579021696175914257764816 ## 8 0.0007168131149851337830664066430585990019608289003372192382812 ## 9 0.0057840616966580975927270102943111851345747709274291992187500 ## 10 0.0000000000000001145696938456985277283312171491699972437340957 ## 11 0.0000000000000601936494687245644879201301829867522713872138307 ## 12 0.0000000000004857106754824595982789570016222239747178193725041 ## 13 0.0000000000000001745640467031612522788968514235007086808448520 ## 14 0.0000066776797753472399274865707596848807270362158305943012238 ## 15 0.0224999999999999991673327315311325946822762489318847656250000 ## 16 0.0000000000000000000000000000000000000000000000000000001113981 ## 17 0.0000000000000000000000000000000000000000000042613636511423543 ## 18 0.0000000000000000000000000000000000000000143583827581367797582 ## 19 0.0000013643475657859583439243233299320579021696175914257764816 ## 20 0.0007168131149851337830664066430585990019608289003372192382812 ## 21 0.0057840616966580975927270102943111851345747709274291992187500 ## 22 0.0000000000000001145696938456985277283312171491699972437340957 ## 23 0.0000000000000601936494687245644879201301829867522713872138307 ## 24 0.0000000000004857106754824595982789570016222239747178193725041 ## 25 0.0000043025960066369215722297848769617445441326708532869815826 ## 16 ## 1 0.0000013569558875775789074329515451755590049742750125005841255 ## 2 0.0000007107375915439390617206211891998535179482132662087678909 ## 3 0.0000001021268545377872649108357970722249508099821468931622803 ## 4 0.0017914012738853503543812184517491914448328316211700439453125 ## 5 0.0009382885903262112121600568848123202769784256815910339355469 ## 6 0.0001348239681125494701576655875996380018477793782949447631836 ## 7 0.0000000000004857106754824595982789570016222239747178193725041 ## 8 0.0000000000000601936494687245644879201301829867522713872138307 ## 9 0.0000000000000001145696938456985277283312171491699972437340957 ## 10 0.0057840616966580975927270102943111851345747709274291992187500 ## 11 0.0007168131149851337830664066430585990019608289003372192382812 ## 12 0.0000013643475657859583439243233299320579021696175914257764816 ## 13 0.0000000000000000000000000000000000000000143583827581367797582 ## 14 0.0000000000000000000000000000000000000000000042613636511423543 ## 15 0.0000000000000000000000000000000000000000000000000000001113981 ## 16 0.0224999999999999991673327315311325946822762489318847656250000 ## 17 0.0000066776797753472399274865707596848807270362158305943012238 ## 18 0.0000000000000001745640467031612522788968514235007086808448520 ## 19 0.0000000000004857106754824595982789570016222239747178193725041 ## 20 0.0000000000000601936494687245644879201301829867522713872138307 ## 21 0.0000000000000001145696938456985277283312171491699972437340957 ## 22 0.0057840616966580975927270102943111851345747709274291992187500 ## 23 0.0007168131149851337830664066430585990019608289003372192382812 ## 24 0.0000013643475657859583439243233299320579021696175914257764816 ## 25 0.0000000000277041296343146712529251226977817482328980691619336 ## 17 ## 1 0.000000710737591543939061720621189199853517948213266 ## 2 0.000001356955887577578907432951545175559004974275013 ## 3 0.000000710737591543939061720621189199853517948213266 ## 4 0.000938288590326211212160056884812320276978425681591 ## 5 0.001791401273885350354381218451749191444832831621170 ## 6 0.000938288590326211212160056884812320276978425681591 ## 7 0.000000000000060193649468724564487920130182986752271 ## 8 0.000000000000485710675482459598278957001622223974718 ## 9 0.000000000000060193649468724564487920130182986752271 ## 10 0.000716813114985133783066406643058599001960828900337 ## 11 0.005784061696658097592727010294311185134574770927429 ## 12 0.000716813114985133783066406643058599001960828900337 ## 13 0.000000000000000000000000000000000000000000004261364 ## 14 0.000000000000000000000000000000000000000014358382758 ## 15 0.000000000000000000000000000000000000000000004261364 ## 16 0.000006677679775347239927486570759684880727036215831 ## 17 0.022499999999999999167332731531132594682276248931885 ## 18 0.000006677679775347239927486570759684880727036215831 ## 19 0.000000000000060193649468724564487920130182986752271 ## 20 0.000000000000485710675482459598278957001622223974718 ## 21 0.000000000000060193649468724564487920130182986752271 ## 22 0.000716813114985133783066406643058599001960828900337 ## 23 0.005784061696658097592727010294311185134574770927429 ## 24 0.000716813114985133783066406643058599001960828900337 ## 25 0.000000000799034607694732358521092635550431282354111 ## 18 ## 1 0.0000001021268545377872649108357970722249508099821468931622803 ## 2 0.0000007107375915439390617206211891998535179482132662087678909 ## 3 0.0000013569558875775789074329515451755590049742750125005841255 ## 4 0.0001348239681125494701576655875996380018477793782949447631836 ## 5 0.0009382885903262112121600568848123202769784256815910339355469 ## 6 0.0017914012738853503543812184517491914448328316211700439453125 ## 7 0.0000000000000001145696938456985277283312171491699972437340957 ## 8 0.0000000000000601936494687245644879201301829867522713872138307 ## 9 0.0000000000004857106754824595982789570016222239747178193725041 ## 10 0.0000013643475657859583439243233299320579021696175914257764816 ## 11 0.0007168131149851337830664066430585990019608289003372192382812 ## 12 0.0057840616966580975927270102943111851345747709274291992187500 ## 13 0.0000000000000000000000000000000000000000000000000000001113981 ## 14 0.0000000000000000000000000000000000000000000042613636511423543 ## 15 0.0000000000000000000000000000000000000000143583827581367797582 ## 16 0.0000000000000001745640467031612522788968514235007086808448520 ## 17 0.0000066776797753472399274865707596848807270362158305943012238 ## 18 0.0224999999999999991673327315311325946822762489318847656250000 ## 19 0.0000000000000001145696938456985277283312171491699972437340957 ## 20 0.0000000000000601936494687245644879201301829867522713872138307 ## 21 0.0000000000004857106754824595982789570016222239747178193725041 ## 22 0.0000013643475657859583439243233299320579021696175914257764816 ## 23 0.0007168131149851337830664066430585990019608289003372192382812 ## 24 0.0057840616966580975927270102943111851345747709274291992187500 ## 25 0.0000000000277041296343146712529251226977817482328980691619336 ## 19 ## 1 0.0008330248056275453864480406984682758775306865572929382324219 ## 2 0.0006166745823446492802411000866413814947009086608886718750000 ## 3 0.0002501787346616134882250348514531879118294455111026763916016 ## 4 0.0000294798909060135976912316729814378390983620192855596542358 ## 5 0.0000218234790719545488843489344787940353853628039360046386719 ## 6 0.0000088535680510412586229854886576973171941062901169061660767 ## 7 0.0017914012738853503543812184517491914448328316211700439453125 ## 8 0.0009382885903262112121600568848123202769784256815910339355469 ## 9 0.0001348239681125494701576655875996380018477793782949447631836 ## 10 0.0000013569558875775789074329515451755590049742750125005841255 ## 11 0.0000007107375915439390617206211891998535179482132662087678909 ## 12 0.0000001021268545377872649108357970722249508099821468931622803 ## 13 0.0057840616966580975927270102943111851345747709274291992187500 ## 14 0.0007168131149851337830664066430585990019608289003372192382812 ## 15 0.0000013643475657859583439243233299320579021696175914257764816 ## 16 0.0000000000004857106754824595982789570016222239747178193725041 ## 17 0.0000000000000601936494687245644879201301829867522713872138307 ## 18 0.0000000000000001145696938456985277283312171491699972437340957 ## 19 0.0224999999999999991673327315311325946822762489318847656250000 ## 20 0.0000066776797753472399274865707596848807270362158305943012238 ## 21 0.0000000000000001745640467031612522788968514235007086808448520 ## 22 0.0000000000000000000000000000000000000000143583827581367797582 ## 23 0.0000000000000000000000000000000000000000000042613636511423543 ## 24 0.0000000000000000000000000000000000000000000000000000001113981 ## 25 0.0003308220230715012912144079582077438317355699837207794189453 ## 20 ## 1 0.000616674582344649280241100086641381494700908660889 ## 2 0.000833024805627545386448040698468275877530686557293 ## 3 0.000616674582344649280241100086641381494700908660889 ## 4 0.000021823479071954548884348934478794035385362803936 ## 5 0.000029479890906013597691231672981437839098362019286 ## 6 0.000021823479071954548884348934478794035385362803936 ## 7 0.000938288590326211212160056884812320276978425681591 ## 8 0.001791401273885350354381218451749191444832831621170 ## 9 0.000938288590326211212160056884812320276978425681591 ## 10 0.000000710737591543939061720621189199853517948213266 ## 11 0.000001356955887577578907432951545175559004974275013 ## 12 0.000000710737591543939061720621189199853517948213266 ## 13 0.000716813114985133783066406643058599001960828900337 ## 14 0.005784061696658097592727010294311185134574770927429 ## 15 0.000716813114985133783066406643058599001960828900337 ## 16 0.000000000000060193649468724564487920130182986752271 ## 17 0.000000000000485710675482459598278957001622223974718 ## 18 0.000000000000060193649468724564487920130182986752271 ## 19 0.000006677679775347239927486570759684880727036215831 ## 20 0.022499999999999999167332731531132594682276248931885 ## 21 0.000006677679775347239927486570759684880727036215831 ## 22 0.000000000000000000000000000000000000000000004261364 ## 23 0.000000000000000000000000000000000000000014358382758 ## 24 0.000000000000000000000000000000000000000000004261364 ## 25 0.000788476060127118755921360460092728317249566316605 ## 21 ## 1 0.0002501787346616134882250348514531879118294455111026763916016 ## 2 0.0006166745823446492802411000866413814947009086608886718750000 ## 3 0.0008330248056275453864480406984682758775306865572929382324219 ## 4 0.0000088535680510412586229854886576973171941062901169061660767 ## 5 0.0000218234790719545488843489344787940353853628039360046386719 ## 6 0.0000294798909060135976912316729814378390983620192855596542358 ## 7 0.0001348239681125494701576655875996380018477793782949447631836 ## 8 0.0009382885903262112121600568848123202769784256815910339355469 ## 9 0.0017914012738853503543812184517491914448328316211700439453125 ## 10 0.0000001021268545377872649108357970722249508099821468931622803 ## 11 0.0000007107375915439390617206211891998535179482132662087678909 ## 12 0.0000013569558875775789074329515451755590049742750125005841255 ## 13 0.0000013643475657859583439243233299320579021696175914257764816 ## 14 0.0007168131149851337830664066430585990019608289003372192382812 ## 15 0.0057840616966580975927270102943111851345747709274291992187500 ## 16 0.0000000000000001145696938456985277283312171491699972437340957 ## 17 0.0000000000000601936494687245644879201301829867522713872138307 ## 18 0.0000000000004857106754824595982789570016222239747178193725041 ## 19 0.0000000000000001745640467031612522788968514235007086808448520 ## 20 0.0000066776797753472399274865707596848807270362158305943012238 ## 21 0.0224999999999999991673327315311325946822762489318847656250000 ## 22 0.0000000000000000000000000000000000000000000000000000001113981 ## 23 0.0000000000000000000000000000000000000000000042613636511423543 ## 24 0.0000000000000000000000000000000000000000143583827581367797582 ## 25 0.0003308220230715012912144079582077438317355699837207794189453 ## 22 ## 1 0.0000294798909060135976912316729814378390983620192855596542358 ## 2 0.0000218234790719545488843489344787940353853628039360046386719 ## 3 0.0000088535680510412586229854886576973171941062901169061660767 ## 4 0.0008330248056275453864480406984682758775306865572929382324219 ## 5 0.0006166745823446492802411000866413814947009086608886718750000 ## 6 0.0002501787346616134882250348514531879118294455111026763916016 ## 7 0.0000013569558875775789074329515451755590049742750125005841255 ## 8 0.0000007107375915439390617206211891998535179482132662087678909 ## 9 0.0000001021268545377872649108357970722249508099821468931622803 ## 10 0.0017914012738853503543812184517491914448328316211700439453125 ## 11 0.0009382885903262112121600568848123202769784256815910339355469 ## 12 0.0001348239681125494701576655875996380018477793782949447631836 ## 13 0.0000000000004857106754824595982789570016222239747178193725041 ## 14 0.0000000000000601936494687245644879201301829867522713872138307 ## 15 0.0000000000000001145696938456985277283312171491699972437340957 ## 16 0.0057840616966580975927270102943111851345747709274291992187500 ## 17 0.0007168131149851337830664066430585990019608289003372192382812 ## 18 0.0000013643475657859583439243233299320579021696175914257764816 ## 19 0.0000000000000000000000000000000000000000143583827581367797582 ## 20 0.0000000000000000000000000000000000000000000042613636511423543 ## 21 0.0000000000000000000000000000000000000000000000000000001113981 ## 22 0.0224999999999999991673327315311325946822762489318847656250000 ## 23 0.0000066776797753472399274865707596848807270362158305943012238 ## 24 0.0000000000000001745640467031612522788968514235007086808448520 ## 25 0.0000150820313937664238202168015545723278592049609869718551636 ## 23 ## 1 0.000021823479071954548884348934478794035385362803936 ## 2 0.000029479890906013597691231672981437839098362019286 ## 3 0.000021823479071954548884348934478794035385362803936 ## 4 0.000616674582344649280241100086641381494700908660889 ## 5 0.000833024805627545386448040698468275877530686557293 ## 6 0.000616674582344649280241100086641381494700908660889 ## 7 0.000000710737591543939061720621189199853517948213266 ## 8 0.000001356955887577578907432951545175559004974275013 ## 9 0.000000710737591543939061720621189199853517948213266 ## 10 0.000938288590326211212160056884812320276978425681591 ## 11 0.001791401273885350354381218451749191444832831621170 ## 12 0.000938288590326211212160056884812320276978425681591 ## 13 0.000000000000060193649468724564487920130182986752271 ## 14 0.000000000000485710675482459598278957001622223974718 ## 15 0.000000000000060193649468724564487920130182986752271 ## 16 0.000716813114985133783066406643058599001960828900337 ## 17 0.005784061696658097592727010294311185134574770927429 ## 18 0.000716813114985133783066406643058599001960828900337 ## 19 0.000000000000000000000000000000000000000000004261364 ## 20 0.000000000000000000000000000000000000000014358382758 ## 21 0.000000000000000000000000000000000000000000004261364 ## 22 0.000006677679775347239927486570759684880727036215831 ## 23 0.022499999999999999167332731531132594682276248931885 ## 24 0.000006677679775347239927486570759684880727036215831 ## 25 0.000035946278853086757667113088077215365956362802535 ## 24 25 ## 1 0.0000088535680510412586229854886576973171941062901169061660767 0.0001632912431678741887065 ## 2 0.0000218234790719545488843489344787940353853628039360046386719 0.0006493360576447230114380 ## 3 0.0000294798909060135976912316729814378390983620192855596542358 0.0001632912431678741887065 ## 4 0.0002501787346616134882250348514531879118294455111026763916016 0.0000012061013013676200694 ## 5 0.0006166745823446492802411000866413814947009086608886718750000 0.0000047961240845296059014 ## 6 0.0008330248056275453864480406984682758775306865572929382324219 0.0000012061013013676200694 ## 7 0.0000001021268545377872649108357970722249508099821468931622803 0.0000000071885934411270753 ## 8 0.0000007107375915439390617206211891998535179482132662087678909 0.0000045297069081992705173 ## 9 0.0000013569558875775789074329515451755590049742750125005841255 0.0000000071885934411270753 ## 10 0.0001348239681125494701576655875996380018477793782949447631836 0.0000000000000000008000712 ## 11 0.0009382885903262112121600568848123202769784256815910339355469 0.0000000000000005041442242 ## 12 0.0017914012738853503543812184517491914448328316211700439453125 0.0000000000000000008000712 ## 13 0.0000000000000001145696938456985277283312171491699972437340957 0.0000043025960066369215722 ## 14 0.0000000000000601936494687245644879201301829867522713872138307 0.0001240942472335887123650 ## 15 0.0000000000004857106754824595982789570016222239747178193725041 0.0000043025960066369215722 ## 16 0.0000013643475657859583439243233299320579021696175914257764816 0.0000000000277041296343147 ## 17 0.0007168131149851337830664066430585990019608289003372192382812 0.0000000007990346076947324 ## 18 0.0057840616966580975927270102943111851345747709274291992187500 0.0000000000277041296343147 ## 19 0.0000000000000000000000000000000000000000000000000000001113981 0.0003308220230715012912144 ## 20 0.0000000000000000000000000000000000000000000042613636511423543 0.0007884760601271187559214 ## 21 0.0000000000000000000000000000000000000000143583827581367797582 0.0003308220230715012912144 ## 22 0.0000000000000001745640467031612522788968514235007086808448520 0.0000150820313937664238202 ## 23 0.0000066776797753472399274865707596848807270362158305943012238 0.0000359462788530867576671 ## 24 0.0224999999999999991673327315311325946822762489318847656250000 0.0000150820313937664238202 ## 25 0.0000150820313937664238202168015545723278592049609869718551636 0.0224999999999999991673327 lambda=solve(sigma)%*%sigma0[25,-25] lambda ## [,1] ## 1 0.00758872879 ## 2 0.03051466481 ## 3 0.00758872879 ## 4 -0.00003276782 ## 5 0.00011662647 ## 6 -0.00003276782 ## 7 -0.00421288727 ## 8 -0.01073643525 ## 9 -0.00421288727 ## 10 -0.00005666790 ## 11 -0.00009187561 ## 12 -0.00005666790 ## 13 -0.00554359594 ## 14 -0.00485786885 ## 15 -0.00554359594 ## 16 -0.00022122643 ## 17 -0.00045970408 ## 18 -0.00022122643 ## 19 0.01587928193 ## 20 0.03629635060 ## 21 0.01587928193 ## 22 0.00070649170 ## 23 0.00168519595 ## 24 0.00070649170 z_pred0=t(lambda)%*%datos1[,4] z_pred0 ## [,1] ## [1,] -0.000009141833 VarErropred0=sigma[1,1]-t(sigma0[25,-25])%*%solve(sigma)%*%sigma0[25,-25] VarErropred0 ## [,1] ## [1,] 0.0224392 5.3 Algunas funciones de covarianza espacio temporal no separables ##Funciones de covarianza espacio temporal p vector de parámetros para cada modelo exp_esp_temp=function(h,u,p){ ((p[1])^2)*exp(-h/p[2]-u/p[3])} gauss_esp_temp=function(h,u,p){ (p[1]^2)*exp(-(h/p[2])^2-(u/p[3])^2)} cressie1=function(h,u,p){ (p[1]^2/((p[2]^2*u^2+1)))*exp(-(p[3]^2*h^2)/(p[2]^2*u^2+1))} Gneiting1=function(h,u,p){ p[1]^2/((p[2]*u^(2*p[3])+1)^(p[4]))*exp(-(p[6]*h^(2*p[5]))/((p[2]*u^(2*p[3])+1)^(p[4]*p[5])))} Gneiting2=function(h,u,sigma,p){ p[1]^2/((2^(p[3]-1))*p[7](p[3])*(p[2]*u^(2*p[3])+1)^(p[4]+p[5]))* (((p[6]*h)/((p[2]*u^(2*p[3])+1)^(p[5]/2)))^p[3])* besselK(((p[6]*h)/((p[2]*u^(2*p[3])+1)^(p[5]/2))),p[3])} Iaco_Cesare=function(h,u,a,b,c){ (1+h^p[1]+u^p[2])^(-p[3])} 5.3.1 C R E S S I E - H U A N G (1999) #sigma:desviacion estandar, a es el parámetros de escala del tiempo, b es el parámetros de escala del espacio, d es la dimensión espacial; a,b positivos CH_1=function(h,u,p,d){ (p[1]^2/((p[2]^2*u^2+1)^(d/2)))*exp(-(p[3]^2*h^2)/(p[2]^2*u^2+1))} CH_2=function(h,u,p,d){ (p[1]^2/((p[2]*abs(u)+1)^(d/2)))*exp(-(p[3]^2*h^2)/(p[2]*abs(u)+1))} CH_3=function(h,u,p,d){ p[1]^2*((p[2]^2)*(u^2)+1)/(((p[2]^2)*(u^2)+1)^2+(p[3]^2)*h^2)^((d+1)/2)} CH_4=function(h,u,p,d){ p[1]^2*(p[2]*abs(u)+1)/((p[2]*abs(u)+1)^2+(p[3]^2)*h^2)^((d+1)/2)} #el caso mas general de C R E S S I E - H U A N G (1999) es cuando d=2, entonces queda CH_1=function(h,u,p){ (p[1]^2/((p[2]^2*u^2+1)))*exp(-(p[3]^2*h^2)/(p[2]^2*u^2+1))} CH_2=function(h,u,p){ (p[1]^2/((p[2]*abs(u)+1)))*exp(-(p[3]^2*h^2)/(p[2]*abs(u)+1))} CH_3=function(h,u,p){ p[1]^2*((p[2]^2)*(u^2)+1)/(((p[2]^2)*(u^2)+1)^2+(p[3]^2)*h^2)^((3)/2)} CH_4=function(h,u,p){ p[1]^2*(p[2]*abs(u)+1)/((p[2]*abs(u)+1)^2+(p[3]^2)*h^2)^((3)/2)} 5.3.2 Gneiting (2002), combina fun1, fun2 y psi en Gneiting #fun1 phi1=function(r,c,gama,v){ v*exp(-c*r^gama)} #c&gt;0, 0&lt;gama&lt;=1, siempre v=1 phi2=function(r,c,gama,v){ ((2^(v-1))*gamma(v))^(-1)*(c*r^0.5)^v*besselK(c*r^0.5,v)} #c&gt;0, v&gt;0 phi3=function(r,c,gama,v){ (1+c*r^gama)^(-v)} #c&gt;0, 0&lt;gama&lt;=1, v&gt;0 phi4=function(r,c,gama,v){ gama*(2^v)*(exp(c*r^0.5)+exp(-c*r^0.5))^(-v)} #c&gt;0, v&gt;0, siempre gama=1 #fun2 psi1=function(r,a,alpha,beta){ (a*r^alpha+1)^beta} #a&gt;0, 0&lt;alpha&lt;=1, 0&lt;=beta&lt;=1 psi2=function(r,a,alpha,beta){ log(a*r^alpha+beta)/log(beta)} #a&gt;0, beta&gt;1, 0&lt;alpha&lt;=1 psi3=function(r,a,alpha,beta){ (a*r^alpha+beta)/(beta*(a*r^alpha+1))} #a&gt;0, 0&lt;beta&lt;=1 0&lt;alpha&lt;=1 #Cualquier combinación genera una función de covarianza válida Gneiting=function(h,u,sigma,d,a,alpha,beta,c,gama,v,psi,phi){ (sigma^2/(psi((abs(u)^2),a,alpha,beta))^(d/2))*phi(h^2/(psi(abs(u)^2,a,alpha,beta)),c,gama,v)} #el caso mas general de Gneiting (2002) es cuando d=2, entonces queda Gneiting=function(h,u,sigma,a,alpha,beta,c,gama,v,psi,phi){ (sigma^2/(psi((abs(u)^2),a,alpha,beta)))*phi(h^2/(psi(abs(u)^2,a,alpha,beta)),c,gama,v)} ####IACO_CESSARE C_IACO_CESSARE=function(h,u,sigma,a,b,alpha,beta,gama){ (1 + (h/a)^alpha + (u/b)^beta)^(-gama)} #(Porcu, 2007) Basado en la función de supervivencia de Dagum #función de Dagum Dagum=function(r,lambda,theta,epsilon){ 1-1/(1+lambda*r^(-theta))^epsilon} #lamdba, theta in (0,7), epsilon in (0,7) Dagumm=function(r,lambda,theta,epsilon){ ifelse(r==0,1,Dagum(r,lambda,theta,epsilon))} Porcu_sep=function(h,u,lambda_h,theta_h,epsilon_h,lambda_u,theta_u,epsilon_u){ Dagumm(h,lambda_h,theta_h,epsilon_h)*Dagumm(u,lambda_u,theta_u,epsilon_u)} Porcu_Nsep=function(h,u,lambda_h,theta_h,epsilon_h,lambda_u,theta_u,epsilon_u,vartheta){ vartheta*Dagumm(h,lambda_h,theta_h,epsilon_h)+(1-vartheta)*Dagumm(u,lambda_u,theta_u,epsilon_u)} "],["pulimiento-de-medianas.html", "Chapter 6 Pulimiento de medianas 6.1 Cargar librerias 6.2 Grilla de las ubicaciones espaciales. 6.3 Definición de objeto VGM 6.4 Matriz de varianza dadas coordenadas. 6.5 Simulación. 6.6 Pulimiento de medianas", " Chapter 6 Pulimiento de medianas Esta es una alternativa al modelamiento de la media cuando los modelos de regresión polinómicos usuales no logran el objetivo de eliminar la tendencia ya sea porque el tipo de tendencia corresponde mas a unas ventanas móviles o porque hay presentes datos atípicos. 6.1 Cargar librerias Lista de librerías con link a la documentación. rm(list=ls()) library(gstat) library(sp) library(mvtnorm) gstat sp 6.2 Grilla de las ubicaciones espaciales. n_x &lt;- 4 n_y &lt;- 6 x &lt;- seq(0, 1, len = n_x) y &lt;- seq(0, 1, len = n_y) coordenadas &lt;- as.data.frame(expand.grid(x, y)) names(coordenadas) &lt;- c(&quot;X&quot;, &quot;Y&quot;) Encabezado coordenadas X Y 0.0000000 0.0 0.3333333 0.0 0.6666667 0.0 1.0000000 0.0 0.0000000 0.2 0.3333333 0.2 6.3 Definición de objeto VGM Esto define un objeto vgm que es el tipo de objeto que usa el paquete gstat para los modelos teóricos de variograma. Con este objeto se pueden definir modelos anidados. vgm vario &lt;- vgm(10, # Punto de silla &quot;Exp&quot;, # Modelo, ver documentación 0.5) # Rango print(vario) ## model psill range ## 1 Exp 10 0.5 6.4 Matriz de varianza dadas coordenadas. vgmArea coordinates coordinates(coordenadas) &lt;- ~X + Y class(coordenadas) # Cambio de objedto dataframe a sp ## [1] &quot;SpatialPoints&quot; ## attr(,&quot;package&quot;) ## [1] &quot;sp&quot; cov_mat &lt;- vgmArea(coordenadas, # Matriz de ubiaciones SP vgm = vario) # VGM object print(dim(cov_mat)) ## [1] 24 24 6.5 Simulación. Simulación dada la media y la matriz de varianza mu &lt;- rep(0, n_x * n_y) # Media del proceso simu &lt;- rmvnorm(1, mean = mu, sigma = cov_mat) print(simu[1:5]) ## [1] -2.36226926 -4.99201481 -3.02799557 -0.07277686 -0.68707337 6.6 Pulimiento de medianas Unir las coordenadas con la columna de simulación data &lt;- as.data.frame(cbind(coordenadas@coords, Simula = t(simu))) names(data) &lt;- c(&quot;X&quot;, &quot;Y&quot;, &quot;Var&quot;) print(head(data)) ## X Y Var ## 1 0.0000000 0.0 -2.36226926 ## 2 0.3333333 0.0 -4.99201481 ## 3 0.6666667 0.0 -3.02799557 ## 4 1.0000000 0.0 -0.07277686 ## 5 0.0000000 0.2 -0.68707337 ## 6 0.3333333 0.2 -3.06398000 Reshape para matriz, esto transforma la tabla de datos en matriz tabla &lt;- reshape2::dcast(data, X ~ Y, value.var = &quot;Var&quot;) rownames(tabla) &lt;- tabla[, 1] tabla &lt;- tabla[, c(-1)] print(tabla) ## 0 0.2 0.4 0.6 0.8 1 ## 0 -2.36226926 -0.6870734 -1.1832368 -4.4055777 -3.9870467 -2.278700 ## 0.333333333333333 -4.99201481 -3.0639800 -1.2569380 -0.4888374 -5.8148815 -5.472106 ## 0.666666666666667 -3.02799557 -2.8541614 1.1192821 -1.3320332 1.1554883 1.740054 ## 1 -0.07277686 -1.7498092 0.1438912 -1.5373774 -0.4834592 -0.381242 Pulimiento de medianas de la tabla med &lt;- medpolish(tabla) ## 1: 26.85827 ## Final: 26.83963 geo_data &lt;- reshape2::melt(med$residuals) print(med) ## ## Median Polish Results (Dataset: &quot;tabla&quot;) ## ## Overall: -1.712201 ## ## Row Effects: ## 0 0.333333333333333 0.666666666666667 1 ## -0.972528 -2.315797 1.257959 0.972528 ## ## Column Effects: ## 0 0.2 0.4 0.6 0.8 1 ## -0.32077896 -0.02305949 1.53750781 -0.83774811 -0.52305218 0.38222999 ## ## Residuals: ## 0 0.2 0.4 0.6 0.8 1 ## 0 0.64324 2.02071 -0.036016 -0.883101 -0.77927 0.023799 ## 0.333333333333333 -0.64324 0.98708 1.233552 4.376908 -1.26383 -1.826338 ## 0.666666666666667 -2.25297 -2.37686 0.036016 -0.040044 2.13278 1.812066 ## 1 0.98767 -0.98708 -0.653944 0.040044 0.77927 -0.023799 Reshape de los datos, con efecto de la fila y la columna tabla_residuales &lt;- as.data.frame(med$residuals) names(tabla_residuales) &lt;- med$col rownames(tabla_residuales) &lt;- med$row geo_data &lt;- reshape2::melt(as.matrix(tabla_residuales)) geo_data &lt;- cbind(data, geo_data, med$overall) names(geo_data) &lt;- c(&quot;X&quot;, &quot;Y&quot;, &quot;Var&quot;, &quot;Efecto fila&quot;, &quot;Efecto columa&quot;, &quot;Residual&quot;, &quot;Efecto Global&quot;) print(geo_data) ## X Y Var Efecto fila Efecto columa Residual Efecto Global ## 1 0.0000000 0.0 -2.36226926 -0.972528 -0.32077896 0.64323844 -1.712201 ## 2 0.3333333 0.0 -4.99201481 -2.315797 -0.32077896 -0.64323844 -1.712201 ## 3 0.6666667 0.0 -3.02799557 1.257959 -0.32077896 -2.25297500 -1.712201 ## 4 1.0000000 0.0 -0.07277686 0.972528 -0.32077896 0.98767493 -1.712201 ## 5 0.0000000 0.2 -0.68707337 -0.972528 -0.02305949 2.02071486 -1.712201 ## 6 0.3333333 0.2 -3.06398000 -2.315797 -0.02305949 0.98707690 -1.712201 ## 7 0.6666667 0.2 -2.85416144 1.257959 -0.02305949 -2.37686033 -1.712201 ## 8 1.0000000 0.2 -1.74980921 0.972528 -0.02305949 -0.98707690 -1.712201 ## 9 0.0000000 0.4 -1.18323684 -0.972528 1.53750781 -0.03601591 -1.712201 ## 10 0.3333333 0.4 -1.25693801 -2.315797 1.53750781 1.23355159 -1.712201 ## 11 0.6666667 0.4 1.11928211 1.257959 1.53750781 0.03601591 -1.712201 ## 12 1.0000000 0.4 0.14389117 0.972528 1.53750781 -0.65394382 -1.712201 ## 13 0.0000000 0.6 -4.40557766 -0.972528 -0.83774811 -0.88310081 -1.712201 ## 14 0.3333333 0.6 -0.48883741 -2.315797 -0.83774811 4.37690811 -1.712201 ## 15 0.6666667 0.6 -1.33203323 1.257959 -0.83774811 -0.04004350 -1.712201 ## 16 1.0000000 0.6 -1.53737743 0.972528 -0.83774811 0.04004350 -1.712201 ## 17 0.0000000 0.8 -3.98704673 -0.972528 -0.52305218 -0.77926581 -1.712201 ## 18 0.3333333 0.8 -5.81488153 -2.315797 -0.52305218 -1.26383194 -1.712201 ## 19 0.6666667 0.8 1.15548828 1.257959 -0.52305218 2.13278207 -1.712201 ## 20 1.0000000 0.8 -0.48345919 0.972528 -0.52305218 0.77926581 -1.712201 ## 21 0.0000000 1.0 -2.27869957 -0.972528 0.38222999 0.02379918 -1.712201 ## 22 0.3333333 1.0 -5.47210551 -2.315797 0.38222999 -1.82633809 -1.712201 ## 23 0.6666667 1.0 1.74005392 1.257959 0.38222999 1.81206554 -1.712201 ## 24 1.0000000 1.0 -0.38124201 0.972528 0.38222999 -0.02379918 -1.712201 Validación de la descomposición valida &lt;- cbind(geo_data$Var, geo_data[[&quot;Efecto fila&quot;]] + geo_data[[&quot;Efecto columa&quot;]] + geo_data[[&quot;Residual&quot;]] + geo_data[[&quot;Efecto Global&quot;]]) valida &lt;- as.data.frame(valida) names(valida) &lt;- c(&quot;datos&quot;, &quot;suma&quot;) print(valida) ## datos suma ## 1 -2.36226926 -2.36226926 ## 2 -4.99201481 -4.99201481 ## 3 -3.02799557 -3.02799557 ## 4 -0.07277686 -0.07277686 ## 5 -0.68707337 -0.68707337 ## 6 -3.06398000 -3.06398000 ## 7 -2.85416144 -2.85416144 ## 8 -1.74980921 -1.74980921 ## 9 -1.18323684 -1.18323684 ## 10 -1.25693801 -1.25693801 ## 11 1.11928211 1.11928211 ## 12 0.14389117 0.14389117 ## 13 -4.40557766 -4.40557766 ## 14 -0.48883741 -0.48883741 ## 15 -1.33203323 -1.33203323 ## 16 -1.53737743 -1.53737743 ## 17 -3.98704673 -3.98704673 ## 18 -5.81488153 -5.81488153 ## 19 1.15548828 1.15548828 ## 20 -0.48345919 -0.48345919 ## 21 -2.27869957 -2.27869957 ## 22 -5.47210551 -5.47210551 ## 23 1.74005392 1.74005392 ## 24 -0.38124201 -0.38124201 "],["introducción-proceso-espacial-bivariado.html", "Chapter 7 Introducción proceso espacial bivariado 7.1 Librerías 7.2 Ubicaciones: En este caso se supone que ambos procesos están observados en los mismos lugares 7.3 Modelo lineal de coregionalización 7.4 Simulación de un proceso espacial Gaussiano bivariado", " Chapter 7 Introducción proceso espacial bivariado Martha Bohorquez 19/5/2022 7.1 Librerías rm(list=ls()) library(geoR) ## -------------------------------------------------------------- ## Analysis of Geostatistical Data ## For an Introduction to geoR go to http://www.leg.ufpr.br/geoR ## geoR version 1.9-2 (built on 2022-08-09) is now loaded ## -------------------------------------------------------------- library(mvtnorm) 7.2 Ubicaciones: En este caso se supone que ambos procesos están observados en los mismos lugares x=seq(0,1,len=3) y=seq(0,1,len=4) coordenadas=expand.grid(x,y) Mat_dist=as.matrix(dist(coordenadas)) 7.3 Modelo lineal de coregionalización Cova1=function(h,a){exp(-h/a)} Cova2=function(h,a){ifelse(h &lt;= a, 1-1.5*(h/a)+0.5*(h/a)^3, 0)} B1=matrix(c(26.3,0.3,0.3,2.1),nrow=2,byrow=T) B2=matrix(c(2.1,1.3,1.3,17.5),nrow=2,byrow=T) Mat_Cov_bloque11=B1[1,1]*Cova1(Mat_dist,1)+B2[1,1]*Cova2(Mat_dist,0.5) Mat_Cov_bloque22=B1[2,2]*Cova1(Mat_dist,1)+B2[2,2]*Cova2(Mat_dist,0.5) Mat_Cov_bloque12=B1[1,2]*Cova1(Mat_dist,1)+B2[1,2]*Cova2(Mat_dist,0.5) Mat_Cov_bloque21=B1[2,1]*Cova1(Mat_dist,1)+B2[2,1]*Cova2(Mat_dist,0.5) MAT_COV=rbind(cbind(Mat_Cov_bloque11,Mat_Cov_bloque12),cbind(Mat_Cov_bloque21,Mat_Cov_bloque22)) dim(MAT_COV) ## [1] 24 24 det(MAT_COV) ## [1] 349416576425414152341717778432 7.4 Simulación de un proceso espacial Gaussiano bivariado sim1=rmvnorm(1,mean=rep(0,2*nrow(coordenadas)), sigma=MAT_COV) datos=cbind(coordenadas,z1=sim1[1:12],z2=sim1[13:24]) "],["geoestadística-con-sgeostat.html", "Chapter 8 Geoestadística con sgeostat 8.1 Data Load 8.2 Libraries 8.3 Including Plots", " Chapter 8 Geoestadística con sgeostat 8.1 Data Load rm(list=ls()) aquifer=read.table(&quot;data_7_GeoestadisticaGEOSTAT/aquifer.txt&quot;,head=T,dec=&quot;,&quot;) head(aquifer) ## Este Norte Profundidad ## 1 42.78275 127.62282 1464 ## 2 -27.39691 90.78732 2553 ## 3 -1.16289 84.89600 2158 ## 4 -18.61823 76.45199 2455 ## 5 96.46549 64.58058 1756 ## 6 108.56243 82.92325 1702 8.2 Libraries library(scatterplot3d) library(ggplot2) library(cowplot) library(sgeostat) ## Registered S3 method overwritten by &#39;sgeostat&#39;: ## method from ## plot.variogram geoR ## ## Attaching package: &#39;sgeostat&#39; ## The following objects are masked from &#39;package:gstat&#39;: ## ## fit.variogram, krige 8.3 Including Plots g1=ggplot(aquifer, aes(Profundidad, Este)) + geom_point() + geom_line() + xlab(&quot;Este&quot;) + ylab(&quot;Profundidad&quot;) g2=ggplot(aquifer, aes(Profundidad, Norte)) + geom_point() + geom_line() + xlab(&quot;Norte&quot;) + ylab(&quot;Profundidad&quot;) g3=ggplot(aquifer, aes(Profundidad, Este*Norte)) + geom_point() + geom_line() + xlab(&quot;Interacción este,norte&quot;) + ylab(&quot;Profundidad&quot;) plot_grid(g1,g2,g3) cor(aquifer) ## Este Norte Profundidad ## Este 1.0000000 0.1147565 -0.7788885 ## Norte 0.1147565 1.0000000 -0.6200923 ## Profundidad -0.7788885 -0.6200923 1.0000000 scatterplot3d(aquifer, highlight.3d=TRUE, col.axis=&quot;blue&quot;, col.grid=&quot;lightblue&quot;, main=&quot;Tendencia de Profundidad&quot;, pch=20) reg1 &lt;- lm(Profundidad ~ Este + Norte, data = aquifer) residuales1 &lt;- residuals(reg1) summary(reg1) ## ## Call: ## lm(formula = Profundidad ~ Este + Norte, data = aquifer) ## ## Residuals: ## Min 1Q Median 3Q Max ## -366.96 -161.53 -30.71 148.15 651.20 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 2591.4302 38.9599 66.52 &lt;0.0000000000000002 *** ## Este -6.7514 0.3438 -19.64 &lt;0.0000000000000002 *** ## Norte -5.9872 0.4066 -14.73 &lt;0.0000000000000002 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 203.3 on 82 degrees of freedom ## Multiple R-squared: 0.8921, Adjusted R-squared: 0.8894 ## F-statistic: 338.9 on 2 and 82 DF, p-value: &lt; 0.00000000000000022 anova(reg1) ## Analysis of Variance Table ## ## Response: Profundidad ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Este 1 19045642 19045642 460.95 &lt; 0.00000000000000022 *** ## Norte 1 8960172 8960172 216.86 &lt; 0.00000000000000022 *** ## Residuals 82 3388069 41318 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 reg2 &lt;- lm(Profundidad ~ Este*Norte, data = aquifer) residuales2 &lt;- residuals(reg2) summary(reg2) ## ## Call: ## lm(formula = Profundidad ~ Este * Norte, data = aquifer) ## ## Residuals: ## Min 1Q Median 3Q Max ## -406.30 -138.88 -13.04 129.36 722.48 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 2627.069474 38.325720 68.546 &lt; 0.0000000000000002 *** ## Este -8.287218 0.565845 -14.646 &lt; 0.0000000000000002 *** ## Norte -6.648559 0.432667 -15.366 &lt; 0.0000000000000002 *** ## Este:Norte 0.024524 0.007401 3.314 0.00138 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 191.9 on 81 degrees of freedom ## Multiple R-squared: 0.905, Adjusted R-squared: 0.9014 ## F-statistic: 257.1 on 3 and 81 DF, p-value: &lt; 0.00000000000000022 anova(reg2) ## Analysis of Variance Table ## ## Response: Profundidad ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Este 1 19045642 19045642 517.06 &lt; 0.00000000000000022 *** ## Norte 1 8960172 8960172 243.25 &lt; 0.00000000000000022 *** ## Este:Norte 1 404448 404448 10.98 0.001379 ** ## Residuals 81 2983621 36835 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 reg3 &lt;- lm(Profundidad ~ Este*Norte+I(Este^2)*I(Norte^2), data = aquifer) residuales3 &lt;- residuals(reg3) summary(reg3) ## ## Call: ## lm(formula = Profundidad ~ Este * Norte + I(Este^2) * I(Norte^2), ## data = aquifer) ## ## Residuals: ## Min 1Q Median 3Q Max ## -372.7 -133.6 -20.3 129.9 505.1 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 2537.5624340948 70.3799189709 36.055 &lt;0.0000000000000002 *** ## Este -7.7283066535 0.6027554102 -12.822 &lt;0.0000000000000002 *** ## Norte -3.0747325957 1.7697466886 -1.737 0.0863 . ## I(Este^2) -0.0067922127 0.0059674654 -1.138 0.2585 ## I(Norte^2) -0.0237215094 0.0090487081 -2.622 0.0105 * ## Este:Norte 0.0115491188 0.0096804349 1.193 0.2365 ## I(Este^2):I(Norte^2) 0.0000022515 0.0000009541 2.360 0.0208 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 180.7 on 78 degrees of freedom ## Multiple R-squared: 0.9189, Adjusted R-squared: 0.9126 ## F-statistic: 147.2 on 6 and 78 DF, p-value: &lt; 0.00000000000000022 anova(reg3) ## Analysis of Variance Table ## ## Response: Profundidad ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Este 1 19045642 19045642 583.2335 &lt; 0.00000000000000022 *** ## Norte 1 8960172 8960172 274.3868 &lt; 0.00000000000000022 *** ## I(Este^2) 1 55368 55368 1.6955 0.1967061 ## I(Norte^2) 1 152170 152170 4.6599 0.0339500 * ## Este:Norte 1 451567 451567 13.8283 0.0003755 *** ## I(Este^2):I(Norte^2) 1 181854 181854 5.5689 0.0207829 * ## Residuals 78 2547110 32655 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 aquifer=data.frame(aquifer,resi=residuales2) aquifer_points=point(aquifer, x=&quot;Este&quot;, y=&quot;Norte&quot;) aquifer_pair=pair(aquifer_points,num.lags=10) ## .................................................................................... aquifer_pair$bins ## [1] 13.55308 40.65923 67.76539 94.87154 121.97770 149.08385 176.19001 203.29616 230.40231 257.50847 aquifer_pair$dist ## [1] 79.259313 61.292744 79.928307 82.801936 79.529981 84.514408 100.208558 107.152008 89.978304 104.178541 ## [11] 99.251058 88.899718 87.945051 70.165987 101.674210 112.872165 120.961308 119.047906 32.754634 46.156920 ## [21] 27.689647 74.010375 65.729277 107.885946 23.229828 87.355532 98.880862 107.581460 104.100879 104.150438 ## [31] 52.285133 71.583372 76.011219 87.033342 51.194751 129.805262 135.555137 122.851465 125.340545 49.219772 ## [41] 119.707807 119.905108 123.155773 112.001822 114.916408 115.460198 103.829256 104.179897 113.250471 96.543519 ## [51] 97.566287 96.700258 82.781495 63.156546 64.218322 65.835477 24.567616 35.106924 54.832521 45.809186 ## [61] 40.330280 56.110555 43.935695 46.519216 45.713177 50.431563 50.801512 61.124807 55.902846 44.604704 ## [71] 62.449544 185.852432 212.770561 123.323713 143.256052 141.135610 169.641608 148.183229 143.187705 166.176744 ## [81] 149.417056 150.251941 166.077707 163.208576 26.887385 16.809727 126.604452 136.186584 120.744768 128.246553 ## [91] 133.677383 129.683492 130.511843 129.585165 130.769649 94.037999 23.325651 105.307950 123.522448 133.049760 ## [101] 131.853495 97.723076 103.926618 93.928059 79.959358 72.440973 147.319592 99.601194 54.101819 55.632916 ## [111] 65.873035 62.225650 62.421578 91.321524 85.948043 81.564157 68.656804 129.954829 75.968082 81.463104 ## [121] 69.079720 74.315712 101.967004 145.128267 145.470767 148.443085 60.943426 61.309844 61.953184 55.477879 ## [131] 53.875066 81.957351 106.216568 112.476289 109.958325 60.835750 47.647137 41.488835 46.622184 68.602648 ## [141] 50.302378 25.536379 116.404782 113.601262 129.467598 121.021665 123.665659 117.773861 122.244383 123.329873 ## [151] 35.035312 47.569309 123.256491 138.745457 109.244082 133.512160 46.681150 67.213847 63.044705 93.401359 ## [161] 69.021050 65.844134 87.119306 71.711292 71.623479 87.607834 85.955074 19.390467 99.719691 109.743053 ## [171] 93.935947 101.986099 107.639797 102.835886 104.438025 103.169612 103.891523 102.463199 38.358960 81.664216 ## [181] 99.316764 108.881593 107.535211 73.645102 78.352029 70.404750 54.443063 46.299248 120.568893 83.851048 ## [191] 37.288803 44.569863 54.995234 51.090048 51.224206 64.612945 90.728452 88.827991 82.592611 112.322576 ## [201] 72.855185 78.735670 65.600016 69.384909 95.432264 119.389544 119.721763 122.770574 55.218671 57.286526 ## [211] 57.902693 47.558372 47.088151 67.393203 81.542159 87.260250 84.885977 74.954007 55.993465 51.066520 ## [221] 56.378090 58.765641 42.864537 23.977824 103.963732 99.820726 115.962930 105.087557 107.699134 104.691742 ## [231] 109.393102 110.147836 8.935570 20.810342 102.759122 116.226434 124.934060 154.892599 72.895198 93.334966 ## [241] 88.068221 119.167718 90.187266 82.934575 107.549563 89.306141 91.020385 106.441436 102.684866 115.694395 ## [251] 127.345190 108.834938 114.849692 119.917484 117.966887 116.818490 116.460383 119.367633 108.451356 38.352281 ## [261] 89.833391 108.237636 117.699999 116.595192 92.896467 97.006166 89.746654 66.086035 59.478867 135.007450 ## [271] 102.002272 37.463975 38.972587 49.341747 45.626279 45.816907 81.899220 98.972448 95.465680 84.467758 ## [281] 131.106894 61.508958 67.219814 54.379847 59.229277 109.962937 130.949665 131.302206 134.179409 45.391386 ## [291] 46.273339 46.922209 39.289389 37.894974 65.177065 91.335167 97.965398 95.345994 76.615804 61.339143 ## [301] 55.438231 60.800160 74.339658 56.837840 32.970465 121.092218 117.412471 133.534215 123.397383 126.028178 ## [311] 122.060727 126.701758 127.579674 24.388090 36.877600 122.044937 135.607864 105.937898 135.563755 56.560643 ## [321] 76.542772 70.232074 101.732211 70.933202 63.620474 88.187946 69.968883 71.632746 87.060671 83.467540 ## [331] 21.972471 11.475671 26.124366 31.693577 8.380367 30.070646 23.161115 6.209140 170.214009 132.147156 ## [341] 55.124664 51.353913 54.430899 52.534299 51.273236 37.275273 55.886912 54.189985 57.445879 25.084164 ## [351] 93.328281 91.783938 103.143550 104.608208 103.503813 103.379914 36.435484 154.009131 157.641397 164.508297 ## [361] 95.468867 128.230331 132.100422 124.079663 122.594467 129.038237 41.839840 41.896069 44.757880 115.677434 ## [371] 119.651450 119.827187 109.589713 111.574801 96.407188 47.008541 40.863332 42.707944 158.664674 137.180819 ## [381] 135.610055 139.227500 106.066768 108.434174 113.351195 113.851492 106.757833 115.974365 100.119280 101.167428 ## [391] 111.758515 115.045274 114.135715 91.989485 79.260339 76.004414 67.998656 205.317510 244.451025 172.056190 ## [401] 192.215708 185.711843 217.327924 182.775827 170.615069 197.830933 176.903637 181.060655 194.223065 187.354360 ## [411] 33.296292 47.430350 52.185586 28.807239 51.092135 44.174139 25.438238 167.220517 138.182432 76.668261 ## [421] 73.234460 75.787614 73.948195 46.856865 34.717604 51.958332 71.453225 72.567163 37.615554 84.619353 ## [431] 108.114937 120.142473 122.822502 121.306658 121.204583 45.467260 150.802242 155.528833 165.428365 80.320112 ## [441] 146.986778 151.198855 142.329620 141.366327 121.195938 60.430921 60.398169 62.804566 133.290441 137.236403 ## [451] 137.475098 126.631757 128.429927 116.236335 68.515181 62.705490 64.425905 160.345766 139.365571 138.762856 ## [461] 141.704715 103.997489 110.021801 119.507637 102.435955 95.493903 102.297808 87.028525 87.607833 99.959743 ## [471] 102.615712 101.446172 103.006820 90.484265 61.319896 49.232130 222.282477 259.668863 182.625380 203.078010 ## [481] 197.510015 228.831590 196.671699 185.675987 212.538787 192.069019 195.672024 209.541462 203.291640 17.277015 ## [491] 23.884135 9.249078 21.491573 15.286287 11.450345 170.601656 128.115646 43.656904 40.577200 44.579014 ## [501] 42.618833 54.909465 41.310805 59.001264 45.056489 49.596766 26.763715 97.524043 82.632041 93.555096 ## [511] 94.402263 93.505930 93.371758 34.104112 154.626514 157.659004 162.890952 102.794662 117.698059 121.410792 ## [521] 113.788513 112.068493 132.291092 35.751337 35.899705 39.065343 105.718715 109.690766 109.835396 99.942823 ## [531] 102.011910 85.478726 35.550970 29.422107 31.233687 156.692064 135.130369 133.066026 137.003184 106.655003 ## [541] 107.065422 109.472270 119.095243 112.012274 122.341800 106.370848 107.637851 117.219991 120.789057 120.020800 ## [551] 85.776560 73.175783 83.406457 77.404167 195.448896 235.323777 165.387896 185.318152 178.367342 210.034299 ## [561] 174.400625 161.707476 189.023901 167.928111 172.341580 185.133379 177.987519 6.945246 18.627690 4.217605 ## [571] 3.538855 22.028562 184.915166 138.122730 35.972138 26.539157 28.379003 26.522030 71.721980 58.352871 ## [581] 75.597715 48.804976 55.807481 23.615308 114.306908 84.398831 93.853821 92.744883 92.563786 92.399438 ## [591] 48.358436 169.178814 171.715192 175.409523 120.055674 114.439679 117.461202 111.484551 108.914153 148.583251 ## [601] 19.577446 19.802596 23.079974 104.658509 108.556755 108.600018 99.936292 102.205596 81.027208 29.044437 ## [611] 21.176438 23.920446 168.876200 147.370281 144.793973 149.046410 121.438341 120.220201 119.884679 136.150136 ## [621] 129.078555 139.589827 123.613920 124.899192 134.327696 137.950333 137.207183 93.339495 81.293693 100.653031 ## [631] 93.983902 193.807825 235.546757 171.115952 190.506699 182.770249 214.358016 176.713433 162.878229 190.250686 ## [641] 168.884755 173.883827 185.690539 177.870735 23.640710 3.249805 8.715944 26.852987 191.730323 144.155298 ## [651] 37.413293 24.624456 24.175644 22.529215 78.578576 65.132166 82.495350 53.853789 61.349535 23.267715 ## [661] 121.179386 88.369829 97.255209 95.455133 95.537495 95.363629 55.259820 176.026920 178.498974 181.936556 ## [671] 126.455290 116.380751 119.107648 113.815178 110.930536 155.519893 12.710986 12.956907 16.235144 107.498375 ## [681] 111.344344 111.350044 103.186085 105.509780 82.764284 31.481660 23.605644 26.465080 175.342914 153.863801 ## [691] 151.190009 155.500722 128.323224 126.896457 126.040052 142.935659 135.857963 146.206996 130.241022 131.487347 ## [701] 141.084371 144.669825 143.904762 98.908472 87.058888 107.020532 99.686568 196.099877 238.462396 175.954479 ## [711] 195.150446 187.183444 218.698358 180.459255 166.266684 193.596657 172.183164 177.373721 188.809522 180.764665 ## [721] 22.317307 15.382003 3.437885 176.959530 136.512223 50.739946 44.747769 46.981630 45.141200 58.988399 ## [731] 45.024607 63.463361 54.279827 58.812042 18.601119 101.287465 91.823868 102.650552 103.264654 102.464397 ## [741] 102.326113 41.492546 160.841422 164.218445 170.301015 103.849203 126.338500 129.922261 122.587236 120.718604 ## [751] 136.781063 33.464363 33.518140 36.378738 114.682791 118.651173 118.782931 109.017740 111.108731 93.795803 ## [761] 42.831179 35.926540 38.124541 164.265416 142.723612 140.877989 144.677025 112.840201 114.303436 117.796530 ## [771] 122.044237 114.948290 124.313903 108.443027 109.511456 119.985773 123.315227 122.423677 94.769551 82.123940 ## [781] 84.384682 76.119913 204.411257 244.485784 174.506369 194.475190 187.576824 219.241618 183.645520 170.911432 ## [791] 198.236771 177.122156 181.564891 194.307478 187.107556 6.942381 25.654823 188.575925 140.914886 35.323977 ## [801] 23.914020 24.740560 22.954554 75.888428 62.552259 79.731237 50.738832 58.155614 24.520786 118.459733 ## [811] 85.529379 94.584042 93.003840 92.999789 92.828912 52.191595 172.894451 175.328466 178.699841 124.259511 ## [821] 114.206793 117.043094 111.501589 108.727169 152.644482 15.884071 16.143270 19.414825 105.009557 108.874274 ## [831] 108.892461 100.564082 102.871753 80.646317 29.016717 21.088973 23.935007 172.100123 150.623739 147.942845 ## [841] 152.257147 125.225080 123.689040 122.792585 140.344062 133.274448 143.807146 127.831019 129.116781 138.529324 ## [851] 142.159045 141.418952 95.717823 83.841033 104.851824 98.020618 193.818136 235.971588 172.910544 192.153605 ## [861] 184.243655 215.779715 177.703173 163.616639 190.963245 169.562023 174.693966 186.247541 178.275056 18.737051 ## [871] 184.535191 138.925018 39.216710 30.064439 31.620790 29.801376 70.151597 56.595621 74.169502 50.567171 ## [881] 57.179151 20.604436 112.768411 86.670382 96.366737 95.519959 95.245282 95.084623 47.801433 168.708384 ## [891] 171.418563 175.590062 117.739658 117.436853 120.536078 114.368016 111.893482 147.355589 20.552740 20.723073 ## [901] 23.940959 107.376679 111.290272 111.346714 102.504082 104.749293 84.106386 32.092436 24.308347 26.988269 ## [911] 169.147431 147.612011 145.172641 149.343494 120.858841 120.175116 120.569480 134.381034 127.297535 137.532933 ## [921] 121.572330 122.803384 132.500100 136.053707 135.273216 94.604171 82.410214 98.304595 91.143963 196.670144 ## [931] 238.185162 172.840403 192.342218 184.740028 216.357921 179.021894 165.349018 192.729750 171.390538 176.307314 ## [941] 188.262664 180.531009 176.192874 137.037872 53.955044 48.185639 50.355542 48.525718 57.472319 43.474935 ## [951] 62.067580 56.366583 60.478997 19.039807 99.532881 93.984024 104.983203 105.841536 104.956089 104.821782 ## [961] 41.580905 160.015183 163.559936 170.109685 101.285284 129.071761 132.728396 125.214583 123.445490 135.244117 ## [971] 36.207850 36.239004 38.998722 117.169036 121.141050 121.285302 111.378079 113.438740 96.688492 45.996146 ## [981] 39.207933 41.352716 164.178558 142.663354 140.961999 144.666976 112.045807 114.055945 118.276990 119.992693 ## [991] 112.900891 121.970751 106.145670 107.156985 117.879619 121.132970 120.205821 95.955338 83.263654 81.831468 ## [ reached getOption(&quot;max.print&quot;) -- omitted 2570 entries ] aquifer_pair$from ## [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ## [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ## [75] 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 ## [112] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 ## [149] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 ## [186] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 ## [223] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 ## [260] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 ## [297] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 ## [334] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 ## [371] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 ## [408] 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 ## [445] 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 ## [482] 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 ## [519] 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 ## [556] 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 ## [593] 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 ## [630] 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 ## [667] 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 ## [704] 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 ## [741] 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 ## [778] 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 ## [815] 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 ## [852] 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 ## [889] 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 ## [926] 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 ## [963] 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 ## [1000] 13 ## [ reached getOption(&quot;max.print&quot;) -- omitted 2570 entries ] aquifer_pair$lags ## [1] 3 3 3 4 3 4 4 4 4 4 4 4 4 3 4 5 5 5 2 2 2 3 3 4 1 4 4 4 4 4 2 3 3 4 2 5 6 ## [38] 5 5 2 5 5 5 5 5 5 4 4 5 4 4 4 4 3 3 3 1 2 3 2 2 3 2 2 2 2 2 3 3 2 3 7 8 5 ## [75] 6 6 7 6 6 7 6 6 7 7 1 1 5 6 5 5 5 5 5 5 5 4 1 4 5 5 5 4 4 4 3 3 6 4 2 3 3 ## [112] 3 3 4 4 4 3 5 3 4 3 3 4 6 6 6 3 3 3 3 2 4 4 5 5 3 2 2 2 3 2 1 5 5 5 5 5 5 ## [149] 5 5 2 2 5 6 5 5 2 3 3 4 3 3 4 3 3 4 4 1 4 5 4 4 4 4 4 4 4 4 2 4 4 5 4 3 3 ## [186] 3 3 2 5 4 2 2 3 2 2 3 4 4 4 5 3 3 3 3 4 5 5 5 3 3 3 2 2 3 4 4 4 3 3 2 3 3 ## [223] 2 1 4 4 5 4 4 4 5 5 1 1 4 5 5 6 3 4 4 5 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 ## [260] 2 4 4 5 5 4 4 4 3 3 5 4 2 2 2 2 2 4 4 4 4 5 3 3 3 3 5 5 5 5 2 2 2 2 2 3 4 ## [297] 4 4 3 3 3 3 3 3 2 5 5 5 5 5 5 5 5 1 2 5 6 4 6 3 3 3 4 3 3 4 3 3 4 4 1 1 1 ## [334] 2 1 2 1 1 7 5 3 2 3 2 2 2 3 2 3 1 4 4 4 4 4 4 2 6 6 7 4 5 5 5 5 5 2 2 2 5 ## [371] 5 5 5 5 4 2 2 2 6 6 6 6 4 5 5 5 4 5 4 4 5 5 5 4 3 3 3 8 10 7 8 7 9 7 7 8 7 ## [408] 7 8 7 2 2 2 2 2 2 1 7 6 3 3 3 3 2 2 2 3 3 2 4 4 5 5 5 5 2 6 6 7 3 6 6 6 6 ## [445] 5 3 3 3 5 6 6 5 5 5 3 3 3 6 6 6 6 4 5 5 4 4 4 4 4 4 4 4 4 4 3 2 9 10 7 8 8 ## [482] 9 8 7 8 8 8 8 8 1 1 1 1 1 1 7 5 2 2 2 2 3 2 3 2 2 1 4 4 4 4 4 4 2 6 6 7 4 ## [519] 5 5 5 5 5 2 2 2 4 5 5 4 4 4 2 2 2 6 5 5 6 4 4 5 5 5 5 4 4 5 5 5 4 3 4 3 8 ## [556] 9 7 7 7 8 7 6 7 7 7 7 7 1 1 1 1 1 7 6 2 1 2 1 3 3 3 2 3 1 5 4 4 4 4 4 2 7 ## [593] 7 7 5 5 5 5 5 6 1 1 1 4 5 5 4 4 3 2 1 1 7 6 6 6 5 5 5 6 5 6 5 5 5 6 6 4 3 ## [630] 4 4 8 9 7 8 7 8 7 7 8 7 7 7 7 1 1 1 1 8 6 2 1 1 1 3 3 4 2 3 1 5 4 4 4 4 4 ## [667] 3 7 7 7 5 5 5 5 5 6 1 1 1 4 5 5 4 4 4 2 1 1 7 6 6 6 5 5 5 6 6 6 5 5 6 6 6 ## [704] 4 4 4 4 8 9 7 8 7 9 7 7 8 7 7 7 7 1 1 1 7 6 2 2 2 2 3 2 3 3 3 1 4 4 4 4 4 ## [741] 4 2 6 7 7 4 5 5 5 5 6 2 2 2 5 5 5 5 5 4 2 2 2 7 6 6 6 5 5 5 5 5 5 5 5 5 5 ## [778] 5 4 4 4 3 8 10 7 8 7 9 7 7 8 7 7 8 7 1 1 7 6 2 1 1 1 3 3 3 2 3 1 5 4 4 4 4 ## [815] 4 2 7 7 7 5 5 5 5 5 6 1 1 1 4 5 5 4 4 3 2 1 1 7 6 6 6 5 5 5 6 5 6 5 5 6 6 ## [852] 6 4 4 4 4 8 9 7 8 7 8 7 7 8 7 7 7 7 1 7 6 2 2 2 2 3 3 3 2 3 1 5 4 4 4 4 4 ## [889] 2 7 7 7 5 5 5 5 5 6 1 1 1 4 5 5 4 4 4 2 1 1 7 6 6 6 5 5 5 5 5 6 5 5 5 6 5 ## [926] 4 4 4 4 8 9 7 8 7 8 7 7 8 7 7 7 7 7 6 2 2 2 2 3 2 3 3 3 1 4 4 4 4 4 4 2 6 ## [963] 7 7 4 5 5 5 5 5 2 2 2 5 5 5 5 5 4 2 2 2 7 6 6 6 5 5 5 5 5 5 4 4 5 5 5 4 4 ## [1000] 4 ## [ reached getOption(&quot;max.print&quot;) -- omitted 2570 entries ] ## Levels: 1 2 3 4 5 6 7 8 9 10 aquifer_pair$to ## [1] 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 ## [38] 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 ## [75] 76 77 78 79 80 81 82 83 84 85 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 ## [112] 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 ## [149] 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 ## [186] 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 ## [223] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 5 6 7 8 9 10 11 12 13 14 ## [260] 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 ## [297] 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 6 7 8 ## [334] 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 ## [371] 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 ## [408] 83 84 85 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 ## [445] 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 ## [482] 78 79 80 81 82 83 84 85 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 ## [519] 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 ## [556] 74 75 76 77 78 79 80 81 82 83 84 85 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 ## [593] 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 ## [630] 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 ## [667] 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 ## [704] 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ## [741] 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 ## [778] 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ## [815] 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 ## [852] 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 ## [889] 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 ## [926] 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 ## [963] 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 ## [1000] 71 ## [ reached getOption(&quot;max.print&quot;) -- omitted 2570 entries ] aquifer.v&lt;-est.variogram(aquifer_points,aquifer_pair,&#39;resi&#39;) g4=ggplot(aquifer, aes(resi, Este)) + geom_point() + geom_line() + xlab(&quot;Este&quot;) + ylab(&quot;residuales2&quot;) g5=ggplot(aquifer, aes(resi, Norte)) + geom_point() + geom_line() + xlab(&quot;Norte&quot;) + ylab(&quot;residuales2&quot;) plot_grid(g4,g5) aquifer_points=point(aquifer, x=&quot;Este&quot;, y=&quot;Norte&quot;) fit.trend(aquifer_points,at=&quot;Profundidad&quot;, np=2, plot.it=TRUE) ## $beta ## x^0 y^0 x^1 y^0 x^2 y^0 x^0 y^1 x^1 y^1 x^0 y^2 ## 2481.430108574 -8.373707821 0.001416675 -2.043419339 0.026800556 -0.024643707 ## ## $R ## x^0 y^0 x^1 y^0 x^2 y^0 x^0 y^1 x^1 y^1 x^0 y^2 ## [1,] -9.219544 -155.6739 -41051.636 -731.67314 -16082.944 -85540.31 ## [2,] 0.000000 595.1832 3500.219 57.75539 38829.771 12491.66 ## [3,] 0.000000 0.0000 39397.313 -117.36878 1909.315 -23722.80 ## [4,] 0.000000 0.0000 0.000 485.98967 14332.040 91118.22 ## [5,] 0.000000 0.0000 0.000 0.00000 25401.055 3240.90 ## [6,] 0.000000 0.0000 0.000 0.00000 0.000 19989.20 ## ## $np ## [1] 2 ## ## $x ## [1] 42.78275 -27.39691 -1.16289 -18.61823 96.46549 108.56243 88.36356 90.04213 93.17269 97.61099 ## [11] 90.62946 92.55262 99.48996 -24.06744 -26.06285 56.27842 73.03881 80.26679 80.23009 68.83845 ## [21] 76.39921 64.46148 43.39657 39.07769 112.80450 54.25899 6.13202 -3.80469 -2.23054 -2.36177 ## [31] -2.18890 63.22428 -10.77860 -18.98889 -38.57884 83.14496 -21.80248 -23.56457 -20.11299 -16.62654 ## [41] 29.90748 100.91568 101.29544 103.26625 -14.31073 -18.13447 -18.12151 -9.88796 -12.16336 11.65754 ## [51] 61.69122 69.57896 66.72205 -36.65446 -19.55102 -21.29791 -22.36166 21.14719 7.68461 -8.33227 ## [61] 56.70724 59.00052 68.96893 70.90225 73.00243 59.66237 61.87249 63.70810 5.62706 18.24739 ## [71] 85.68824 105.07646 -101.64278 -145.23654 -73.99313 -94.48182 -88.84983 -120.25898 -86.02454 -72.79097 ## [81] -100.17372 -78.83539 -83.69063 -95.61661 -87.55480 ## ## $y ## [1] 127.62282 90.78732 84.89600 76.45199 64.58058 82.92325 56.45348 39.25820 33.05852 56.27887 35.08169 ## [12] 41.75238 59.15785 184.76636 114.07479 26.84826 18.88140 12.61593 14.61795 107.77423 95.99380 110.39641 ## [23] 53.61499 61.99805 45.54766 147.81987 48.32772 40.40450 29.91113 33.82002 33.68207 79.49924 175.11346 ## [34] 171.91695 158.52742 159.11559 15.02551 9.41441 22.09269 17.25621 175.12875 22.97808 22.96385 20.34239 ## [45] 31.26545 30.18118 29.53241 38.14483 39.11081 18.73347 32.94906 33.80841 33.93264 150.91457 137.78404 ## [56] 131.82542 137.13680 139.26199 126.83751 107.77691 171.26443 164.54863 177.24820 161.38136 162.98959 170.10544 ## [67] 174.30177 173.91454 79.08730 77.39191 139.81702 132.03181 10.65106 28.02333 87.97270 86.62606 76.70991 ## [78] 80.76485 54.36334 43.09215 42.89881 40.82141 46.50482 35.82183 29.39267 ## ## $z ## [1] 1464 2553 2158 2455 1756 1702 1805 1797 1714 1466 1729 1638 1736 1476 2200 1999 1680 1806 1682 1306 1722 1437 ## [23] 1828 2118 1725 1606 2648 2560 2544 2386 2400 1757 1402 1364 1735 1376 2729 2766 2736 2432 1024 1611 1548 1591 ## [45] 2540 2352 2528 2575 2468 2646 1739 1674 1868 1865 1777 1579 1771 1408 1527 2003 1386 1089 1384 1030 1092 1161 ## [67] 1415 1231 2300 2238 1038 1332 3510 3490 2594 2650 2533 3571 2811 2728 3136 2553 2798 2691 2946 ## ## $residuals ## [1] -145.932017 296.391955 20.569629 155.586776 136.944207 210.578982 112.643763 81.535500 12.407325 ## [10] -165.733666 11.643984 -55.843867 123.038140 130.250727 132.838620 16.473072 -186.973641 -9.864104 ## [19] -133.020821 -298.072286 98.737035 -175.328351 -174.667016 118.113364 176.632628 200.333264 366.232978 ## [28] 173.604750 128.842139 -15.778284 -1.005758 -17.176812 -5.743382 -109.803640 35.578021 175.509274 ## [37] 109.375693 113.827801 154.658230 -138.758151 -234.947039 -41.999962 -102.169175 -45.349545 38.415648 ## [46] -182.959426 -9.456222 134.544149 14.873572 303.070200 -191.631118 -197.446346 -23.989926 92.632496 ## [55] -47.092725 -308.538280 -72.511843 -213.402614 -260.643390 -17.741523 187.380986 -159.999448 282.152142 ## [64] -199.908135 -116.838018 -37.190026 262.093246 81.109636 169.467368 176.796541 -289.932780 42.387375 ## [73] 216.381585 -51.786437 30.159248 -53.946573 -219.188525 648.160187 -92.004756 -152.583829 49.711612 ## [82] -386.649271 -141.519561 -407.429504 -129.126052 ## ## attr(,&quot;class&quot;) ## [1] &quot;trend.surface&quot; g6=ggplot(aquifer.v, aes(resi, Norte)) + geom_point() + geom_line() + xlab(&quot;Norte&quot;) + ylab(&quot;residuales2&quot;) g6=ggplot(aquifer.v, aes(bins, classic)) + geom_point() + geom_line() + xlab(&quot;Rezago espacial, h&quot;) + ylab(&quot;Estimador clásico del variograma&quot;) g7=ggplot(aquifer.v, aes(bins, robust)) + geom_point() + geom_line() + xlab(&quot;Rezago espacial, h&quot;) + ylab(&quot;Estimador robusto 1 del variograma&quot;) g8=ggplot(aquifer.v, aes(bins, med)) + geom_point() + geom_line() + xlab(&quot;Rezago espacial, h&quot;) + ylab(&quot;Estimador robusto 2 del variograma&quot;) plot_grid(g6,g7,g8,nrow=1,ncol=3) #par(mfrow=c(1,3)) print(aquifer.v) ## lags bins classic robust med n ## 1 1 13.55308 43779.20 44355.34 47948.45 285 ## 2 2 40.65923 71039.50 71176.29 73188.30 350 ## 3 3 67.76539 80041.91 85367.59 93223.52 492 ## 4 4 94.87154 67197.27 68067.40 73056.46 719 ## 5 5 121.97770 73572.25 68052.99 66133.91 612 ## 6 6 149.08385 57650.90 58608.95 58819.91 521 ## 7 7 176.19001 65498.82 62167.57 68112.31 356 ## 8 8 203.29616 130414.72 107613.55 77805.71 173 ## 9 9 230.40231 161738.13 134102.60 123952.77 43 ## 10 10 257.50847 35525.99 45217.14 58333.98 19 plot(aquifer.v$robust) plot(aquifer.v$med) #points(aquifer.v$robust,col=&quot;red&quot;) #points(aquifer.v$med,&quot;blue&quot;) aquifer.vmodExp&lt;-fit.exponential(aquifer.v,c0=0,ce=40000,ae=20,plot.it=TRUE,iterations=30) ## Initial parameter estimates: 0 40000 20 ## Iteration: 1 ## Gradient vector: -4432.441 977.0988 -8.943538 ## New parameter estimates: 0.000001 40977.1 11.05646 ## ## rse.dif = 3232643827 (rse = 3232643827 ) ; parm.dist = 977.1397 ## Iteration: 2 ## Gradient vector: -26700.7 22493.46 -2.800242 ## New parameter estimates: 0.000001 63470.56 8.256219 ## ## rse.dif = -17644208 (rse = 3214999619 ) ; parm.dist = 22493.46 ## Iteration: 3 ## Gradient vector: -11057.27 -15597.73 2.315183 ## New parameter estimates: 0.000001 47872.83 10.5714 ## ## rse.dif = -3772568 (rse = 3211227051 ) ; parm.dist = 15597.73 ## Iteration: 4 ## Gradient vector: -27525.12 16431.58 -1.824505 ## New parameter estimates: 0.000001 64304.41 8.746897 ## ## rse.dif = 3032851 (rse = 3214259902 ) ; parm.dist = 16431.58 ## Iteration: 5 ## Gradient vector: -20442.22 -7053.019 1.144197 ## New parameter estimates: 0.000001 57251.39 9.891094 ## ## rse.dif = -2468665 (rse = 3211791237 ) ; parm.dist = 7053.019 ## Iteration: 6 ## Gradient vector: -27557.41 7097.539 -0.7122805 ## New parameter estimates: 0.000001 64348.93 9.178813 ## ## rse.dif = 1486180 (rse = 3213277417 ) ; parm.dist = 7097.539 ## Iteration: 7 ## Gradient vector: -24787.06 -2758.919 0.3605893 ## New parameter estimates: 0.000001 61590.01 9.539403 ## ## rse.dif = -951749.7 (rse = 3212325667 ) ; parm.dist = 2758.919 ## Iteration: 8 ## Gradient vector: -26691.4 1898.737 -0.1885371 ## New parameter estimates: 0.000001 63488.75 9.350866 ## ## rse.dif = 471370.4 (rse = 3212797038 ) ; parm.dist = 1898.737 ## Iteration: 9 ## Gradient vector: -25850.35 -838.0686 0.09276125 ## New parameter estimates: 0.000001 62650.68 9.443627 ## ## rse.dif = -249219.6 (rse = 3212547818 ) ; parm.dist = 838.0686 ## Iteration: 10 ## Gradient vector: -26302.53 450.7265 -0.04631475 ## New parameter estimates: 0.000001 63101.41 9.397312 ## ## rse.dif = 121873.4 (rse = 3212669692 ) ; parm.dist = 450.7265 ## Iteration: 11 ## Gradient vector: -26086.54 -215.2624 0.02285916 ## New parameter estimates: 0.000001 62886.14 9.420171 ## ## rse.dif = -61031.79 (rse = 3212608660 ) ; parm.dist = 215.2624 ## Iteration: 12 ## Gradient vector: -26195.52 108.6221 -0.01133309 ## New parameter estimates: 0.000001 62994.77 9.408838 ## ## rse.dif = 30077.83 (rse = 3212638738 ) ; parm.dist = 108.6221 ## Iteration: 13 ## Gradient vector: -26142.08 -53.26613 0.005604603 ## New parameter estimates: 0.000001 62941.5 9.414443 ## ## rse.dif = -14922.96 (rse = 3212623815 ) ; parm.dist = 53.26613 ## Iteration: 14 ## Gradient vector: -26168.65 26.48517 -0.002774911 ## New parameter estimates: 0.000001 62967.99 9.411668 ## ## rse.dif = 7377.216 (rse = 3212631192 ) ; parm.dist = 26.48517 ## Iteration: 15 ## Gradient vector: -26155.53 -13.07801 0.001373075 ## New parameter estimates: 0.000001 62954.91 9.413041 ## ## rse.dif = -3653.216 (rse = 3212627539 ) ; parm.dist = 13.07801 ## Iteration: 16 ## Gradient vector: -26162.03 6.479831 -0.0006796194 ## New parameter estimates: 0.000001 62961.39 9.412361 ## ## rse.dif = 1807.514 (rse = 3212629346 ) ; parm.dist = 6.479831 ## Iteration: 17 ## Gradient vector: -26158.82 -3.20516 0.0003363367 ## New parameter estimates: 0.000001 62958.18 9.412698 ## ## rse.dif = -894.6895 (rse = 3212628451 ) ; parm.dist = 3.20516 ## Iteration: 18 ## Gradient vector: -26160.41 1.586717 -0.0001664615 ## New parameter estimates: 0.000001 62959.77 9.412531 ## ## rse.dif = 442.763 (rse = 3212628894 ) ; parm.dist = 1.586717 ## Iteration: 19 ## Gradient vector: -26159.62 -0.7851797 0.00008238305 ## New parameter estimates: 0.000001 62958.98 9.412613 ## ## rse.dif = -219.1369 (rse = 3212628675 ) ; parm.dist = 0.7851797 ## Iteration: 20 ## Gradient vector: -26160.01 0.3886224 -0.00004077271 ## New parameter estimates: 0.000001 62959.37 9.412573 ## ## rse.dif = 108.4519 (rse = 3212628784 ) ; parm.dist = 0.3886224 ## Iteration: 21 ## Gradient vector: -26159.82 -0.192328 0.0000201789 ## New parameter estimates: 0.000001 62959.18 9.412593 ## ## rse.dif = -53.67477 (rse = 3212628730 ) ; parm.dist = 0.192328 ## Iteration: 22 ## Gradient vector: -26159.91 0.09518727 -0.000009986825 ## New parameter estimates: 0.000001 62959.28 9.412583 ## ## rse.dif = 26.56425 (rse = 3212628756 ) ; parm.dist = 0.09518727 ## Iteration: 23 ## Gradient vector: -26159.86 -0.04710907 0.00000494261 ## New parameter estimates: 0.000001 62959.23 9.412588 ## ## rse.dif = -13.14703 (rse = 3212628743 ) ; parm.dist = 0.04710907 ## Iteration: 24 ## Gradient vector: -26159.89 0.023315 -0.000002446165 ## New parameter estimates: 0.000001 62959.25 9.412585 ## ## rse.dif = 6.506634 (rse = 3212628750 ) ; parm.dist = 0.023315 ## Iteration: 25 ## Gradient vector: -26159.88 -0.01153889 0.00000121064 ## New parameter estimates: 0.000001 62959.24 9.412587 ## ## rse.dif = -3.220222 (rse = 3212628747 ) ; parm.dist = 0.01153889 ## Iteration: 26 ## Gradient vector: -26159.88 0.005710764 -0.0000005991627 ## New parameter estimates: 0.000001 62959.25 9.412586 ## ## rse.dif = 1.593734 (rse = 3212628748 ) ; parm.dist = 0.005710764 ## Iteration: 27 ## Gradient vector: -26159.88 -0.002826342 0.0000002965346 ## New parameter estimates: 0.000001 62959.24 9.412586 ## ## rse.dif = -0.7887611 (rse = 3212628747 ) ; parm.dist = 0.002826342 ## Iteration: 28 ## Gradient vector: -26159.88 0.001398795 -0.0000001467591 ## New parameter estimates: 0.000001 62959.24 9.412586 ## ## rse.dif = 0.3903689 (rse = 3212628748 ) ; parm.dist = 0.001398795 ## Iteration: 29 ## Gradient vector: -26159.88 -0.0006922812 0.00000007263288 ## New parameter estimates: 0.000001 62959.24 9.412586 ## ## rse.dif = -0.1932006 (rse = 3212628748 ) ; parm.dist = 0.0006922812 ## Iteration: 30 ## Gradient vector: -26159.88 0.000342624 -0.00000003594748 ## New parameter estimates: 0.000001 62959.24 9.412586 ## ## rse.dif = 0.09561825 (rse = 3212628748 ) ; parm.dist = 0.000342624 ## Convergence not achieved! aquifer.vmodGau&lt;-fit.gaussian(aquifer.v,c0=0,cg=50000,ag=50,plot.it=TRUE,iterations=30) ## Initial parameter estimates: 0 50000 50 ## Iteration: 1 ## Gradient vector: 19162.34 -33401.14 -11.41191 ## New parameter estimates: 19162.34 16598.86 38.58809 ## ## rse.dif = 3299750048 (rse = 3299750048 ) ; parm.dist = 38507.55 ## Iteration: 2 ## Gradient vector: -1294.927 2010.017 -18.77473 ## New parameter estimates: 17867.41 18608.87 19.81336 ## ## rse.dif = -66430135 (rse = 3233319913 ) ; parm.dist = 2391.1 ## Iteration: 3 ## Gradient vector: 3201.043 -2835.169 9.216254 ## New parameter estimates: 21068.46 15773.71 29.02961 ## ## rse.dif = -24694350 (rse = 3208625564 ) ; parm.dist = 4276.09 ## Iteration: 4 ## Gradient vector: -4345.272 4292.413 -6.361973 ## New parameter estimates: 16723.18 20066.12 22.66764 ## ## rse.dif = 4004881 (rse = 3212630445 ) ; parm.dist = 6107.884 ## Iteration: 5 ## Gradient vector: 53.88685 -4.270081 2.074271 ## New parameter estimates: 16777.07 20061.85 24.74191 ## ## rse.dif = -3703977 (rse = 3208926468 ) ; parm.dist = 54.09555 ## Iteration: 6 ## Gradient vector: -391.4471 384.4526 -0.5571294 ## New parameter estimates: 16385.62 20446.3 24.18478 ## ## rse.dif = 588163 (rse = 3209514631 ) ; parm.dist = 548.6666 ## Iteration: 7 ## Gradient vector: 29.55911 -27.0943 0.07968918 ## New parameter estimates: 16415.18 20419.21 24.26447 ## ## rse.dif = -201438.9 (rse = 3209313192 ) ; parm.dist = 40.09799 ## Iteration: 8 ## Gradient vector: -6.581211 6.259206 -0.01207028 ## New parameter estimates: 16408.6 20425.47 24.2524 ## ## rse.dif = 26607.8 (rse = 3209339800 ) ; parm.dist = 9.082408 ## Iteration: 9 ## Gradient vector: 0.9423146 -0.8928955 0.001794561 ## New parameter estimates: 16409.54 20424.57 24.25419 ## ## rse.dif = -4077.43 (rse = 3209335722 ) ; parm.dist = 1.298161 ## Iteration: 10 ## Gradient vector: -0.1413215 0.1339887 -0.0002673761 ## New parameter estimates: 16409.4 20424.71 24.25393 ## ## rse.dif = 605.1536 (rse = 3209336327 ) ; parm.dist = 0.194743 ## Iteration: 11 ## Gradient vector: 0.02102884 -0.01993597 0.00003982407 ## New parameter estimates: 16409.42 20424.69 24.25397 ## ## rse.dif = -90.18701 (rse = 3209336237 ) ; parm.dist = 0.02897682 ## Iteration: 12 ## Gradient vector: -0.003132718 0.00296995 -0.000005931842 ## New parameter estimates: 16409.42 20424.69 24.25396 ## ## rse.dif = 13.43229 (rse = 3209336251 ) ; parm.dist = 0.004316777 ## Iteration: 13 ## Gradient vector: 0.0004666088 -0.0004423641 0.0000008835486 ## New parameter estimates: 16409.42 20424.69 24.25396 ## ## rse.dif = -2.000767 (rse = 3209336249 ) ; parm.dist = 0.0006429701 ## Iteration: 14 ## Gradient vector: -0.00006950171 0.00006589045 -0.0000001316048 ## New parameter estimates: 16409.42 20424.69 24.25396 ## ## rse.dif = 0.2980142 (rse = 3209336249 ) ; parm.dist = 0.00009577086 ## Iteration: 15 ## Gradient vector: 0.00001035229 -0.000009814388 0.00000001960254 ## New parameter estimates: 16409.42 20424.69 24.25396 ## ## rse.dif = -0.04438925 (rse = 3209336249 ) ; parm.dist = 0.00001426508 ## Iteration: 16 ## Gradient vector: -0.000001542 0.00000146188 -0.000000002919839 ## New parameter estimates: 16409.42 20424.69 24.25396 ## ## rse.dif = 0.006612301 (rse = 3209336249 ) ; parm.dist = 0.000002124821 ## Iteration: 17 ## Gradient vector: 0.0000002296994 -0.0000002177628 0.0000000004349363 ## New parameter estimates: 16409.42 20424.69 24.25396 ## ## rse.dif = -0.0009851456 (rse = 3209336249 ) ; parm.dist = 0.0000003165152 ## Iteration: 18 ## Gradient vector: -0.00000003420782 0.00000003242781 -0.00000000006477718 ## New parameter estimates: 16409.42 20424.69 24.25396 ## ## rse.dif = 0.0001473427 (rse = 3209336249 ) ; parm.dist = 0.00000004713621 ## Iteration: 19 ## Gradient vector: 0.000000005086605 -0.000000004821087 0.000000000009637383 ## New parameter estimates: 16409.42 20424.69 24.25396 ## ## rse.dif = -0.00002193451 (rse = 3209336249 ) ; parm.dist = 0.000000007007276 ## Iteration: 20 ## Gradient vector: -0.0000000007583935 0.0000000007161523 -0.000000000001439258 ## New parameter estimates: 16409.42 20424.69 24.25396 ## ## rse.dif = 0.000002861023 (rse = 3209336249 ) ; parm.dist = 0.000000001042223 ## Iteration: 21 ## Gradient vector: 0.0000000001019258 -0.00000000009775917 0.000000000000199309 ## New parameter estimates: 16409.42 20424.69 24.25396 ## ## rse.dif = -0.0000004768372 (rse = 3209336249 ) ; parm.dist = 0.0000000001415077 ## ## Convergence achieved by sums of squares. ## Final parameter estimates: 16409.42 20424.69 24.25396 aquifer.vmodWave&lt;-fit.wave(aquifer.v,c0=0,cw=40000,aw=10,plot.it=TRUE,iterations=30,weighted=T) ## Initial parameter estimates: 0 40000 10 ## Iteration: 1 ## Gradient vector: 18650.32 -21981.27 -0.7942028 ## New parameter estimates: 18650.32 18018.73 9.205797 ## ## rse.dif = 3409704989 (rse = 3409704989 ) ; parm.dist = 28827.26 ## Iteration: 2 ## Gradient vector: 812.9227 -1109.399 -1.187299 ## New parameter estimates: 19463.25 16909.33 8.018498 ## ## rse.dif = -289093760 (rse = 3120611230 ) ; parm.dist = 1375.358 ## Iteration: 3 ## Gradient vector: -6990.158 6973.566 0.9858099 ## New parameter estimates: 12473.09 23882.9 9.004308 ## ## rse.dif = 24044562 (rse = 3144655792 ) ; parm.dist = 9873.851 ## Iteration: 4 ## Gradient vector: 7025.438 -6960.473 -1.260353 ## New parameter estimates: 19498.53 16922.43 7.743955 ## ## rse.dif = -56767551 (rse = 3087888241 ) ; parm.dist = 9889.639 ## Iteration: 5 ## Gradient vector: -9210.154 9213.61 1.066674 ## New parameter estimates: 10288.37 26136.04 8.810629 ## ## rse.dif = 175986924 (rse = 3263875165 ) ; parm.dist = 13027.57 ## Iteration: 6 ## Gradient vector: 11994.7 -11983.26 -2.255679 ## New parameter estimates: 22283.07 14152.77 6.55495 ## ## rse.dif = -196728543 (rse = 3067146622 ) ; parm.dist = 16954.98 ## Iteration: 7 ## Gradient vector: -14060.45 14195.04 -1.578095 ## New parameter estimates: 8222.625 28347.81 4.976855 ## ## rse.dif = 147278852 (rse = 3214425474 ) ; parm.dist = 19979.87 ## Iteration: 8 ## Gradient vector: -15826.64 16212.91 0.3854677 ## New parameter estimates: 0.000001 44560.72 5.362323 ## ## rse.dif = -46983778 (rse = 3167441696 ) ; parm.dist = 18178.84 ## Iteration: 9 ## Gradient vector: 13145.08 -21444.98 -0.8756698 ## New parameter estimates: 13145.08 23115.75 4.486653 ## ## rse.dif = -757940879 (rse = 2409500817 ) ; parm.dist = 25153.13 ## Iteration: 10 ## Gradient vector: -9434763 9682459 25.73116 ## New parameter estimates: 0.000001 9705575 30.21781 ## ## rse.dif = 1636307005 (rse = 4045807822 ) ; parm.dist = 9682468 ## Iteration: 11 ## Gradient vector: 20962.2 -9688482 0.02156687 ## New parameter estimates: 20962.2 17093.21 30.23938 ## ## rse.dif = 83628062 (rse = 4129435883 ) ; parm.dist = 9688504 ## Iteration: 12 ## Gradient vector: 7173.136 -8587.116 1.22582 ## New parameter estimates: 28135.34 8506.099 31.4652 ## ## rse.dif = -628497356 (rse = 3500938527 ) ; parm.dist = 11188.94 ## Iteration: 13 ## Gradient vector: 2974.651 -2890.861 -4.19572 ## New parameter estimates: 31109.99 5615.237 27.26947 ## ## rse.dif = -192443200 (rse = 3308495327 ) ; parm.dist = 4147.969 ## Iteration: 14 ## Gradient vector: -2399.351 1443.698 15.69929 ## New parameter estimates: 28710.64 7058.936 42.96876 ## ## rse.dif = 147479203 (rse = 3455974530 ) ; parm.dist = 2800.25 ## Iteration: 15 ## Gradient vector: 4786.661 2165.107 -43.14322 ## New parameter estimates: 33497.3 9224.042 0.000001 ## ## rse.dif = -686128323 (rse = 2769846206 ) ; parm.dist = 5253.728 ## Iteration: 16 ## Gradient vector: -7188.309 -0.0000005926894 0 ## New parameter estimates: 26308.99 9224.042 0.000001 ## ## rse.dif = 686457465 (rse = 3456303671 ) ; parm.dist = 7188.309 ## Iteration: 17 ## Gradient vector: -0.000005339328 -0.0000005926894 0 ## New parameter estimates: 26308.99 9224.042 0.000001 ## ## rse.dif = 0.4889336 (rse = 3456303672 ) ; parm.dist = 0.000005372122 ## Iteration: 18 ## Gradient vector: 0.0000005926854 -0.0000005926894 0 ## New parameter estimates: 26308.99 9224.042 0.000001 ## ## rse.dif = 0.000001907349 (rse = 3456303672 ) ; parm.dist = 0.0000008381857 ## Iteration: 19 ## Gradient vector: 0.0000005926934 -0.0000005926894 0 ## New parameter estimates: 26308.99 9224.042 0.000001 ## ## rse.dif = -0.000002384186 (rse = 3456303672 ) ; parm.dist = 0.0000008381908 ## Iteration: 20 ## Gradient vector: 0.0000005926854 -0.0000005926894 0 ## New parameter estimates: 26308.99 9224.042 0.000001 ## ## rse.dif = 0.000002384186 (rse = 3456303672 ) ; parm.dist = 0.0000008381857 ## Iteration: 21 ## Gradient vector: 0.0000005926934 -0.0000005926894 0 ## New parameter estimates: 26308.99 9224.042 0.000001 ## ## rse.dif = -0.000002384186 (rse = 3456303672 ) ; parm.dist = 0.0000008381908 ## Iteration: 22 ## Gradient vector: 0.0000005926854 -0.0000005926894 0 ## New parameter estimates: 26308.99 9224.042 0.000001 ## ## rse.dif = 0.000002384186 (rse = 3456303672 ) ; parm.dist = 0.0000008381857 ## Iteration: 23 ## Gradient vector: 0.0000005926933 -0.0000005926894 0 ## New parameter estimates: 26308.99 9224.042 0.000001 ## ## rse.dif = -0.000002384186 (rse = 3456303672 ) ; parm.dist = 0.0000008381908 ## Iteration: 24 ## Gradient vector: 0.0000005926854 -0.0000005926894 0 ## New parameter estimates: 26308.99 9224.042 0.000001 ## ## rse.dif = 0.000002384186 (rse = 3456303672 ) ; parm.dist = 0.0000008381857 ## Iteration: 25 ## Gradient vector: 0.0000005926934 -0.0000005926894 0 ## New parameter estimates: 26308.99 9224.042 0.000001 ## ## rse.dif = -0.000002384186 (rse = 3456303672 ) ; parm.dist = 0.0000008381908 ## Iteration: 26 ## Gradient vector: 0.0000005926854 -0.0000005926894 0 ## New parameter estimates: 26308.99 9224.042 0.000001 ## ## rse.dif = 0.000002384186 (rse = 3456303672 ) ; parm.dist = 0.0000008381857 ## Iteration: 27 ## Gradient vector: 0.0000005926934 -0.0000005926894 0 ## New parameter estimates: 26308.99 9224.042 0.000001 ## ## rse.dif = -0.000002384186 (rse = 3456303672 ) ; parm.dist = 0.0000008381908 ## Iteration: 28 ## Gradient vector: 0.0000005926854 -0.0000005926894 0 ## New parameter estimates: 26308.99 9224.042 0.000001 ## ## rse.dif = 0.000002384186 (rse = 3456303672 ) ; parm.dist = 0.0000008381857 ## Iteration: 29 ## Gradient vector: 0.0000005926934 -0.0000005926894 0 ## New parameter estimates: 26308.99 9224.042 0.000001 ## ## rse.dif = -0.000002384186 (rse = 3456303672 ) ; parm.dist = 0.0000008381908 ## Iteration: 30 ## Gradient vector: 0.0000005926854 -0.0000005926894 0 ## New parameter estimates: 26308.99 9224.042 0.000001 ## ## rse.dif = 0.000002384186 (rse = 3456303672 ) ; parm.dist = 0.0000008381857 ## Convergence not achieved! curve(65000*(1-(14/x)*sin(x/14)),0,300,ylim=c(0,200000)) points(aquifer.v$bins,aquifer.v$classic,col=3) text(aquifer.v$bins,aquifer.v$classic,aquifer.v$n,col=2) curve(200000*(1-exp(-x/170)),0,300) points(aquifer.v$bins,aquifer.v$classic,col=2) curve(65000*(1-(14/x)*sin(x/14)),0,300,ylim=c(0,200000)) points(aquifer.v$bins,aquifer.v$classic,col=3) text(aquifer.v$bins,aquifer.v$classic,aquifer.v$n,col=2) aquifer.vmodExp&lt;-fit.exponential(aquifer.v,c0=0,ce=200000,ae=170,plot.it=TRUE,iterations=30,weighted=T) ## Initial parameter estimates: 0 200000 170 ## Iteration: 1 ## Gradient vector: 16365.66 -238859.4 -103.7436 ## New parameter estimates: 16365.66 0.000001 66.25643 ## ## rse.dif = 3826411368 (rse = 3826411368 ) ; parm.dist = 200668.5 ## Iteration: 2 ## Gradient vector: 7737.246 16547.95 166070861252 ## New parameter estimates: 24102.91 16547.95 166070861318 ## ## rse.dif = -767474321 (rse = 3058937047 ) ; parm.dist = 166070861252 ## Iteration: 3 ## Gradient vector: 3355.03 12424786768746 0 ## New parameter estimates: 27457.94 12424786785294 166070861318 ## ## rse.dif = -120011141 (rse = 2938925906 ) ; parm.dist = 12424786768746 ## Iteration: 4 ## Gradient vector: 423.3165 -663474885968 0 ## New parameter estimates: 27881.25 11761311899326 166070861318 ## ## rse.dif = 11801483 (rse = 2950727388 ) ; parm.dist = 663474885968 ## Iteration: 5 ## Gradient vector: 3.873181 -6320523090 0 ## New parameter estimates: 27885.12 11754991376237 166070861318 ## ## rse.dif = 128956.4 (rse = 2950856345 ) ; parm.dist = 6320523090 ## Iteration: 6 ## Gradient vector: 0.02266712 -36921321 0 ## New parameter estimates: 27885.15 11754954454916 166070861318 ## ## rse.dif = 752.3639 (rse = 2950857097 ) ; parm.dist = 36921321 ## Iteration: 7 ## Gradient vector: 0.0001316946 -214507.3 0 ## New parameter estimates: 27885.15 11754954240408 166070861318 ## ## rse.dif = 4.371067 (rse = 2950857102 ) ; parm.dist = 214507.3 ## Iteration: 8 ## Gradient vector: 0.0000007650992 -1246.212 0 ## New parameter estimates: 27885.15 11754954239162 166070861318 ## ## rse.dif = 0.02539396 (rse = 2950857102 ) ; parm.dist = 1246.213 ## Iteration: 9 ## Gradient vector: 0.000000004447233 -7.24441 0 ## New parameter estimates: 27885.15 11754954239155 166070861318 ## ## rse.dif = 0.0001473427 (rse = 2950857102 ) ; parm.dist = 7.244141 ## Iteration: 10 ## Gradient vector: 0.0000000000231966 -0.03646515 0 ## New parameter estimates: 27885.15 11754954239155 166070861318 ## ## rse.dif = 0.0000009536743 (rse = 2950857102 ) ; parm.dist = 0.03710938 ## ## Convergence achieved by sums of squares. ## Final parameter estimates: 27885.15 11754954239155 166070861318 aquifer.vmodwave&lt;-fit.wave(aquifer.v,c0=4000,cw=30000,aw=15,plot.it=TRUE,iterations=0,weighted=T) ## Convergence not achieved! aquifer.vmodExp_0&lt;-fit.exponential(aquifer.v,c0=0,ce=200000,ae=170,plot.it=TRUE,iterations=0,weighted=T) ## Convergence not achieved! aquifer.vmodwave_0&lt;-fit.wave(aquifer.v,c0=4000,cw=30000,aw=15,plot.it=TRUE,iterations=0,weighted=T) ## Convergence not achieved! aquifer.spherical&lt;-fit.spherical(aquifer.v,c0=0,cs=35000,as=70,plot.it=TRUE,iterations=0,weighted=T) ## Convergence not achieved! ggplot(aquifer.v, aes(bins, classic)) + geom_point() + geom_line() + xlab(&quot;Rezago espacial, h&quot;) + ylab(&quot;Estimador clásico del variograma&quot;)+ xlim(0, 300) + geom_function(aes(color = &quot;Exponencial&quot;), fun =~4000+150000*(1-exp(-.x/100)) ) + geom_function(aes(color = &quot;Seno cardinal&quot;), fun =~4000+30000*(1-((15/.x)*sin(.x/15))) ) + xlab(&quot;Rezago espacial&quot;) + ylab(&quot;Modelos teóricos de semivariogramas&quot;) Kriging_aquifer &lt;- point(data.frame(list(x=10,y=80))) Kriging_aquifer &lt;- krige(Kriging_aquifer, aquifer_points, &#39;resi&#39;, aquifer.vmodExp_0) ## ## Using all points. ## Preparing the kriging system matrix... ## Inverting the matrix... ## Predicting. Kriging_aquifer ## ## Point object: x ## ## Locations: 1 ## ## Attributes: ## x ## y ## do ## zhat ## sigma2hat Kriging_aquifer$sigma2hat ## [1] 7010.452 Kriging_aquifer &lt;- point(data.frame(list(x=10,y=80))) Kriging_aquifer &lt;- krige(Kriging_aquifer, aquifer_points, &#39;resi&#39;, aquifer.vmodwave_0) ## ## Using all points. ## Preparing the kriging system matrix... ## Inverting the matrix... ## Predicting. Kriging_aquifer ## ## Point object: x ## ## Locations: 1 ## ## Attributes: ## x ## y ## do ## zhat ## sigma2hat Kriging_aquifer$zhat ## [1] 196.2781 Kriging_aquifer$sigma2hat ## [1] 5169.927 grid &lt;- list(x=seq(min(aquifer$Este),max(aquifer$Este),by=20),y=seq(min(aquifer$Norte),max(aquifer$Norte),by=10)) grid$xr &lt;- range(grid$x) grid$xs &lt;- grid$xr[2] - grid$xr[1] grid$yr &lt;- range(grid$y) grid$ys &lt;- grid$yr[2] - grid$yr[1] grid$max &lt;- max(grid$xs, grid$ys) grid$xy &lt;- data.frame(cbind(c(matrix(grid$x, length(grid$x), length(grid$y))), c(matrix(grid$y, length(grid$x), length(grid$y), byrow=TRUE)))) colnames(grid$xy) &lt;- c(&quot;x&quot;, &quot;y&quot;) grid$point &lt;- point(grid$xy) grid$krige &lt;- krige(grid$point,aquifer_points,&#39;resi&#39;,aquifer.vmodwave_0,maxdist=180,extrap=FALSE) ## ## Using points within 180 units of prediction points. ## Predicting.......................................................................................................................................................................................................................................... op &lt;- par(no.readonly = TRUE) par(pty=&quot;s&quot;) plot(grid$xy, type=&quot;n&quot;, xlim=c(grid$xr[1], grid$xr[1]+grid$max),ylim=c(grid$yr[1], grid$yr[1]+grid$max)) image(grid$x,grid$y,matrix(grid$krige$zhat,length(grid$x),length(grid$y)),add=TRUE) contour(grid$x,grid$y,matrix(grid$krige$zhat,length(grid$x),length(grid$y)),add=TRUE) x11() op &lt;- par(no.readonly = TRUE) par(pty=&quot;s&quot;) plot(grid$xy, type=&quot;n&quot;, xlim=c(grid$xr[1], grid$xr[1]+grid$max),ylim=c(grid$yr[1], grid$yr[1]+grid$max)) image(grid$x,grid$y,matrix(grid$krige$sigma2hat,length(grid$x),length(grid$y)), add=TRUE) contour(grid$x,grid$y,matrix(grid$krige$sigma2hat,length(grid$x),length(grid$y)),add=TRUE) "],["cokriging.html", "Chapter 9 Cokriging 9.1 Librerías 9.2 Descripción de los datos 9.3 Matrices de coregionalización. 9.4 Definición de objeto en gstat", " Chapter 9 Cokriging 9.1 Librerías rm(list=ls()) library(sp) library(gstat) library(sf) library(rgdal) library(ggplot2) library(plotly) ## ## Attaching package: &#39;plotly&#39; ## The following object is masked from &#39;package:MASS&#39;: ## ## select ## The following object is masked from &#39;package:vcdExtra&#39;: ## ## summarise ## The following object is masked from &#39;package:ggplot2&#39;: ## ## last_plot ## The following object is masked from &#39;package:stats&#39;: ## ## filter ## The following object is masked from &#39;package:graphics&#39;: ## ## layout library(Matrix) 9.2 Descripción de los datos Cokriging para las variables \\(NO2\\), \\(O3\\), y \\(NOX\\). La variable de principal riesgo es ozono (\\(O3\\)), así que se usan las otras dos como covariables espaciales. Día 2020/01/16 A las 17 horas. datos &lt;- read.csv(&quot;data_8_Cokriging/Air_polution_cdmx_2020_01_16_17h.csv&quot;) datos &lt;- datos[c(&quot;Estacion&quot;, &quot;X&quot;, &quot;Y&quot;, &quot;NO2&quot;, &quot;O3&quot;, &quot;NOX&quot;)] pander::pander((datos)) Estacion X Y NO2 O3 NOX AJU 482901 2117907 NA 50 NA AJM 478188 2130946 5 51 8 ATI 473346 2164689 20 70 20 CAM 482180 2152665 23 83 24 CCA 481502 2136931 6 46 8 CUA 469366 2141275 9 56 10 CUT 479189 2180751 13 75 14 FAC 474444 2154232 31 71 35 HGM 484020 2146380 25 81 31 IZT 487647 2143367 21 61 23 LLA 495842 2164872 14 81 15 LPR 487650 2160000 NA 64 NA MER 487445 2147815 23 79 26 MGH 478716 2145543 NA 66 NA MON 510196 2151776 9 80 10 MPA 498809 2123036 1 50 NA NEZ 497038 2144394 8 62 9 PED 478557 2136817 6 56 6 SAG 496819 2159801 16 80 16 SFE 472393 2140390 9 66 10 TAH 498890 2128098 3 47 3 TLA 478535 2159383 26 64 30 TLI 481421 2167509 18 86 20 UAX 489113 2134517 NA 54 NA UIZ 492241 2140751 7 45 7 VIF 489875 2173664 19 80 22 XAL 491355 2159031 27 80 27 9.3 Matrices de coregionalización. 9.3.1 Matriz definida positiva para el modelo Esférico. mat1 &lt;- cbind(c(30, 30, 30), c(30, 50, 30), c(30, 30, 35)) #matriz definida positiva &quot;cercana&quot; mat1 &lt;- data.frame(as.matrix(nearPD(mat1)$mat)) names(mat1) &lt;- c(&quot;NO2&quot;, &quot;O3&quot;, &quot;NOX&quot;) row.names(mat1) &lt;- c(&quot;NO2&quot;, &quot;O3&quot;, &quot;NOX&quot;) pander::pander(mat1)   NO2 O3 NOX NO2 30 30 30 O3 30 50 30 NOX 30 30 35 9.3.2 Matriz definida positiva para el modelo efecto Hueco. mat2 &lt;- cbind(c(13.02, 24.5, 18.739), c(24.58, 46.4, 35.36), c(18.73, 35.36, 26.95)) mat2 &lt;- data.frame(as.matrix(nearPD(mat2)$mat)) names(mat2) &lt;- c(&quot;NO2&quot;, &quot;O3&quot;, &quot;NOX&quot;) row.names(mat2) &lt;- c(&quot;NO2&quot;, &quot;O3&quot;, &quot;NOX&quot;) pander::pander(mat2)   NO2 O3 NOX NO2 13.02 24.54 18.73 O3 24.54 46.4 35.36 NOX 18.73 35.36 26.96 9.4 Definición de objeto en gstat 9.4.1 Semivariogramas univariados vgmno2 &lt;- vgm(psill = mat1[1, 1], model = &quot;Sph&quot;, range = 6096, add.to = vgm(psill = mat2[1, 1], model = &quot;Hol&quot;, range = 2294)) vgmo3 &lt;- vgm(psill = mat1[2, 2], model = &quot;Sph&quot;, range = 6096, add.to = vgm(psill = mat2[2, 2], model = &quot;Hol&quot;, range = 2294)) vgmnox &lt;- vgm(psill = mat1[3, 3], model = &quot;Sph&quot;, range = 6096, add.to = vgm(psill = mat2[3, 3], model = &quot;Hol&quot;, range = 2294)) 9.4.2 Semivarogramas cruzados (Bivariados) vgmno2_o3 &lt;- vgm(psill = mat1[1, 2], model = &quot;Sph&quot;, range = 6096, add.to = vgm(psill = mat2[1, 2], model = &quot;Hol&quot;, range = 2294)) vgmno2_nox &lt;- vgm(psill = mat1[1, 3], model = &quot;Sph&quot;, range = 6096, add.to = vgm(psill = mat2[1, 3], model = &quot;Hol&quot;, range = 2294)) vgmno3_nox &lt;- vgm(psill = mat1[2, 3], model = &quot;Sph&quot;, range = 6096, add.to = vgm(psill = mat2[2, 3], model = &quot;Hol&quot;, range = 2294)) 9.4.3 gstat remove_na &lt;- function(frame, vari_) { # Remove na from sp object datos1 &lt;- frame bool &lt;- !is.na(datos1@data[vari_]) datos1@data &lt;- datos1@data[bool, ] datos1@coords &lt;- datos1@coords[bool, ] return(datos1)} coordinates(datos) &lt;- ~ X + Y g_st &lt;- gstat(NULL, id = &quot;NO2&quot;, formula = NO2 ~ X + Y, model = vgmno2, data = remove_na(datos, &quot;NO2&quot;)) g_st &lt;- gstat(g_st, id = &quot;O3&quot;, formula = O3 ~ Y, model = vgmo3, data = remove_na(datos, &quot;O3&quot;)) g_st &lt;- gstat(g_st, id = &quot;NOX&quot;, formula = NOX ~ Y, model = vgmnox, data = remove_na(datos, &quot;NOX&quot;)) #Cruzados g_st &lt;- gstat(g_st, id = c(&quot;NO2&quot;, &quot;O3&quot;), model = vgmno2_o3) g_st &lt;- gstat(g_st, id = c(&quot;NO2&quot;, &quot;NOX&quot;), model = vgmno2_nox) g_st &lt;- gstat(g_st, id = c(&quot;O3&quot;, &quot;NOX&quot;), model = vgmno3_nox) pander::pander(do.call(rbind, g_st$model)[, 1:3])   model psill range NO2.1 Hol 13.02 2294 NO2.2 Sph 30 6096 O3.1 Hol 46.4 2294 O3.2 Sph 50 6096 NOX.1 Hol 26.96 2294 NOX.2 Sph 35 6096 NO2.O3.1 Hol 24.54 2294 NO2.O3.2 Sph 30 6096 NO2.NOX.1 Hol 18.73 2294 NO2.NOX.2 Sph 30 6096 O3.NOX.1 Hol 35.36 2294 O3.NOX.2 Sph 30 6096 9.4.4 Estimación del semivariograma plot(variogram(g_st), model = g_st$model, pl = T, xlab = &quot;Distancias&quot;, ylab = &quot;Semivarianza&quot;) 9.4.5 Mapas de predicción de O3 con las covariables espaciales NO2 y NOX prediction_plot &lt;- function(g_object, variable, map_path) { map &lt;- readOGR(map_path) new &lt;- sp::spsample(map, n = 100000, type = &quot;regular&quot;) coordinates(new) ~ x1 + x2 colnames(new@coords) &lt;- c(&quot;X&quot;, &quot;Y&quot;) predic &lt;- predict(g_object, newdata = new) prediction &lt;- data.frame(predic) pred &lt;- paste(variable, &quot;.pred&quot;, sep = &quot;&quot;) plot &lt;- ggplot(prediction, aes_string(&quot;X&quot;, &quot;Y&quot;, fill = pred)) + geom_tile() + scale_fill_viridis_c() + theme_void() return(plot)} variance_plot &lt;- function(g_object, variable, map_path) { map &lt;- readOGR(map_path) new &lt;- sp::spsample(map, n = 10000, type = &quot;regular&quot;) coordinates(new) ~ x1 + x2 colnames(new@coords) &lt;- c(&quot;X&quot;, &quot;Y&quot;) predic &lt;- predict(g_object, newdata = new) prediction &lt;- data.frame(predic) var &lt;- paste(variable, &quot;.var&quot;, sep = &quot;&quot;) plot &lt;- ggplot(prediction, aes_string(&quot;X&quot;, &quot;Y&quot;, fill = var)) + geom_tile() + scale_fill_viridis_c(option = &quot;inferno&quot;, direction = -1) + theme_void() return(plot)} cv_plot &lt;- function(g_object, variable, map_path) { map &lt;- readOGR(map_path) new &lt;- sp::spsample(map, n = 10000, type = &quot;regular&quot;) coordinates(new) ~ x1 + x2 colnames(new@coords) &lt;- c(&quot;X&quot;, &quot;Y&quot;) predic &lt;- predict(g_object, newdata = new) prediction &lt;- data.frame(predic) pred &lt;- paste(variable, &quot;.pred&quot;, sep = &quot;&quot;) var &lt;- paste(variable, &quot;.var&quot;, sep = &quot;&quot;) aux &lt;- abs(sqrt(prediction[var]) / abs(prediction[pred])) aux[aux &gt; 1] &lt;- 1 prediction[&quot;cv&quot;] &lt;- aux plot &lt;- ggplot(prediction, aes_string(&quot;X&quot;, &quot;Y&quot;, fill = &quot;cv&quot;)) + geom_tile() + scale_fill_viridis_c(option = &quot;magma&quot;, direction = -1) + theme_void() return(plot)} pl1 &lt;- prediction_plot(g_st, &quot;O3&quot;, &quot;data_8_Cokriging/SP/mpiosutm.shp&quot;) ## OGR data source with driver: ESRI Shapefile ## Source: &quot;/home/jncc/Documents/Monitorias/EspacialPage/Clases-EE-UN/data_8_Cokriging/SP/mpiosutm.shp&quot;, layer: &quot;mpiosutm&quot; ## with 54 features ## It has 7 fields ## Linear Model of Coregionalization found. Good. ## [using universal cokriging] pl2 &lt;- variance_plot(g_st, &quot;O3&quot;, &quot;data_8_Cokriging/SP/mpiosutm.shp&quot;) ## OGR data source with driver: ESRI Shapefile ## Source: &quot;/home/jncc/Documents/Monitorias/EspacialPage/Clases-EE-UN/data_8_Cokriging/SP/mpiosutm.shp&quot;, layer: &quot;mpiosutm&quot; ## with 54 features ## It has 7 fields ## Linear Model of Coregionalization found. Good. ## [using universal cokriging] pl3 &lt;- cv_plot(g_st, &quot;O3&quot;, &quot;data_8_Cokriging/SP/mpiosutm.shp&quot;) ## OGR data source with driver: ESRI Shapefile ## Source: &quot;/home/jncc/Documents/Monitorias/EspacialPage/Clases-EE-UN/data_8_Cokriging/SP/mpiosutm.shp&quot;, layer: &quot;mpiosutm&quot; ## with 54 features ## It has 7 fields ## Linear Model of Coregionalization found. Good. ## [using universal cokriging] ggplotly(pl1) ggplotly(pl2) ggplotly(pl3) "],["introducción-al-proceso-espacial-bivariado.html", "Chapter 10 Introducción al proceso espacial bivariado 10.1 Dependencias 10.2 Ubicaciones: 10.3 Modelo lineal de coregionalización 10.4 simulación de un proceso espacial Gaussiano bivariado", " Chapter 10 Introducción al proceso espacial bivariado 10.1 Dependencias rm(list=ls()) library(geoR) library(mvtnorm) 10.2 Ubicaciones: En este caso se supone que ambos procesos están observados en los mismos lugares x=seq(0,1,len=3) y=seq(0,1,len=4) coordenadas=expand.grid(x,y) Mat_dist=as.matrix(dist(coordenadas)) 10.3 Modelo lineal de coregionalización Cova1=function(h,a){exp(-h/a)} Cova2=function(h,a){ifelse(h &lt;= a, 1-1.5*(h/a)+0.5*(h/a)^3, 0)} B1=matrix(c(26.3,0.3,0.3,2.1),nrow=2,byrow=T) B2=matrix(c(2.1,1.3,1.3,17.5),nrow=2,byrow=T) Mat_Cov_bloque11=B1[1,1]*Cova1(Mat_dist,1)+B2[1,1]*Cova2(Mat_dist,0.5) Mat_Cov_bloque22=B1[2,2]*Cova1(Mat_dist,1)+B2[2,2]*Cova2(Mat_dist,0.5) Mat_Cov_bloque12=B1[1,2]*Cova1(Mat_dist,1)+B2[1,2]*Cova2(Mat_dist,0.5) Mat_Cov_bloque21=B1[2,1]*Cova1(Mat_dist,1)+B2[2,1]*Cova2(Mat_dist,0.5) MAT_COV=rbind(cbind(Mat_Cov_bloque11,Mat_Cov_bloque12), cbind(Mat_Cov_bloque21,Mat_Cov_bloque22)) dim(MAT_COV) ## [1] 24 24 10.3.1 Determinante de la matriz de covarianzas det(MAT_COV) ## [1] 349416576425414152341717778432 10.4 simulación de un proceso espacial Gaussiano bivariado sim1=rmvnorm(1,mean=rep(0,2*nrow(coordenadas)), sigma=MAT_COV) datos=cbind(coordenadas,z1=sim1[1:12],z2=sim1[13:24]) "],["ilustración-del-kriging-simple-espacio-tiempo-1.html", "Chapter 11 Ilustración del kriging simple espacio tiempo 11.1 Dependencias 11.2 Simulación no condicional de una realización de un campo aleatorio espacio temporal no separable usando el modelo de covarianza cressie1 11.3 Algunas funciones de covarianza espacio temporal no separables", " Chapter 11 Ilustración del kriging simple espacio tiempo 11.1 Dependencias rm(list=ls()) library(mvtnorm) 11.2 Simulación no condicional de una realización de un campo aleatorio espacio temporal no separable usando el modelo de covarianza cressie1 En primer lugar, se generar la grilla espacio temporal. Aquí suponemos n=6 ubicaciones espaciales y T=4 momentos en el tiempo, así en total son 24 ubicaciones espacio-tiempo. Se llevará a cabo la simulación y posteriormente se usará el predictor kriging con su respectiva estimación de varianza del error de predicción, en un punto no “observado”. Se asume conocida la función de covarianza. En la práctica esta matriz se puede estimar por métodos como maxima veorsimilitud, pseudoverosimilitud y métodos basados en mínimos cuadrados. x1 &lt;- seq(0,3,len = 3) x2 &lt;- seq(1,6,len = 2) t &lt;- 1:4 grillaSpT=expand.grid(x1,x2,t) #matriz de distancias (rezagos) espaciales matDistSp=as.matrix(dist(grillaSpT[,1:2])) #matriz de distancias (rezagos) temporales matDistT=as.matrix(dist(grillaSpT[,3:3])) cressie1=function(h,u,p){ (p[1]^2/((p[2]^2*u^2+1)))*exp(-(p[3]^2*h^2)/(p[2]^2*u^2+1))} ##parámetros p, mu, que en este caso son p=c(0.4,1.7,1.9) y mu=0 sigma=cressie1(matDistSp,matDistT,p=c(0.15,1.7,1.9)) sim1=rmvnorm(1,mean=rep(0,nrow(grillaSpT)), sigma=sigma) datos1=cbind(grillaSpT,t(sim1)) names(datos1)=c(&quot;x&quot;,&quot;y&quot;,&quot;t&quot;,&quot;z((x,y),t)&quot;) matDistSp ## 1 2 3 4 5 6 7 8 9 10 11 12 ## 1 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 ## 2 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 ## 3 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 ## 4 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 ## 5 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 ## 6 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 ## 7 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 ## 8 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 ## 9 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 ## 10 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 ## 11 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 ## 12 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 ## 13 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 ## 14 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 ## 15 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 ## 16 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 ## 17 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 ## 18 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 ## 19 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 ## 20 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 ## 21 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 ## 22 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 ## 23 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 ## 24 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 ## 13 14 15 16 17 18 19 20 21 22 23 24 ## 1 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 ## 2 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 ## 3 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 ## 4 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 ## 5 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 ## 6 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 ## 7 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 ## 8 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 ## 9 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 ## 10 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 ## 11 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 ## 12 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 ## 13 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 ## 14 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 ## 15 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 ## 16 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 ## 17 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 ## 18 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 ## 19 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 ## 20 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 ## 21 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 ## 22 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 5.000000 5.220153 5.830952 0.000000 1.500000 3.000000 ## 23 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 5.220153 5.000000 5.220153 1.500000 0.000000 1.500000 ## 24 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 5.830952 5.220153 5.000000 3.000000 1.500000 0.000000 matDistT ## 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 ## 1 0 0 0 0 0 0 1 1 1 1 1 1 2 2 2 2 2 2 3 3 3 3 3 3 ## 2 0 0 0 0 0 0 1 1 1 1 1 1 2 2 2 2 2 2 3 3 3 3 3 3 ## 3 0 0 0 0 0 0 1 1 1 1 1 1 2 2 2 2 2 2 3 3 3 3 3 3 ## 4 0 0 0 0 0 0 1 1 1 1 1 1 2 2 2 2 2 2 3 3 3 3 3 3 ## 5 0 0 0 0 0 0 1 1 1 1 1 1 2 2 2 2 2 2 3 3 3 3 3 3 ## 6 0 0 0 0 0 0 1 1 1 1 1 1 2 2 2 2 2 2 3 3 3 3 3 3 ## 7 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 1 2 2 2 2 2 2 ## 8 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 1 2 2 2 2 2 2 ## 9 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 1 2 2 2 2 2 2 ## 10 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 1 2 2 2 2 2 2 ## 11 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 1 2 2 2 2 2 2 ## 12 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 1 2 2 2 2 2 2 ## 13 2 2 2 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 1 ## 14 2 2 2 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 1 ## 15 2 2 2 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 1 ## 16 2 2 2 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 1 ## 17 2 2 2 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 1 ## 18 2 2 2 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 1 ## 19 3 3 3 3 3 3 2 2 2 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 ## 20 3 3 3 3 3 3 2 2 2 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 ## 21 3 3 3 3 3 3 2 2 2 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 ## 22 3 3 3 3 3 3 2 2 2 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 ## 23 3 3 3 3 3 3 2 2 2 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 ## 24 3 3 3 3 3 3 2 2 2 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 sigma ## 1 ## 1 0.0224999999999999991673327315311325946822762489318847656250000 ## 2 0.0000066776797753472399274865707596848807270362158305943012238 ## 3 0.0000000000000001745640467031612522788968514235007086808448520 ## 4 0.0000000000000000000000000000000000000000143583827581367797582 ## 5 0.0000000000000000000000000000000000000000000042613636511423543 ## 6 0.0000000000000000000000000000000000000000000000000000001113981 ## 7 0.0057840616966580975927270102943111851345747709274291992187500 ## 8 0.0007168131149851337830664066430585990019608289003372192382812 ## 9 0.0000013643475657859583439243233299320579021696175914257764816 ## 10 0.0000000000004857106754824595982789570016222239747178193725041 ## 11 0.0000000000000601936494687245644879201301829867522713872138307 ## 12 0.0000000000000001145696938456985277283312171491699972437340957 ## 13 0.0017914012738853503543812184517491914448328316211700439453125 ## 14 0.0009382885903262112121600568848123202769784256815910339355469 ## 15 0.0001348239681125494701576655875996380018477793782949447631836 ## 16 0.0000013569558875775789074329515451755590049742750125005841255 ## 17 0.0000007107375915439390617206211891998535179482132662087678909 ## 18 0.0000001021268545377872649108357970722249508099821468931622803 ## 19 0.0008330248056275453864480406984682758775306865572929382324219 ## 20 0.0006166745823446492802411000866413814947009086608886718750000 ## 21 0.0002501787346616134882250348514531879118294455111026763916016 ## 22 0.0000294798909060135976912316729814378390983620192855596542358 ## 23 0.0000218234790719545488843489344787940353853628039360046386719 ## 24 0.0000088535680510412586229854886576973171941062901169061660767 ## 2 ## 1 0.000006677679775347239927486570759684880727036215831 ## 2 0.022499999999999999167332731531132594682276248931885 ## 3 0.000006677679775347239927486570759684880727036215831 ## 4 0.000000000000000000000000000000000000000000004261364 ## 5 0.000000000000000000000000000000000000000014358382758 ## 6 0.000000000000000000000000000000000000000000004261364 ## 7 0.000716813114985133783066406643058599001960828900337 ## 8 0.005784061696658097592727010294311185134574770927429 ## 9 0.000716813114985133783066406643058599001960828900337 ## 10 0.000000000000060193649468724564487920130182986752271 ## 11 0.000000000000485710675482459598278957001622223974718 ## 12 0.000000000000060193649468724564487920130182986752271 ## 13 0.000938288590326211212160056884812320276978425681591 ## 14 0.001791401273885350354381218451749191444832831621170 ## 15 0.000938288590326211212160056884812320276978425681591 ## 16 0.000000710737591543939061720621189199853517948213266 ## 17 0.000001356955887577578907432951545175559004974275013 ## 18 0.000000710737591543939061720621189199853517948213266 ## 19 0.000616674582344649280241100086641381494700908660889 ## 20 0.000833024805627545386448040698468275877530686557293 ## 21 0.000616674582344649280241100086641381494700908660889 ## 22 0.000021823479071954548884348934478794035385362803936 ## 23 0.000029479890906013597691231672981437839098362019286 ## 24 0.000021823479071954548884348934478794035385362803936 ## 3 ## 1 0.0000000000000001745640467031612522788968514235007086808448520 ## 2 0.0000066776797753472399274865707596848807270362158305943012238 ## 3 0.0224999999999999991673327315311325946822762489318847656250000 ## 4 0.0000000000000000000000000000000000000000000000000000001113981 ## 5 0.0000000000000000000000000000000000000000000042613636511423543 ## 6 0.0000000000000000000000000000000000000000143583827581367797582 ## 7 0.0000013643475657859583439243233299320579021696175914257764816 ## 8 0.0007168131149851337830664066430585990019608289003372192382812 ## 9 0.0057840616966580975927270102943111851345747709274291992187500 ## 10 0.0000000000000001145696938456985277283312171491699972437340957 ## 11 0.0000000000000601936494687245644879201301829867522713872138307 ## 12 0.0000000000004857106754824595982789570016222239747178193725041 ## 13 0.0001348239681125494701576655875996380018477793782949447631836 ## 14 0.0009382885903262112121600568848123202769784256815910339355469 ## 15 0.0017914012738853503543812184517491914448328316211700439453125 ## 16 0.0000001021268545377872649108357970722249508099821468931622803 ## 17 0.0000007107375915439390617206211891998535179482132662087678909 ## 18 0.0000013569558875775789074329515451755590049742750125005841255 ## 19 0.0002501787346616134882250348514531879118294455111026763916016 ## 20 0.0006166745823446492802411000866413814947009086608886718750000 ## 21 0.0008330248056275453864480406984682758775306865572929382324219 ## 22 0.0000088535680510412586229854886576973171941062901169061660767 ## 23 0.0000218234790719545488843489344787940353853628039360046386719 ## 24 0.0000294798909060135976912316729814378390983620192855596542358 ## 4 ## 1 0.0000000000000000000000000000000000000000143583827581367797582 ## 2 0.0000000000000000000000000000000000000000000042613636511423543 ## 3 0.0000000000000000000000000000000000000000000000000000001113981 ## 4 0.0224999999999999991673327315311325946822762489318847656250000 ## 5 0.0000066776797753472399274865707596848807270362158305943012238 ## 6 0.0000000000000001745640467031612522788968514235007086808448520 ## 7 0.0000000000004857106754824595982789570016222239747178193725041 ## 8 0.0000000000000601936494687245644879201301829867522713872138307 ## 9 0.0000000000000001145696938456985277283312171491699972437340957 ## 10 0.0057840616966580975927270102943111851345747709274291992187500 ## 11 0.0007168131149851337830664066430585990019608289003372192382812 ## 12 0.0000013643475657859583439243233299320579021696175914257764816 ## 13 0.0000013569558875775789074329515451755590049742750125005841255 ## 14 0.0000007107375915439390617206211891998535179482132662087678909 ## 15 0.0000001021268545377872649108357970722249508099821468931622803 ## 16 0.0017914012738853503543812184517491914448328316211700439453125 ## 17 0.0009382885903262112121600568848123202769784256815910339355469 ## 18 0.0001348239681125494701576655875996380018477793782949447631836 ## 19 0.0000294798909060135976912316729814378390983620192855596542358 ## 20 0.0000218234790719545488843489344787940353853628039360046386719 ## 21 0.0000088535680510412586229854886576973171941062901169061660767 ## 22 0.0008330248056275453864480406984682758775306865572929382324219 ## 23 0.0006166745823446492802411000866413814947009086608886718750000 ## 24 0.0002501787346616134882250348514531879118294455111026763916016 ## 5 ## 1 0.000000000000000000000000000000000000000000004261364 ## 2 0.000000000000000000000000000000000000000014358382758 ## 3 0.000000000000000000000000000000000000000000004261364 ## 4 0.000006677679775347239927486570759684880727036215831 ## 5 0.022499999999999999167332731531132594682276248931885 ## 6 0.000006677679775347239927486570759684880727036215831 ## 7 0.000000000000060193649468724564487920130182986752271 ## 8 0.000000000000485710675482459598278957001622223974718 ## 9 0.000000000000060193649468724564487920130182986752271 ## 10 0.000716813114985133783066406643058599001960828900337 ## 11 0.005784061696658097592727010294311185134574770927429 ## 12 0.000716813114985133783066406643058599001960828900337 ## 13 0.000000710737591543939061720621189199853517948213266 ## 14 0.000001356955887577578907432951545175559004974275013 ## 15 0.000000710737591543939061720621189199853517948213266 ## 16 0.000938288590326211212160056884812320276978425681591 ## 17 0.001791401273885350354381218451749191444832831621170 ## 18 0.000938288590326211212160056884812320276978425681591 ## 19 0.000021823479071954548884348934478794035385362803936 ## 20 0.000029479890906013597691231672981437839098362019286 ## 21 0.000021823479071954548884348934478794035385362803936 ## 22 0.000616674582344649280241100086641381494700908660889 ## 23 0.000833024805627545386448040698468275877530686557293 ## 24 0.000616674582344649280241100086641381494700908660889 ## 6 ## 1 0.0000000000000000000000000000000000000000000000000000001113981 ## 2 0.0000000000000000000000000000000000000000000042613636511423543 ## 3 0.0000000000000000000000000000000000000000143583827581367797582 ## 4 0.0000000000000001745640467031612522788968514235007086808448520 ## 5 0.0000066776797753472399274865707596848807270362158305943012238 ## 6 0.0224999999999999991673327315311325946822762489318847656250000 ## 7 0.0000000000000001145696938456985277283312171491699972437340957 ## 8 0.0000000000000601936494687245644879201301829867522713872138307 ## 9 0.0000000000004857106754824595982789570016222239747178193725041 ## 10 0.0000013643475657859583439243233299320579021696175914257764816 ## 11 0.0007168131149851337830664066430585990019608289003372192382812 ## 12 0.0057840616966580975927270102943111851345747709274291992187500 ## 13 0.0000001021268545377872649108357970722249508099821468931622803 ## 14 0.0000007107375915439390617206211891998535179482132662087678909 ## 15 0.0000013569558875775789074329515451755590049742750125005841255 ## 16 0.0001348239681125494701576655875996380018477793782949447631836 ## 17 0.0009382885903262112121600568848123202769784256815910339355469 ## 18 0.0017914012738853503543812184517491914448328316211700439453125 ## 19 0.0000088535680510412586229854886576973171941062901169061660767 ## 20 0.0000218234790719545488843489344787940353853628039360046386719 ## 21 0.0000294798909060135976912316729814378390983620192855596542358 ## 22 0.0002501787346616134882250348514531879118294455111026763916016 ## 23 0.0006166745823446492802411000866413814947009086608886718750000 ## 24 0.0008330248056275453864480406984682758775306865572929382324219 ## 7 ## 1 0.0057840616966580975927270102943111851345747709274291992187500 ## 2 0.0007168131149851337830664066430585990019608289003372192382812 ## 3 0.0000013643475657859583439243233299320579021696175914257764816 ## 4 0.0000000000004857106754824595982789570016222239747178193725041 ## 5 0.0000000000000601936494687245644879201301829867522713872138307 ## 6 0.0000000000000001145696938456985277283312171491699972437340957 ## 7 0.0224999999999999991673327315311325946822762489318847656250000 ## 8 0.0000066776797753472399274865707596848807270362158305943012238 ## 9 0.0000000000000001745640467031612522788968514235007086808448520 ## 10 0.0000000000000000000000000000000000000000143583827581367797582 ## 11 0.0000000000000000000000000000000000000000000042613636511423543 ## 12 0.0000000000000000000000000000000000000000000000000000001113981 ## 13 0.0057840616966580975927270102943111851345747709274291992187500 ## 14 0.0007168131149851337830664066430585990019608289003372192382812 ## 15 0.0000013643475657859583439243233299320579021696175914257764816 ## 16 0.0000000000004857106754824595982789570016222239747178193725041 ## 17 0.0000000000000601936494687245644879201301829867522713872138307 ## 18 0.0000000000000001145696938456985277283312171491699972437340957 ## 19 0.0017914012738853503543812184517491914448328316211700439453125 ## 20 0.0009382885903262112121600568848123202769784256815910339355469 ## 21 0.0001348239681125494701576655875996380018477793782949447631836 ## 22 0.0000013569558875775789074329515451755590049742750125005841255 ## 23 0.0000007107375915439390617206211891998535179482132662087678909 ## 24 0.0000001021268545377872649108357970722249508099821468931622803 ## 8 ## 1 0.000716813114985133783066406643058599001960828900337 ## 2 0.005784061696658097592727010294311185134574770927429 ## 3 0.000716813114985133783066406643058599001960828900337 ## 4 0.000000000000060193649468724564487920130182986752271 ## 5 0.000000000000485710675482459598278957001622223974718 ## 6 0.000000000000060193649468724564487920130182986752271 ## 7 0.000006677679775347239927486570759684880727036215831 ## 8 0.022499999999999999167332731531132594682276248931885 ## 9 0.000006677679775347239927486570759684880727036215831 ## 10 0.000000000000000000000000000000000000000000004261364 ## 11 0.000000000000000000000000000000000000000014358382758 ## 12 0.000000000000000000000000000000000000000000004261364 ## 13 0.000716813114985133783066406643058599001960828900337 ## 14 0.005784061696658097592727010294311185134574770927429 ## 15 0.000716813114985133783066406643058599001960828900337 ## 16 0.000000000000060193649468724564487920130182986752271 ## 17 0.000000000000485710675482459598278957001622223974718 ## 18 0.000000000000060193649468724564487920130182986752271 ## 19 0.000938288590326211212160056884812320276978425681591 ## 20 0.001791401273885350354381218451749191444832831621170 ## 21 0.000938288590326211212160056884812320276978425681591 ## 22 0.000000710737591543939061720621189199853517948213266 ## 23 0.000001356955887577578907432951545175559004974275013 ## 24 0.000000710737591543939061720621189199853517948213266 ## 9 ## 1 0.0000013643475657859583439243233299320579021696175914257764816 ## 2 0.0007168131149851337830664066430585990019608289003372192382812 ## 3 0.0057840616966580975927270102943111851345747709274291992187500 ## 4 0.0000000000000001145696938456985277283312171491699972437340957 ## 5 0.0000000000000601936494687245644879201301829867522713872138307 ## 6 0.0000000000004857106754824595982789570016222239747178193725041 ## 7 0.0000000000000001745640467031612522788968514235007086808448520 ## 8 0.0000066776797753472399274865707596848807270362158305943012238 ## 9 0.0224999999999999991673327315311325946822762489318847656250000 ## 10 0.0000000000000000000000000000000000000000000000000000001113981 ## 11 0.0000000000000000000000000000000000000000000042613636511423543 ## 12 0.0000000000000000000000000000000000000000143583827581367797582 ## 13 0.0000013643475657859583439243233299320579021696175914257764816 ## 14 0.0007168131149851337830664066430585990019608289003372192382812 ## 15 0.0057840616966580975927270102943111851345747709274291992187500 ## 16 0.0000000000000001145696938456985277283312171491699972437340957 ## 17 0.0000000000000601936494687245644879201301829867522713872138307 ## 18 0.0000000000004857106754824595982789570016222239747178193725041 ## 19 0.0001348239681125494701576655875996380018477793782949447631836 ## 20 0.0009382885903262112121600568848123202769784256815910339355469 ## 21 0.0017914012738853503543812184517491914448328316211700439453125 ## 22 0.0000001021268545377872649108357970722249508099821468931622803 ## 23 0.0000007107375915439390617206211891998535179482132662087678909 ## 24 0.0000013569558875775789074329515451755590049742750125005841255 ## 10 ## 1 0.0000000000004857106754824595982789570016222239747178193725041 ## 2 0.0000000000000601936494687245644879201301829867522713872138307 ## 3 0.0000000000000001145696938456985277283312171491699972437340957 ## 4 0.0057840616966580975927270102943111851345747709274291992187500 ## 5 0.0007168131149851337830664066430585990019608289003372192382812 ## 6 0.0000013643475657859583439243233299320579021696175914257764816 ## 7 0.0000000000000000000000000000000000000000143583827581367797582 ## 8 0.0000000000000000000000000000000000000000000042613636511423543 ## 9 0.0000000000000000000000000000000000000000000000000000001113981 ## 10 0.0224999999999999991673327315311325946822762489318847656250000 ## 11 0.0000066776797753472399274865707596848807270362158305943012238 ## 12 0.0000000000000001745640467031612522788968514235007086808448520 ## 13 0.0000000000004857106754824595982789570016222239747178193725041 ## 14 0.0000000000000601936494687245644879201301829867522713872138307 ## 15 0.0000000000000001145696938456985277283312171491699972437340957 ## 16 0.0057840616966580975927270102943111851345747709274291992187500 ## 17 0.0007168131149851337830664066430585990019608289003372192382812 ## 18 0.0000013643475657859583439243233299320579021696175914257764816 ## 19 0.0000013569558875775789074329515451755590049742750125005841255 ## 20 0.0000007107375915439390617206211891998535179482132662087678909 ## 21 0.0000001021268545377872649108357970722249508099821468931622803 ## 22 0.0017914012738853503543812184517491914448328316211700439453125 ## 23 0.0009382885903262112121600568848123202769784256815910339355469 ## 24 0.0001348239681125494701576655875996380018477793782949447631836 ## 11 ## 1 0.000000000000060193649468724564487920130182986752271 ## 2 0.000000000000485710675482459598278957001622223974718 ## 3 0.000000000000060193649468724564487920130182986752271 ## 4 0.000716813114985133783066406643058599001960828900337 ## 5 0.005784061696658097592727010294311185134574770927429 ## 6 0.000716813114985133783066406643058599001960828900337 ## 7 0.000000000000000000000000000000000000000000004261364 ## 8 0.000000000000000000000000000000000000000014358382758 ## 9 0.000000000000000000000000000000000000000000004261364 ## 10 0.000006677679775347239927486570759684880727036215831 ## 11 0.022499999999999999167332731531132594682276248931885 ## 12 0.000006677679775347239927486570759684880727036215831 ## 13 0.000000000000060193649468724564487920130182986752271 ## 14 0.000000000000485710675482459598278957001622223974718 ## 15 0.000000000000060193649468724564487920130182986752271 ## 16 0.000716813114985133783066406643058599001960828900337 ## 17 0.005784061696658097592727010294311185134574770927429 ## 18 0.000716813114985133783066406643058599001960828900337 ## 19 0.000000710737591543939061720621189199853517948213266 ## 20 0.000001356955887577578907432951545175559004974275013 ## 21 0.000000710737591543939061720621189199853517948213266 ## 22 0.000938288590326211212160056884812320276978425681591 ## 23 0.001791401273885350354381218451749191444832831621170 ## 24 0.000938288590326211212160056884812320276978425681591 ## 12 ## 1 0.0000000000000001145696938456985277283312171491699972437340957 ## 2 0.0000000000000601936494687245644879201301829867522713872138307 ## 3 0.0000000000004857106754824595982789570016222239747178193725041 ## 4 0.0000013643475657859583439243233299320579021696175914257764816 ## 5 0.0007168131149851337830664066430585990019608289003372192382812 ## 6 0.0057840616966580975927270102943111851345747709274291992187500 ## 7 0.0000000000000000000000000000000000000000000000000000001113981 ## 8 0.0000000000000000000000000000000000000000000042613636511423543 ## 9 0.0000000000000000000000000000000000000000143583827581367797582 ## 10 0.0000000000000001745640467031612522788968514235007086808448520 ## 11 0.0000066776797753472399274865707596848807270362158305943012238 ## 12 0.0224999999999999991673327315311325946822762489318847656250000 ## 13 0.0000000000000001145696938456985277283312171491699972437340957 ## 14 0.0000000000000601936494687245644879201301829867522713872138307 ## 15 0.0000000000004857106754824595982789570016222239747178193725041 ## 16 0.0000013643475657859583439243233299320579021696175914257764816 ## 17 0.0007168131149851337830664066430585990019608289003372192382812 ## 18 0.0057840616966580975927270102943111851345747709274291992187500 ## 19 0.0000001021268545377872649108357970722249508099821468931622803 ## 20 0.0000007107375915439390617206211891998535179482132662087678909 ## 21 0.0000013569558875775789074329515451755590049742750125005841255 ## 22 0.0001348239681125494701576655875996380018477793782949447631836 ## 23 0.0009382885903262112121600568848123202769784256815910339355469 ## 24 0.0017914012738853503543812184517491914448328316211700439453125 ## 13 ## 1 0.0017914012738853503543812184517491914448328316211700439453125 ## 2 0.0009382885903262112121600568848123202769784256815910339355469 ## 3 0.0001348239681125494701576655875996380018477793782949447631836 ## 4 0.0000013569558875775789074329515451755590049742750125005841255 ## 5 0.0000007107375915439390617206211891998535179482132662087678909 ## 6 0.0000001021268545377872649108357970722249508099821468931622803 ## 7 0.0057840616966580975927270102943111851345747709274291992187500 ## 8 0.0007168131149851337830664066430585990019608289003372192382812 ## 9 0.0000013643475657859583439243233299320579021696175914257764816 ## 10 0.0000000000004857106754824595982789570016222239747178193725041 ## 11 0.0000000000000601936494687245644879201301829867522713872138307 ## 12 0.0000000000000001145696938456985277283312171491699972437340957 ## 13 0.0224999999999999991673327315311325946822762489318847656250000 ## 14 0.0000066776797753472399274865707596848807270362158305943012238 ## 15 0.0000000000000001745640467031612522788968514235007086808448520 ## 16 0.0000000000000000000000000000000000000000143583827581367797582 ## 17 0.0000000000000000000000000000000000000000000042613636511423543 ## 18 0.0000000000000000000000000000000000000000000000000000001113981 ## 19 0.0057840616966580975927270102943111851345747709274291992187500 ## 20 0.0007168131149851337830664066430585990019608289003372192382812 ## 21 0.0000013643475657859583439243233299320579021696175914257764816 ## 22 0.0000000000004857106754824595982789570016222239747178193725041 ## 23 0.0000000000000601936494687245644879201301829867522713872138307 ## 24 0.0000000000000001145696938456985277283312171491699972437340957 ## 14 ## 1 0.000938288590326211212160056884812320276978425681591 ## 2 0.001791401273885350354381218451749191444832831621170 ## 3 0.000938288590326211212160056884812320276978425681591 ## 4 0.000000710737591543939061720621189199853517948213266 ## 5 0.000001356955887577578907432951545175559004974275013 ## 6 0.000000710737591543939061720621189199853517948213266 ## 7 0.000716813114985133783066406643058599001960828900337 ## 8 0.005784061696658097592727010294311185134574770927429 ## 9 0.000716813114985133783066406643058599001960828900337 ## 10 0.000000000000060193649468724564487920130182986752271 ## 11 0.000000000000485710675482459598278957001622223974718 ## 12 0.000000000000060193649468724564487920130182986752271 ## 13 0.000006677679775347239927486570759684880727036215831 ## 14 0.022499999999999999167332731531132594682276248931885 ## 15 0.000006677679775347239927486570759684880727036215831 ## 16 0.000000000000000000000000000000000000000000004261364 ## 17 0.000000000000000000000000000000000000000014358382758 ## 18 0.000000000000000000000000000000000000000000004261364 ## 19 0.000716813114985133783066406643058599001960828900337 ## 20 0.005784061696658097592727010294311185134574770927429 ## 21 0.000716813114985133783066406643058599001960828900337 ## 22 0.000000000000060193649468724564487920130182986752271 ## 23 0.000000000000485710675482459598278957001622223974718 ## 24 0.000000000000060193649468724564487920130182986752271 ## 15 ## 1 0.0001348239681125494701576655875996380018477793782949447631836 ## 2 0.0009382885903262112121600568848123202769784256815910339355469 ## 3 0.0017914012738853503543812184517491914448328316211700439453125 ## 4 0.0000001021268545377872649108357970722249508099821468931622803 ## 5 0.0000007107375915439390617206211891998535179482132662087678909 ## 6 0.0000013569558875775789074329515451755590049742750125005841255 ## 7 0.0000013643475657859583439243233299320579021696175914257764816 ## 8 0.0007168131149851337830664066430585990019608289003372192382812 ## 9 0.0057840616966580975927270102943111851345747709274291992187500 ## 10 0.0000000000000001145696938456985277283312171491699972437340957 ## 11 0.0000000000000601936494687245644879201301829867522713872138307 ## 12 0.0000000000004857106754824595982789570016222239747178193725041 ## 13 0.0000000000000001745640467031612522788968514235007086808448520 ## 14 0.0000066776797753472399274865707596848807270362158305943012238 ## 15 0.0224999999999999991673327315311325946822762489318847656250000 ## 16 0.0000000000000000000000000000000000000000000000000000001113981 ## 17 0.0000000000000000000000000000000000000000000042613636511423543 ## 18 0.0000000000000000000000000000000000000000143583827581367797582 ## 19 0.0000013643475657859583439243233299320579021696175914257764816 ## 20 0.0007168131149851337830664066430585990019608289003372192382812 ## 21 0.0057840616966580975927270102943111851345747709274291992187500 ## 22 0.0000000000000001145696938456985277283312171491699972437340957 ## 23 0.0000000000000601936494687245644879201301829867522713872138307 ## 24 0.0000000000004857106754824595982789570016222239747178193725041 ## 16 ## 1 0.0000013569558875775789074329515451755590049742750125005841255 ## 2 0.0000007107375915439390617206211891998535179482132662087678909 ## 3 0.0000001021268545377872649108357970722249508099821468931622803 ## 4 0.0017914012738853503543812184517491914448328316211700439453125 ## 5 0.0009382885903262112121600568848123202769784256815910339355469 ## 6 0.0001348239681125494701576655875996380018477793782949447631836 ## 7 0.0000000000004857106754824595982789570016222239747178193725041 ## 8 0.0000000000000601936494687245644879201301829867522713872138307 ## 9 0.0000000000000001145696938456985277283312171491699972437340957 ## 10 0.0057840616966580975927270102943111851345747709274291992187500 ## 11 0.0007168131149851337830664066430585990019608289003372192382812 ## 12 0.0000013643475657859583439243233299320579021696175914257764816 ## 13 0.0000000000000000000000000000000000000000143583827581367797582 ## 14 0.0000000000000000000000000000000000000000000042613636511423543 ## 15 0.0000000000000000000000000000000000000000000000000000001113981 ## 16 0.0224999999999999991673327315311325946822762489318847656250000 ## 17 0.0000066776797753472399274865707596848807270362158305943012238 ## 18 0.0000000000000001745640467031612522788968514235007086808448520 ## 19 0.0000000000004857106754824595982789570016222239747178193725041 ## 20 0.0000000000000601936494687245644879201301829867522713872138307 ## 21 0.0000000000000001145696938456985277283312171491699972437340957 ## 22 0.0057840616966580975927270102943111851345747709274291992187500 ## 23 0.0007168131149851337830664066430585990019608289003372192382812 ## 24 0.0000013643475657859583439243233299320579021696175914257764816 ## 17 ## 1 0.000000710737591543939061720621189199853517948213266 ## 2 0.000001356955887577578907432951545175559004974275013 ## 3 0.000000710737591543939061720621189199853517948213266 ## 4 0.000938288590326211212160056884812320276978425681591 ## 5 0.001791401273885350354381218451749191444832831621170 ## 6 0.000938288590326211212160056884812320276978425681591 ## 7 0.000000000000060193649468724564487920130182986752271 ## 8 0.000000000000485710675482459598278957001622223974718 ## 9 0.000000000000060193649468724564487920130182986752271 ## 10 0.000716813114985133783066406643058599001960828900337 ## 11 0.005784061696658097592727010294311185134574770927429 ## 12 0.000716813114985133783066406643058599001960828900337 ## 13 0.000000000000000000000000000000000000000000004261364 ## 14 0.000000000000000000000000000000000000000014358382758 ## 15 0.000000000000000000000000000000000000000000004261364 ## 16 0.000006677679775347239927486570759684880727036215831 ## 17 0.022499999999999999167332731531132594682276248931885 ## 18 0.000006677679775347239927486570759684880727036215831 ## 19 0.000000000000060193649468724564487920130182986752271 ## 20 0.000000000000485710675482459598278957001622223974718 ## 21 0.000000000000060193649468724564487920130182986752271 ## 22 0.000716813114985133783066406643058599001960828900337 ## 23 0.005784061696658097592727010294311185134574770927429 ## 24 0.000716813114985133783066406643058599001960828900337 ## 18 ## 1 0.0000001021268545377872649108357970722249508099821468931622803 ## 2 0.0000007107375915439390617206211891998535179482132662087678909 ## 3 0.0000013569558875775789074329515451755590049742750125005841255 ## 4 0.0001348239681125494701576655875996380018477793782949447631836 ## 5 0.0009382885903262112121600568848123202769784256815910339355469 ## 6 0.0017914012738853503543812184517491914448328316211700439453125 ## 7 0.0000000000000001145696938456985277283312171491699972437340957 ## 8 0.0000000000000601936494687245644879201301829867522713872138307 ## 9 0.0000000000004857106754824595982789570016222239747178193725041 ## 10 0.0000013643475657859583439243233299320579021696175914257764816 ## 11 0.0007168131149851337830664066430585990019608289003372192382812 ## 12 0.0057840616966580975927270102943111851345747709274291992187500 ## 13 0.0000000000000000000000000000000000000000000000000000001113981 ## 14 0.0000000000000000000000000000000000000000000042613636511423543 ## 15 0.0000000000000000000000000000000000000000143583827581367797582 ## 16 0.0000000000000001745640467031612522788968514235007086808448520 ## 17 0.0000066776797753472399274865707596848807270362158305943012238 ## 18 0.0224999999999999991673327315311325946822762489318847656250000 ## 19 0.0000000000000001145696938456985277283312171491699972437340957 ## 20 0.0000000000000601936494687245644879201301829867522713872138307 ## 21 0.0000000000004857106754824595982789570016222239747178193725041 ## 22 0.0000013643475657859583439243233299320579021696175914257764816 ## 23 0.0007168131149851337830664066430585990019608289003372192382812 ## 24 0.0057840616966580975927270102943111851345747709274291992187500 ## 19 ## 1 0.0008330248056275453864480406984682758775306865572929382324219 ## 2 0.0006166745823446492802411000866413814947009086608886718750000 ## 3 0.0002501787346616134882250348514531879118294455111026763916016 ## 4 0.0000294798909060135976912316729814378390983620192855596542358 ## 5 0.0000218234790719545488843489344787940353853628039360046386719 ## 6 0.0000088535680510412586229854886576973171941062901169061660767 ## 7 0.0017914012738853503543812184517491914448328316211700439453125 ## 8 0.0009382885903262112121600568848123202769784256815910339355469 ## 9 0.0001348239681125494701576655875996380018477793782949447631836 ## 10 0.0000013569558875775789074329515451755590049742750125005841255 ## 11 0.0000007107375915439390617206211891998535179482132662087678909 ## 12 0.0000001021268545377872649108357970722249508099821468931622803 ## 13 0.0057840616966580975927270102943111851345747709274291992187500 ## 14 0.0007168131149851337830664066430585990019608289003372192382812 ## 15 0.0000013643475657859583439243233299320579021696175914257764816 ## 16 0.0000000000004857106754824595982789570016222239747178193725041 ## 17 0.0000000000000601936494687245644879201301829867522713872138307 ## 18 0.0000000000000001145696938456985277283312171491699972437340957 ## 19 0.0224999999999999991673327315311325946822762489318847656250000 ## 20 0.0000066776797753472399274865707596848807270362158305943012238 ## 21 0.0000000000000001745640467031612522788968514235007086808448520 ## 22 0.0000000000000000000000000000000000000000143583827581367797582 ## 23 0.0000000000000000000000000000000000000000000042613636511423543 ## 24 0.0000000000000000000000000000000000000000000000000000001113981 ## 20 ## 1 0.000616674582344649280241100086641381494700908660889 ## 2 0.000833024805627545386448040698468275877530686557293 ## 3 0.000616674582344649280241100086641381494700908660889 ## 4 0.000021823479071954548884348934478794035385362803936 ## 5 0.000029479890906013597691231672981437839098362019286 ## 6 0.000021823479071954548884348934478794035385362803936 ## 7 0.000938288590326211212160056884812320276978425681591 ## 8 0.001791401273885350354381218451749191444832831621170 ## 9 0.000938288590326211212160056884812320276978425681591 ## 10 0.000000710737591543939061720621189199853517948213266 ## 11 0.000001356955887577578907432951545175559004974275013 ## 12 0.000000710737591543939061720621189199853517948213266 ## 13 0.000716813114985133783066406643058599001960828900337 ## 14 0.005784061696658097592727010294311185134574770927429 ## 15 0.000716813114985133783066406643058599001960828900337 ## 16 0.000000000000060193649468724564487920130182986752271 ## 17 0.000000000000485710675482459598278957001622223974718 ## 18 0.000000000000060193649468724564487920130182986752271 ## 19 0.000006677679775347239927486570759684880727036215831 ## 20 0.022499999999999999167332731531132594682276248931885 ## 21 0.000006677679775347239927486570759684880727036215831 ## 22 0.000000000000000000000000000000000000000000004261364 ## 23 0.000000000000000000000000000000000000000014358382758 ## 24 0.000000000000000000000000000000000000000000004261364 ## 21 ## 1 0.0002501787346616134882250348514531879118294455111026763916016 ## 2 0.0006166745823446492802411000866413814947009086608886718750000 ## 3 0.0008330248056275453864480406984682758775306865572929382324219 ## 4 0.0000088535680510412586229854886576973171941062901169061660767 ## 5 0.0000218234790719545488843489344787940353853628039360046386719 ## 6 0.0000294798909060135976912316729814378390983620192855596542358 ## 7 0.0001348239681125494701576655875996380018477793782949447631836 ## 8 0.0009382885903262112121600568848123202769784256815910339355469 ## 9 0.0017914012738853503543812184517491914448328316211700439453125 ## 10 0.0000001021268545377872649108357970722249508099821468931622803 ## 11 0.0000007107375915439390617206211891998535179482132662087678909 ## 12 0.0000013569558875775789074329515451755590049742750125005841255 ## 13 0.0000013643475657859583439243233299320579021696175914257764816 ## 14 0.0007168131149851337830664066430585990019608289003372192382812 ## 15 0.0057840616966580975927270102943111851345747709274291992187500 ## 16 0.0000000000000001145696938456985277283312171491699972437340957 ## 17 0.0000000000000601936494687245644879201301829867522713872138307 ## 18 0.0000000000004857106754824595982789570016222239747178193725041 ## 19 0.0000000000000001745640467031612522788968514235007086808448520 ## 20 0.0000066776797753472399274865707596848807270362158305943012238 ## 21 0.0224999999999999991673327315311325946822762489318847656250000 ## 22 0.0000000000000000000000000000000000000000000000000000001113981 ## 23 0.0000000000000000000000000000000000000000000042613636511423543 ## 24 0.0000000000000000000000000000000000000000143583827581367797582 ## 22 ## 1 0.0000294798909060135976912316729814378390983620192855596542358 ## 2 0.0000218234790719545488843489344787940353853628039360046386719 ## 3 0.0000088535680510412586229854886576973171941062901169061660767 ## 4 0.0008330248056275453864480406984682758775306865572929382324219 ## 5 0.0006166745823446492802411000866413814947009086608886718750000 ## 6 0.0002501787346616134882250348514531879118294455111026763916016 ## 7 0.0000013569558875775789074329515451755590049742750125005841255 ## 8 0.0000007107375915439390617206211891998535179482132662087678909 ## 9 0.0000001021268545377872649108357970722249508099821468931622803 ## 10 0.0017914012738853503543812184517491914448328316211700439453125 ## 11 0.0009382885903262112121600568848123202769784256815910339355469 ## 12 0.0001348239681125494701576655875996380018477793782949447631836 ## 13 0.0000000000004857106754824595982789570016222239747178193725041 ## 14 0.0000000000000601936494687245644879201301829867522713872138307 ## 15 0.0000000000000001145696938456985277283312171491699972437340957 ## 16 0.0057840616966580975927270102943111851345747709274291992187500 ## 17 0.0007168131149851337830664066430585990019608289003372192382812 ## 18 0.0000013643475657859583439243233299320579021696175914257764816 ## 19 0.0000000000000000000000000000000000000000143583827581367797582 ## 20 0.0000000000000000000000000000000000000000000042613636511423543 ## 21 0.0000000000000000000000000000000000000000000000000000001113981 ## 22 0.0224999999999999991673327315311325946822762489318847656250000 ## 23 0.0000066776797753472399274865707596848807270362158305943012238 ## 24 0.0000000000000001745640467031612522788968514235007086808448520 ## 23 ## 1 0.000021823479071954548884348934478794035385362803936 ## 2 0.000029479890906013597691231672981437839098362019286 ## 3 0.000021823479071954548884348934478794035385362803936 ## 4 0.000616674582344649280241100086641381494700908660889 ## 5 0.000833024805627545386448040698468275877530686557293 ## 6 0.000616674582344649280241100086641381494700908660889 ## 7 0.000000710737591543939061720621189199853517948213266 ## 8 0.000001356955887577578907432951545175559004974275013 ## 9 0.000000710737591543939061720621189199853517948213266 ## 10 0.000938288590326211212160056884812320276978425681591 ## 11 0.001791401273885350354381218451749191444832831621170 ## 12 0.000938288590326211212160056884812320276978425681591 ## 13 0.000000000000060193649468724564487920130182986752271 ## 14 0.000000000000485710675482459598278957001622223974718 ## 15 0.000000000000060193649468724564487920130182986752271 ## 16 0.000716813114985133783066406643058599001960828900337 ## 17 0.005784061696658097592727010294311185134574770927429 ## 18 0.000716813114985133783066406643058599001960828900337 ## 19 0.000000000000000000000000000000000000000000004261364 ## 20 0.000000000000000000000000000000000000000014358382758 ## 21 0.000000000000000000000000000000000000000000004261364 ## 22 0.000006677679775347239927486570759684880727036215831 ## 23 0.022499999999999999167332731531132594682276248931885 ## 24 0.000006677679775347239927486570759684880727036215831 ## 24 ## 1 0.0000088535680510412586229854886576973171941062901169061660767 ## 2 0.0000218234790719545488843489344787940353853628039360046386719 ## 3 0.0000294798909060135976912316729814378390983620192855596542358 ## 4 0.0002501787346616134882250348514531879118294455111026763916016 ## 5 0.0006166745823446492802411000866413814947009086608886718750000 ## 6 0.0008330248056275453864480406984682758775306865572929382324219 ## 7 0.0000001021268545377872649108357970722249508099821468931622803 ## 8 0.0000007107375915439390617206211891998535179482132662087678909 ## 9 0.0000013569558875775789074329515451755590049742750125005841255 ## 10 0.0001348239681125494701576655875996380018477793782949447631836 ## 11 0.0009382885903262112121600568848123202769784256815910339355469 ## 12 0.0017914012738853503543812184517491914448328316211700439453125 ## 13 0.0000000000000001145696938456985277283312171491699972437340957 ## 14 0.0000000000000601936494687245644879201301829867522713872138307 ## 15 0.0000000000004857106754824595982789570016222239747178193725041 ## 16 0.0000013643475657859583439243233299320579021696175914257764816 ## 17 0.0007168131149851337830664066430585990019608289003372192382812 ## 18 0.0057840616966580975927270102943111851345747709274291992187500 ## 19 0.0000000000000000000000000000000000000000000000000000001113981 ## 20 0.0000000000000000000000000000000000000000000042613636511423543 ## 21 0.0000000000000000000000000000000000000000143583827581367797582 ## 22 0.0000000000000001745640467031612522788968514235007086808448520 ## 23 0.0000066776797753472399274865707596848807270362158305943012238 ## 24 0.0224999999999999991673327315311325946822762489318847656250000 datos1 ## x y t z((x,y),t) ## 1 0.0 1 1 0.18663474 ## 2 1.5 1 1 -0.02611352 ## 3 3.0 1 1 -0.13505293 ## 4 0.0 6 1 -0.22084643 ## 5 1.5 6 1 -0.05096824 ## 6 3.0 6 1 0.14620080 ## 7 0.0 1 2 0.42292892 ## 8 1.5 1 2 -0.01469679 ## 9 3.0 1 2 0.05574435 ## 10 0.0 6 2 -0.21553278 ## 11 1.5 6 2 -0.10909765 ## 12 3.0 6 2 -0.07788093 ## 13 0.0 1 3 0.01430935 ## 14 1.5 1 3 -0.13051541 ## 15 3.0 1 3 -0.18194652 ## 16 0.0 6 3 -0.13507064 ## 17 1.5 6 3 -0.08788894 ## 18 3.0 6 3 -0.19587955 ## 19 0.0 1 4 -0.27852619 ## 20 1.5 1 4 -0.21383385 ## 21 3.0 1 4 -0.02892198 ## 22 0.0 6 4 -0.11745906 ## 23 1.5 6 4 0.00999727 ## 24 3.0 6 4 -0.18144896 Se requiere predecir predecir en el tiempo t=2.3 y en el lugar s0=(1.5,2.7).Nótese que tanto el dominio espacial como el dominio temporal con continuos y fijos. A continuación se presenta el procedimiento para llevar a cabo Kriging simple con su respectiva varianza de error de predicción estimada grillaSpT0=rbind(expand.grid(x1,x2,t),c(1.5,2.7,2.3)) matDistSp0=as.matrix(dist(grillaSpT0[,1:2])) matDistT0=as.matrix(dist(grillaSpT0[,3:3])) sigma0=cressie1(matDistSp0,matDistT0,p=c(0.15,1.7,1.9)) #vector de covarianzas entre la coordenada a predecir y las observadas sigma0 ## 1 ## 1 0.0224999999999999991673327315311325946822762489318847656250000 ## 2 0.0000066776797753472399274865707596848807270362158305943012238 ## 3 0.0000000000000001745640467031612522788968514235007086808448520 ## 4 0.0000000000000000000000000000000000000000143583827581367797582 ## 5 0.0000000000000000000000000000000000000000000042613636511423543 ## 6 0.0000000000000000000000000000000000000000000000000000001113981 ## 7 0.0057840616966580975927270102943111851345747709274291992187500 ## 8 0.0007168131149851337830664066430585990019608289003372192382812 ## 9 0.0000013643475657859583439243233299320579021696175914257764816 ## 10 0.0000000000004857106754824595982789570016222239747178193725041 ## 11 0.0000000000000601936494687245644879201301829867522713872138307 ## 12 0.0000000000000001145696938456985277283312171491699972437340957 ## 13 0.0017914012738853503543812184517491914448328316211700439453125 ## 14 0.0009382885903262112121600568848123202769784256815910339355469 ## 15 0.0001348239681125494701576655875996380018477793782949447631836 ## 16 0.0000013569558875775789074329515451755590049742750125005841255 ## 17 0.0000007107375915439390617206211891998535179482132662087678909 ## 18 0.0000001021268545377872649108357970722249508099821468931622803 ## 19 0.0008330248056275453864480406984682758775306865572929382324219 ## 20 0.0006166745823446492802411000866413814947009086608886718750000 ## 21 0.0002501787346616134882250348514531879118294455111026763916016 ## 22 0.0000294798909060135976912316729814378390983620192855596542358 ## 23 0.0000218234790719545488843489344787940353853628039360046386719 ## 24 0.0000088535680510412586229854886576973171941062901169061660767 ## 25 0.0001632912431678741887065148263857849997293669730424880981445 ## 2 ## 1 0.000006677679775347239927486570759684880727036215831 ## 2 0.022499999999999999167332731531132594682276248931885 ## 3 0.000006677679775347239927486570759684880727036215831 ## 4 0.000000000000000000000000000000000000000000004261364 ## 5 0.000000000000000000000000000000000000000014358382758 ## 6 0.000000000000000000000000000000000000000000004261364 ## 7 0.000716813114985133783066406643058599001960828900337 ## 8 0.005784061696658097592727010294311185134574770927429 ## 9 0.000716813114985133783066406643058599001960828900337 ## 10 0.000000000000060193649468724564487920130182986752271 ## 11 0.000000000000485710675482459598278957001622223974718 ## 12 0.000000000000060193649468724564487920130182986752271 ## 13 0.000938288590326211212160056884812320276978425681591 ## 14 0.001791401273885350354381218451749191444832831621170 ## 15 0.000938288590326211212160056884812320276978425681591 ## 16 0.000000710737591543939061720621189199853517948213266 ## 17 0.000001356955887577578907432951545175559004974275013 ## 18 0.000000710737591543939061720621189199853517948213266 ## 19 0.000616674582344649280241100086641381494700908660889 ## 20 0.000833024805627545386448040698468275877530686557293 ## 21 0.000616674582344649280241100086641381494700908660889 ## 22 0.000021823479071954548884348934478794035385362803936 ## 23 0.000029479890906013597691231672981437839098362019286 ## 24 0.000021823479071954548884348934478794035385362803936 ## 25 0.000649336057644723011438026016861613243236206471920 ## 3 ## 1 0.0000000000000001745640467031612522788968514235007086808448520 ## 2 0.0000066776797753472399274865707596848807270362158305943012238 ## 3 0.0224999999999999991673327315311325946822762489318847656250000 ## 4 0.0000000000000000000000000000000000000000000000000000001113981 ## 5 0.0000000000000000000000000000000000000000000042613636511423543 ## 6 0.0000000000000000000000000000000000000000143583827581367797582 ## 7 0.0000013643475657859583439243233299320579021696175914257764816 ## 8 0.0007168131149851337830664066430585990019608289003372192382812 ## 9 0.0057840616966580975927270102943111851345747709274291992187500 ## 10 0.0000000000000001145696938456985277283312171491699972437340957 ## 11 0.0000000000000601936494687245644879201301829867522713872138307 ## 12 0.0000000000004857106754824595982789570016222239747178193725041 ## 13 0.0001348239681125494701576655875996380018477793782949447631836 ## 14 0.0009382885903262112121600568848123202769784256815910339355469 ## 15 0.0017914012738853503543812184517491914448328316211700439453125 ## 16 0.0000001021268545377872649108357970722249508099821468931622803 ## 17 0.0000007107375915439390617206211891998535179482132662087678909 ## 18 0.0000013569558875775789074329515451755590049742750125005841255 ## 19 0.0002501787346616134882250348514531879118294455111026763916016 ## 20 0.0006166745823446492802411000866413814947009086608886718750000 ## 21 0.0008330248056275453864480406984682758775306865572929382324219 ## 22 0.0000088535680510412586229854886576973171941062901169061660767 ## 23 0.0000218234790719545488843489344787940353853628039360046386719 ## 24 0.0000294798909060135976912316729814378390983620192855596542358 ## 25 0.0001632912431678741887065148263857849997293669730424880981445 ## 4 ## 1 0.0000000000000000000000000000000000000000143583827581367797582 ## 2 0.0000000000000000000000000000000000000000000042613636511423543 ## 3 0.0000000000000000000000000000000000000000000000000000001113981 ## 4 0.0224999999999999991673327315311325946822762489318847656250000 ## 5 0.0000066776797753472399274865707596848807270362158305943012238 ## 6 0.0000000000000001745640467031612522788968514235007086808448520 ## 7 0.0000000000004857106754824595982789570016222239747178193725041 ## 8 0.0000000000000601936494687245644879201301829867522713872138307 ## 9 0.0000000000000001145696938456985277283312171491699972437340957 ## 10 0.0057840616966580975927270102943111851345747709274291992187500 ## 11 0.0007168131149851337830664066430585990019608289003372192382812 ## 12 0.0000013643475657859583439243233299320579021696175914257764816 ## 13 0.0000013569558875775789074329515451755590049742750125005841255 ## 14 0.0000007107375915439390617206211891998535179482132662087678909 ## 15 0.0000001021268545377872649108357970722249508099821468931622803 ## 16 0.0017914012738853503543812184517491914448328316211700439453125 ## 17 0.0009382885903262112121600568848123202769784256815910339355469 ## 18 0.0001348239681125494701576655875996380018477793782949447631836 ## 19 0.0000294798909060135976912316729814378390983620192855596542358 ## 20 0.0000218234790719545488843489344787940353853628039360046386719 ## 21 0.0000088535680510412586229854886576973171941062901169061660767 ## 22 0.0008330248056275453864480406984682758775306865572929382324219 ## 23 0.0006166745823446492802411000866413814947009086608886718750000 ## 24 0.0002501787346616134882250348514531879118294455111026763916016 ## 25 0.0000012061013013676200694398229357195972966110275592654943466 ## 5 ## 1 0.000000000000000000000000000000000000000000004261364 ## 2 0.000000000000000000000000000000000000000014358382758 ## 3 0.000000000000000000000000000000000000000000004261364 ## 4 0.000006677679775347239927486570759684880727036215831 ## 5 0.022499999999999999167332731531132594682276248931885 ## 6 0.000006677679775347239927486570759684880727036215831 ## 7 0.000000000000060193649468724564487920130182986752271 ## 8 0.000000000000485710675482459598278957001622223974718 ## 9 0.000000000000060193649468724564487920130182986752271 ## 10 0.000716813114985133783066406643058599001960828900337 ## 11 0.005784061696658097592727010294311185134574770927429 ## 12 0.000716813114985133783066406643058599001960828900337 ## 13 0.000000710737591543939061720621189199853517948213266 ## 14 0.000001356955887577578907432951545175559004974275013 ## 15 0.000000710737591543939061720621189199853517948213266 ## 16 0.000938288590326211212160056884812320276978425681591 ## 17 0.001791401273885350354381218451749191444832831621170 ## 18 0.000938288590326211212160056884812320276978425681591 ## 19 0.000021823479071954548884348934478794035385362803936 ## 20 0.000029479890906013597691231672981437839098362019286 ## 21 0.000021823479071954548884348934478794035385362803936 ## 22 0.000616674582344649280241100086641381494700908660889 ## 23 0.000833024805627545386448040698468275877530686557293 ## 24 0.000616674582344649280241100086641381494700908660889 ## 25 0.000004796124084529605901433026160507466784110874869 ## 6 ## 1 0.0000000000000000000000000000000000000000000000000000001113981 ## 2 0.0000000000000000000000000000000000000000000042613636511423543 ## 3 0.0000000000000000000000000000000000000000143583827581367797582 ## 4 0.0000000000000001745640467031612522788968514235007086808448520 ## 5 0.0000066776797753472399274865707596848807270362158305943012238 ## 6 0.0224999999999999991673327315311325946822762489318847656250000 ## 7 0.0000000000000001145696938456985277283312171491699972437340957 ## 8 0.0000000000000601936494687245644879201301829867522713872138307 ## 9 0.0000000000004857106754824595982789570016222239747178193725041 ## 10 0.0000013643475657859583439243233299320579021696175914257764816 ## 11 0.0007168131149851337830664066430585990019608289003372192382812 ## 12 0.0057840616966580975927270102943111851345747709274291992187500 ## 13 0.0000001021268545377872649108357970722249508099821468931622803 ## 14 0.0000007107375915439390617206211891998535179482132662087678909 ## 15 0.0000013569558875775789074329515451755590049742750125005841255 ## 16 0.0001348239681125494701576655875996380018477793782949447631836 ## 17 0.0009382885903262112121600568848123202769784256815910339355469 ## 18 0.0017914012738853503543812184517491914448328316211700439453125 ## 19 0.0000088535680510412586229854886576973171941062901169061660767 ## 20 0.0000218234790719545488843489344787940353853628039360046386719 ## 21 0.0000294798909060135976912316729814378390983620192855596542358 ## 22 0.0002501787346616134882250348514531879118294455111026763916016 ## 23 0.0006166745823446492802411000866413814947009086608886718750000 ## 24 0.0008330248056275453864480406984682758775306865572929382324219 ## 25 0.0000012061013013676200694398229357195972966110275592654943466 ## 7 ## 1 0.0057840616966580975927270102943111851345747709274291992187500 ## 2 0.0007168131149851337830664066430585990019608289003372192382812 ## 3 0.0000013643475657859583439243233299320579021696175914257764816 ## 4 0.0000000000004857106754824595982789570016222239747178193725041 ## 5 0.0000000000000601936494687245644879201301829867522713872138307 ## 6 0.0000000000000001145696938456985277283312171491699972437340957 ## 7 0.0224999999999999991673327315311325946822762489318847656250000 ## 8 0.0000066776797753472399274865707596848807270362158305943012238 ## 9 0.0000000000000001745640467031612522788968514235007086808448520 ## 10 0.0000000000000000000000000000000000000000143583827581367797582 ## 11 0.0000000000000000000000000000000000000000000042613636511423543 ## 12 0.0000000000000000000000000000000000000000000000000000001113981 ## 13 0.0057840616966580975927270102943111851345747709274291992187500 ## 14 0.0007168131149851337830664066430585990019608289003372192382812 ## 15 0.0000013643475657859583439243233299320579021696175914257764816 ## 16 0.0000000000004857106754824595982789570016222239747178193725041 ## 17 0.0000000000000601936494687245644879201301829867522713872138307 ## 18 0.0000000000000001145696938456985277283312171491699972437340957 ## 19 0.0017914012738853503543812184517491914448328316211700439453125 ## 20 0.0009382885903262112121600568848123202769784256815910339355469 ## 21 0.0001348239681125494701576655875996380018477793782949447631836 ## 22 0.0000013569558875775789074329515451755590049742750125005841255 ## 23 0.0000007107375915439390617206211891998535179482132662087678909 ## 24 0.0000001021268545377872649108357970722249508099821468931622803 ## 25 0.0000000071885934411270752634838349332067203301122049197147135 ## 8 ## 1 0.000716813114985133783066406643058599001960828900337 ## 2 0.005784061696658097592727010294311185134574770927429 ## 3 0.000716813114985133783066406643058599001960828900337 ## 4 0.000000000000060193649468724564487920130182986752271 ## 5 0.000000000000485710675482459598278957001622223974718 ## 6 0.000000000000060193649468724564487920130182986752271 ## 7 0.000006677679775347239927486570759684880727036215831 ## 8 0.022499999999999999167332731531132594682276248931885 ## 9 0.000006677679775347239927486570759684880727036215831 ## 10 0.000000000000000000000000000000000000000000004261364 ## 11 0.000000000000000000000000000000000000000014358382758 ## 12 0.000000000000000000000000000000000000000000004261364 ## 13 0.000716813114985133783066406643058599001960828900337 ## 14 0.005784061696658097592727010294311185134574770927429 ## 15 0.000716813114985133783066406643058599001960828900337 ## 16 0.000000000000060193649468724564487920130182986752271 ## 17 0.000000000000485710675482459598278957001622223974718 ## 18 0.000000000000060193649468724564487920130182986752271 ## 19 0.000938288590326211212160056884812320276978425681591 ## 20 0.001791401273885350354381218451749191444832831621170 ## 21 0.000938288590326211212160056884812320276978425681591 ## 22 0.000000710737591543939061720621189199853517948213266 ## 23 0.000001356955887577578907432951545175559004974275013 ## 24 0.000000710737591543939061720621189199853517948213266 ## 25 0.000004529706908199270517319159207181300530464795884 ## 9 ## 1 0.0000013643475657859583439243233299320579021696175914257764816 ## 2 0.0007168131149851337830664066430585990019608289003372192382812 ## 3 0.0057840616966580975927270102943111851345747709274291992187500 ## 4 0.0000000000000001145696938456985277283312171491699972437340957 ## 5 0.0000000000000601936494687245644879201301829867522713872138307 ## 6 0.0000000000004857106754824595982789570016222239747178193725041 ## 7 0.0000000000000001745640467031612522788968514235007086808448520 ## 8 0.0000066776797753472399274865707596848807270362158305943012238 ## 9 0.0224999999999999991673327315311325946822762489318847656250000 ## 10 0.0000000000000000000000000000000000000000000000000000001113981 ## 11 0.0000000000000000000000000000000000000000000042613636511423543 ## 12 0.0000000000000000000000000000000000000000143583827581367797582 ## 13 0.0000013643475657859583439243233299320579021696175914257764816 ## 14 0.0007168131149851337830664066430585990019608289003372192382812 ## 15 0.0057840616966580975927270102943111851345747709274291992187500 ## 16 0.0000000000000001145696938456985277283312171491699972437340957 ## 17 0.0000000000000601936494687245644879201301829867522713872138307 ## 18 0.0000000000004857106754824595982789570016222239747178193725041 ## 19 0.0001348239681125494701576655875996380018477793782949447631836 ## 20 0.0009382885903262112121600568848123202769784256815910339355469 ## 21 0.0017914012738853503543812184517491914448328316211700439453125 ## 22 0.0000001021268545377872649108357970722249508099821468931622803 ## 23 0.0000007107375915439390617206211891998535179482132662087678909 ## 24 0.0000013569558875775789074329515451755590049742750125005841255 ## 25 0.0000000071885934411270752634838349332067203301122049197147135 ## 10 ## 1 0.0000000000004857106754824595982789570016222239747178193725041 ## 2 0.0000000000000601936494687245644879201301829867522713872138307 ## 3 0.0000000000000001145696938456985277283312171491699972437340957 ## 4 0.0057840616966580975927270102943111851345747709274291992187500 ## 5 0.0007168131149851337830664066430585990019608289003372192382812 ## 6 0.0000013643475657859583439243233299320579021696175914257764816 ## 7 0.0000000000000000000000000000000000000000143583827581367797582 ## 8 0.0000000000000000000000000000000000000000000042613636511423543 ## 9 0.0000000000000000000000000000000000000000000000000000001113981 ## 10 0.0224999999999999991673327315311325946822762489318847656250000 ## 11 0.0000066776797753472399274865707596848807270362158305943012238 ## 12 0.0000000000000001745640467031612522788968514235007086808448520 ## 13 0.0000000000004857106754824595982789570016222239747178193725041 ## 14 0.0000000000000601936494687245644879201301829867522713872138307 ## 15 0.0000000000000001145696938456985277283312171491699972437340957 ## 16 0.0057840616966580975927270102943111851345747709274291992187500 ## 17 0.0007168131149851337830664066430585990019608289003372192382812 ## 18 0.0000013643475657859583439243233299320579021696175914257764816 ## 19 0.0000013569558875775789074329515451755590049742750125005841255 ## 20 0.0000007107375915439390617206211891998535179482132662087678909 ## 21 0.0000001021268545377872649108357970722249508099821468931622803 ## 22 0.0017914012738853503543812184517491914448328316211700439453125 ## 23 0.0009382885903262112121600568848123202769784256815910339355469 ## 24 0.0001348239681125494701576655875996380018477793782949447631836 ## 25 0.0000000000000000008000711605775138903917974564434023496189163 ## 11 ## 1 0.000000000000060193649468724564487920130182986752271 ## 2 0.000000000000485710675482459598278957001622223974718 ## 3 0.000000000000060193649468724564487920130182986752271 ## 4 0.000716813114985133783066406643058599001960828900337 ## 5 0.005784061696658097592727010294311185134574770927429 ## 6 0.000716813114985133783066406643058599001960828900337 ## 7 0.000000000000000000000000000000000000000000004261364 ## 8 0.000000000000000000000000000000000000000014358382758 ## 9 0.000000000000000000000000000000000000000000004261364 ## 10 0.000006677679775347239927486570759684880727036215831 ## 11 0.022499999999999999167332731531132594682276248931885 ## 12 0.000006677679775347239927486570759684880727036215831 ## 13 0.000000000000060193649468724564487920130182986752271 ## 14 0.000000000000485710675482459598278957001622223974718 ## 15 0.000000000000060193649468724564487920130182986752271 ## 16 0.000716813114985133783066406643058599001960828900337 ## 17 0.005784061696658097592727010294311185134574770927429 ## 18 0.000716813114985133783066406643058599001960828900337 ## 19 0.000000710737591543939061720621189199853517948213266 ## 20 0.000001356955887577578907432951545175559004974275013 ## 21 0.000000710737591543939061720621189199853517948213266 ## 22 0.000938288590326211212160056884812320276978425681591 ## 23 0.001791401273885350354381218451749191444832831621170 ## 24 0.000938288590326211212160056884812320276978425681591 ## 25 0.000000000000000504144224151701356394133694403909602 ## 12 ## 1 0.0000000000000001145696938456985277283312171491699972437340957 ## 2 0.0000000000000601936494687245644879201301829867522713872138307 ## 3 0.0000000000004857106754824595982789570016222239747178193725041 ## 4 0.0000013643475657859583439243233299320579021696175914257764816 ## 5 0.0007168131149851337830664066430585990019608289003372192382812 ## 6 0.0057840616966580975927270102943111851345747709274291992187500 ## 7 0.0000000000000000000000000000000000000000000000000000001113981 ## 8 0.0000000000000000000000000000000000000000000042613636511423543 ## 9 0.0000000000000000000000000000000000000000143583827581367797582 ## 10 0.0000000000000001745640467031612522788968514235007086808448520 ## 11 0.0000066776797753472399274865707596848807270362158305943012238 ## 12 0.0224999999999999991673327315311325946822762489318847656250000 ## 13 0.0000000000000001145696938456985277283312171491699972437340957 ## 14 0.0000000000000601936494687245644879201301829867522713872138307 ## 15 0.0000000000004857106754824595982789570016222239747178193725041 ## 16 0.0000013643475657859583439243233299320579021696175914257764816 ## 17 0.0007168131149851337830664066430585990019608289003372192382812 ## 18 0.0057840616966580975927270102943111851345747709274291992187500 ## 19 0.0000001021268545377872649108357970722249508099821468931622803 ## 20 0.0000007107375915439390617206211891998535179482132662087678909 ## 21 0.0000013569558875775789074329515451755590049742750125005841255 ## 22 0.0001348239681125494701576655875996380018477793782949447631836 ## 23 0.0009382885903262112121600568848123202769784256815910339355469 ## 24 0.0017914012738853503543812184517491914448328316211700439453125 ## 25 0.0000000000000000008000711605775138903917974564434023496189163 ## 13 ## 1 0.0017914012738853503543812184517491914448328316211700439453125 ## 2 0.0009382885903262112121600568848123202769784256815910339355469 ## 3 0.0001348239681125494701576655875996380018477793782949447631836 ## 4 0.0000013569558875775789074329515451755590049742750125005841255 ## 5 0.0000007107375915439390617206211891998535179482132662087678909 ## 6 0.0000001021268545377872649108357970722249508099821468931622803 ## 7 0.0057840616966580975927270102943111851345747709274291992187500 ## 8 0.0007168131149851337830664066430585990019608289003372192382812 ## 9 0.0000013643475657859583439243233299320579021696175914257764816 ## 10 0.0000000000004857106754824595982789570016222239747178193725041 ## 11 0.0000000000000601936494687245644879201301829867522713872138307 ## 12 0.0000000000000001145696938456985277283312171491699972437340957 ## 13 0.0224999999999999991673327315311325946822762489318847656250000 ## 14 0.0000066776797753472399274865707596848807270362158305943012238 ## 15 0.0000000000000001745640467031612522788968514235007086808448520 ## 16 0.0000000000000000000000000000000000000000143583827581367797582 ## 17 0.0000000000000000000000000000000000000000000042613636511423543 ## 18 0.0000000000000000000000000000000000000000000000000000001113981 ## 19 0.0057840616966580975927270102943111851345747709274291992187500 ## 20 0.0007168131149851337830664066430585990019608289003372192382812 ## 21 0.0000013643475657859583439243233299320579021696175914257764816 ## 22 0.0000000000004857106754824595982789570016222239747178193725041 ## 23 0.0000000000000601936494687245644879201301829867522713872138307 ## 24 0.0000000000000001145696938456985277283312171491699972437340957 ## 25 0.0000043025960066369215722297848769617445441326708532869815826 ## 14 ## 1 0.000938288590326211212160056884812320276978425681591 ## 2 0.001791401273885350354381218451749191444832831621170 ## 3 0.000938288590326211212160056884812320276978425681591 ## 4 0.000000710737591543939061720621189199853517948213266 ## 5 0.000001356955887577578907432951545175559004974275013 ## 6 0.000000710737591543939061720621189199853517948213266 ## 7 0.000716813114985133783066406643058599001960828900337 ## 8 0.005784061696658097592727010294311185134574770927429 ## 9 0.000716813114985133783066406643058599001960828900337 ## 10 0.000000000000060193649468724564487920130182986752271 ## 11 0.000000000000485710675482459598278957001622223974718 ## 12 0.000000000000060193649468724564487920130182986752271 ## 13 0.000006677679775347239927486570759684880727036215831 ## 14 0.022499999999999999167332731531132594682276248931885 ## 15 0.000006677679775347239927486570759684880727036215831 ## 16 0.000000000000000000000000000000000000000000004261364 ## 17 0.000000000000000000000000000000000000000014358382758 ## 18 0.000000000000000000000000000000000000000000004261364 ## 19 0.000716813114985133783066406643058599001960828900337 ## 20 0.005784061696658097592727010294311185134574770927429 ## 21 0.000716813114985133783066406643058599001960828900337 ## 22 0.000000000000060193649468724564487920130182986752271 ## 23 0.000000000000485710675482459598278957001622223974718 ## 24 0.000000000000060193649468724564487920130182986752271 ## 25 0.000124094247233588712365018325023413581220665946603 ## 15 ## 1 0.0001348239681125494701576655875996380018477793782949447631836 ## 2 0.0009382885903262112121600568848123202769784256815910339355469 ## 3 0.0017914012738853503543812184517491914448328316211700439453125 ## 4 0.0000001021268545377872649108357970722249508099821468931622803 ## 5 0.0000007107375915439390617206211891998535179482132662087678909 ## 6 0.0000013569558875775789074329515451755590049742750125005841255 ## 7 0.0000013643475657859583439243233299320579021696175914257764816 ## 8 0.0007168131149851337830664066430585990019608289003372192382812 ## 9 0.0057840616966580975927270102943111851345747709274291992187500 ## 10 0.0000000000000001145696938456985277283312171491699972437340957 ## 11 0.0000000000000601936494687245644879201301829867522713872138307 ## 12 0.0000000000004857106754824595982789570016222239747178193725041 ## 13 0.0000000000000001745640467031612522788968514235007086808448520 ## 14 0.0000066776797753472399274865707596848807270362158305943012238 ## 15 0.0224999999999999991673327315311325946822762489318847656250000 ## 16 0.0000000000000000000000000000000000000000000000000000001113981 ## 17 0.0000000000000000000000000000000000000000000042613636511423543 ## 18 0.0000000000000000000000000000000000000000143583827581367797582 ## 19 0.0000013643475657859583439243233299320579021696175914257764816 ## 20 0.0007168131149851337830664066430585990019608289003372192382812 ## 21 0.0057840616966580975927270102943111851345747709274291992187500 ## 22 0.0000000000000001145696938456985277283312171491699972437340957 ## 23 0.0000000000000601936494687245644879201301829867522713872138307 ## 24 0.0000000000004857106754824595982789570016222239747178193725041 ## 25 0.0000043025960066369215722297848769617445441326708532869815826 ## 16 ## 1 0.0000013569558875775789074329515451755590049742750125005841255 ## 2 0.0000007107375915439390617206211891998535179482132662087678909 ## 3 0.0000001021268545377872649108357970722249508099821468931622803 ## 4 0.0017914012738853503543812184517491914448328316211700439453125 ## 5 0.0009382885903262112121600568848123202769784256815910339355469 ## 6 0.0001348239681125494701576655875996380018477793782949447631836 ## 7 0.0000000000004857106754824595982789570016222239747178193725041 ## 8 0.0000000000000601936494687245644879201301829867522713872138307 ## 9 0.0000000000000001145696938456985277283312171491699972437340957 ## 10 0.0057840616966580975927270102943111851345747709274291992187500 ## 11 0.0007168131149851337830664066430585990019608289003372192382812 ## 12 0.0000013643475657859583439243233299320579021696175914257764816 ## 13 0.0000000000000000000000000000000000000000143583827581367797582 ## 14 0.0000000000000000000000000000000000000000000042613636511423543 ## 15 0.0000000000000000000000000000000000000000000000000000001113981 ## 16 0.0224999999999999991673327315311325946822762489318847656250000 ## 17 0.0000066776797753472399274865707596848807270362158305943012238 ## 18 0.0000000000000001745640467031612522788968514235007086808448520 ## 19 0.0000000000004857106754824595982789570016222239747178193725041 ## 20 0.0000000000000601936494687245644879201301829867522713872138307 ## 21 0.0000000000000001145696938456985277283312171491699972437340957 ## 22 0.0057840616966580975927270102943111851345747709274291992187500 ## 23 0.0007168131149851337830664066430585990019608289003372192382812 ## 24 0.0000013643475657859583439243233299320579021696175914257764816 ## 25 0.0000000000277041296343146712529251226977817482328980691619336 ## 17 ## 1 0.000000710737591543939061720621189199853517948213266 ## 2 0.000001356955887577578907432951545175559004974275013 ## 3 0.000000710737591543939061720621189199853517948213266 ## 4 0.000938288590326211212160056884812320276978425681591 ## 5 0.001791401273885350354381218451749191444832831621170 ## 6 0.000938288590326211212160056884812320276978425681591 ## 7 0.000000000000060193649468724564487920130182986752271 ## 8 0.000000000000485710675482459598278957001622223974718 ## 9 0.000000000000060193649468724564487920130182986752271 ## 10 0.000716813114985133783066406643058599001960828900337 ## 11 0.005784061696658097592727010294311185134574770927429 ## 12 0.000716813114985133783066406643058599001960828900337 ## 13 0.000000000000000000000000000000000000000000004261364 ## 14 0.000000000000000000000000000000000000000014358382758 ## 15 0.000000000000000000000000000000000000000000004261364 ## 16 0.000006677679775347239927486570759684880727036215831 ## 17 0.022499999999999999167332731531132594682276248931885 ## 18 0.000006677679775347239927486570759684880727036215831 ## 19 0.000000000000060193649468724564487920130182986752271 ## 20 0.000000000000485710675482459598278957001622223974718 ## 21 0.000000000000060193649468724564487920130182986752271 ## 22 0.000716813114985133783066406643058599001960828900337 ## 23 0.005784061696658097592727010294311185134574770927429 ## 24 0.000716813114985133783066406643058599001960828900337 ## 25 0.000000000799034607694732358521092635550431282354111 ## 18 ## 1 0.0000001021268545377872649108357970722249508099821468931622803 ## 2 0.0000007107375915439390617206211891998535179482132662087678909 ## 3 0.0000013569558875775789074329515451755590049742750125005841255 ## 4 0.0001348239681125494701576655875996380018477793782949447631836 ## 5 0.0009382885903262112121600568848123202769784256815910339355469 ## 6 0.0017914012738853503543812184517491914448328316211700439453125 ## 7 0.0000000000000001145696938456985277283312171491699972437340957 ## 8 0.0000000000000601936494687245644879201301829867522713872138307 ## 9 0.0000000000004857106754824595982789570016222239747178193725041 ## 10 0.0000013643475657859583439243233299320579021696175914257764816 ## 11 0.0007168131149851337830664066430585990019608289003372192382812 ## 12 0.0057840616966580975927270102943111851345747709274291992187500 ## 13 0.0000000000000000000000000000000000000000000000000000001113981 ## 14 0.0000000000000000000000000000000000000000000042613636511423543 ## 15 0.0000000000000000000000000000000000000000143583827581367797582 ## 16 0.0000000000000001745640467031612522788968514235007086808448520 ## 17 0.0000066776797753472399274865707596848807270362158305943012238 ## 18 0.0224999999999999991673327315311325946822762489318847656250000 ## 19 0.0000000000000001145696938456985277283312171491699972437340957 ## 20 0.0000000000000601936494687245644879201301829867522713872138307 ## 21 0.0000000000004857106754824595982789570016222239747178193725041 ## 22 0.0000013643475657859583439243233299320579021696175914257764816 ## 23 0.0007168131149851337830664066430585990019608289003372192382812 ## 24 0.0057840616966580975927270102943111851345747709274291992187500 ## 25 0.0000000000277041296343146712529251226977817482328980691619336 ## 19 ## 1 0.0008330248056275453864480406984682758775306865572929382324219 ## 2 0.0006166745823446492802411000866413814947009086608886718750000 ## 3 0.0002501787346616134882250348514531879118294455111026763916016 ## 4 0.0000294798909060135976912316729814378390983620192855596542358 ## 5 0.0000218234790719545488843489344787940353853628039360046386719 ## 6 0.0000088535680510412586229854886576973171941062901169061660767 ## 7 0.0017914012738853503543812184517491914448328316211700439453125 ## 8 0.0009382885903262112121600568848123202769784256815910339355469 ## 9 0.0001348239681125494701576655875996380018477793782949447631836 ## 10 0.0000013569558875775789074329515451755590049742750125005841255 ## 11 0.0000007107375915439390617206211891998535179482132662087678909 ## 12 0.0000001021268545377872649108357970722249508099821468931622803 ## 13 0.0057840616966580975927270102943111851345747709274291992187500 ## 14 0.0007168131149851337830664066430585990019608289003372192382812 ## 15 0.0000013643475657859583439243233299320579021696175914257764816 ## 16 0.0000000000004857106754824595982789570016222239747178193725041 ## 17 0.0000000000000601936494687245644879201301829867522713872138307 ## 18 0.0000000000000001145696938456985277283312171491699972437340957 ## 19 0.0224999999999999991673327315311325946822762489318847656250000 ## 20 0.0000066776797753472399274865707596848807270362158305943012238 ## 21 0.0000000000000001745640467031612522788968514235007086808448520 ## 22 0.0000000000000000000000000000000000000000143583827581367797582 ## 23 0.0000000000000000000000000000000000000000000042613636511423543 ## 24 0.0000000000000000000000000000000000000000000000000000001113981 ## 25 0.0003308220230715012912144079582077438317355699837207794189453 ## 20 ## 1 0.000616674582344649280241100086641381494700908660889 ## 2 0.000833024805627545386448040698468275877530686557293 ## 3 0.000616674582344649280241100086641381494700908660889 ## 4 0.000021823479071954548884348934478794035385362803936 ## 5 0.000029479890906013597691231672981437839098362019286 ## 6 0.000021823479071954548884348934478794035385362803936 ## 7 0.000938288590326211212160056884812320276978425681591 ## 8 0.001791401273885350354381218451749191444832831621170 ## 9 0.000938288590326211212160056884812320276978425681591 ## 10 0.000000710737591543939061720621189199853517948213266 ## 11 0.000001356955887577578907432951545175559004974275013 ## 12 0.000000710737591543939061720621189199853517948213266 ## 13 0.000716813114985133783066406643058599001960828900337 ## 14 0.005784061696658097592727010294311185134574770927429 ## 15 0.000716813114985133783066406643058599001960828900337 ## 16 0.000000000000060193649468724564487920130182986752271 ## 17 0.000000000000485710675482459598278957001622223974718 ## 18 0.000000000000060193649468724564487920130182986752271 ## 19 0.000006677679775347239927486570759684880727036215831 ## 20 0.022499999999999999167332731531132594682276248931885 ## 21 0.000006677679775347239927486570759684880727036215831 ## 22 0.000000000000000000000000000000000000000000004261364 ## 23 0.000000000000000000000000000000000000000014358382758 ## 24 0.000000000000000000000000000000000000000000004261364 ## 25 0.000788476060127118755921360460092728317249566316605 ## 21 ## 1 0.0002501787346616134882250348514531879118294455111026763916016 ## 2 0.0006166745823446492802411000866413814947009086608886718750000 ## 3 0.0008330248056275453864480406984682758775306865572929382324219 ## 4 0.0000088535680510412586229854886576973171941062901169061660767 ## 5 0.0000218234790719545488843489344787940353853628039360046386719 ## 6 0.0000294798909060135976912316729814378390983620192855596542358 ## 7 0.0001348239681125494701576655875996380018477793782949447631836 ## 8 0.0009382885903262112121600568848123202769784256815910339355469 ## 9 0.0017914012738853503543812184517491914448328316211700439453125 ## 10 0.0000001021268545377872649108357970722249508099821468931622803 ## 11 0.0000007107375915439390617206211891998535179482132662087678909 ## 12 0.0000013569558875775789074329515451755590049742750125005841255 ## 13 0.0000013643475657859583439243233299320579021696175914257764816 ## 14 0.0007168131149851337830664066430585990019608289003372192382812 ## 15 0.0057840616966580975927270102943111851345747709274291992187500 ## 16 0.0000000000000001145696938456985277283312171491699972437340957 ## 17 0.0000000000000601936494687245644879201301829867522713872138307 ## 18 0.0000000000004857106754824595982789570016222239747178193725041 ## 19 0.0000000000000001745640467031612522788968514235007086808448520 ## 20 0.0000066776797753472399274865707596848807270362158305943012238 ## 21 0.0224999999999999991673327315311325946822762489318847656250000 ## 22 0.0000000000000000000000000000000000000000000000000000001113981 ## 23 0.0000000000000000000000000000000000000000000042613636511423543 ## 24 0.0000000000000000000000000000000000000000143583827581367797582 ## 25 0.0003308220230715012912144079582077438317355699837207794189453 ## 22 ## 1 0.0000294798909060135976912316729814378390983620192855596542358 ## 2 0.0000218234790719545488843489344787940353853628039360046386719 ## 3 0.0000088535680510412586229854886576973171941062901169061660767 ## 4 0.0008330248056275453864480406984682758775306865572929382324219 ## 5 0.0006166745823446492802411000866413814947009086608886718750000 ## 6 0.0002501787346616134882250348514531879118294455111026763916016 ## 7 0.0000013569558875775789074329515451755590049742750125005841255 ## 8 0.0000007107375915439390617206211891998535179482132662087678909 ## 9 0.0000001021268545377872649108357970722249508099821468931622803 ## 10 0.0017914012738853503543812184517491914448328316211700439453125 ## 11 0.0009382885903262112121600568848123202769784256815910339355469 ## 12 0.0001348239681125494701576655875996380018477793782949447631836 ## 13 0.0000000000004857106754824595982789570016222239747178193725041 ## 14 0.0000000000000601936494687245644879201301829867522713872138307 ## 15 0.0000000000000001145696938456985277283312171491699972437340957 ## 16 0.0057840616966580975927270102943111851345747709274291992187500 ## 17 0.0007168131149851337830664066430585990019608289003372192382812 ## 18 0.0000013643475657859583439243233299320579021696175914257764816 ## 19 0.0000000000000000000000000000000000000000143583827581367797582 ## 20 0.0000000000000000000000000000000000000000000042613636511423543 ## 21 0.0000000000000000000000000000000000000000000000000000001113981 ## 22 0.0224999999999999991673327315311325946822762489318847656250000 ## 23 0.0000066776797753472399274865707596848807270362158305943012238 ## 24 0.0000000000000001745640467031612522788968514235007086808448520 ## 25 0.0000150820313937664238202168015545723278592049609869718551636 ## 23 ## 1 0.000021823479071954548884348934478794035385362803936 ## 2 0.000029479890906013597691231672981437839098362019286 ## 3 0.000021823479071954548884348934478794035385362803936 ## 4 0.000616674582344649280241100086641381494700908660889 ## 5 0.000833024805627545386448040698468275877530686557293 ## 6 0.000616674582344649280241100086641381494700908660889 ## 7 0.000000710737591543939061720621189199853517948213266 ## 8 0.000001356955887577578907432951545175559004974275013 ## 9 0.000000710737591543939061720621189199853517948213266 ## 10 0.000938288590326211212160056884812320276978425681591 ## 11 0.001791401273885350354381218451749191444832831621170 ## 12 0.000938288590326211212160056884812320276978425681591 ## 13 0.000000000000060193649468724564487920130182986752271 ## 14 0.000000000000485710675482459598278957001622223974718 ## 15 0.000000000000060193649468724564487920130182986752271 ## 16 0.000716813114985133783066406643058599001960828900337 ## 17 0.005784061696658097592727010294311185134574770927429 ## 18 0.000716813114985133783066406643058599001960828900337 ## 19 0.000000000000000000000000000000000000000000004261364 ## 20 0.000000000000000000000000000000000000000014358382758 ## 21 0.000000000000000000000000000000000000000000004261364 ## 22 0.000006677679775347239927486570759684880727036215831 ## 23 0.022499999999999999167332731531132594682276248931885 ## 24 0.000006677679775347239927486570759684880727036215831 ## 25 0.000035946278853086757667113088077215365956362802535 ## 24 25 ## 1 0.0000088535680510412586229854886576973171941062901169061660767 0.0001632912431678741887065 ## 2 0.0000218234790719545488843489344787940353853628039360046386719 0.0006493360576447230114380 ## 3 0.0000294798909060135976912316729814378390983620192855596542358 0.0001632912431678741887065 ## 4 0.0002501787346616134882250348514531879118294455111026763916016 0.0000012061013013676200694 ## 5 0.0006166745823446492802411000866413814947009086608886718750000 0.0000047961240845296059014 ## 6 0.0008330248056275453864480406984682758775306865572929382324219 0.0000012061013013676200694 ## 7 0.0000001021268545377872649108357970722249508099821468931622803 0.0000000071885934411270753 ## 8 0.0000007107375915439390617206211891998535179482132662087678909 0.0000045297069081992705173 ## 9 0.0000013569558875775789074329515451755590049742750125005841255 0.0000000071885934411270753 ## 10 0.0001348239681125494701576655875996380018477793782949447631836 0.0000000000000000008000712 ## 11 0.0009382885903262112121600568848123202769784256815910339355469 0.0000000000000005041442242 ## 12 0.0017914012738853503543812184517491914448328316211700439453125 0.0000000000000000008000712 ## 13 0.0000000000000001145696938456985277283312171491699972437340957 0.0000043025960066369215722 ## 14 0.0000000000000601936494687245644879201301829867522713872138307 0.0001240942472335887123650 ## 15 0.0000000000004857106754824595982789570016222239747178193725041 0.0000043025960066369215722 ## 16 0.0000013643475657859583439243233299320579021696175914257764816 0.0000000000277041296343147 ## 17 0.0007168131149851337830664066430585990019608289003372192382812 0.0000000007990346076947324 ## 18 0.0057840616966580975927270102943111851345747709274291992187500 0.0000000000277041296343147 ## 19 0.0000000000000000000000000000000000000000000000000000001113981 0.0003308220230715012912144 ## 20 0.0000000000000000000000000000000000000000000042613636511423543 0.0007884760601271187559214 ## 21 0.0000000000000000000000000000000000000000143583827581367797582 0.0003308220230715012912144 ## 22 0.0000000000000001745640467031612522788968514235007086808448520 0.0000150820313937664238202 ## 23 0.0000066776797753472399274865707596848807270362158305943012238 0.0000359462788530867576671 ## 24 0.0224999999999999991673327315311325946822762489318847656250000 0.0000150820313937664238202 ## 25 0.0000150820313937664238202168015545723278592049609869718551636 0.0224999999999999991673327 lambda=solve(sigma)%*%sigma0[25,-25] lambda ## [,1] ## 1 0.00758872879 ## 2 0.03051466481 ## 3 0.00758872879 ## 4 -0.00003276782 ## 5 0.00011662647 ## 6 -0.00003276782 ## 7 -0.00421288727 ## 8 -0.01073643525 ## 9 -0.00421288727 ## 10 -0.00005666790 ## 11 -0.00009187561 ## 12 -0.00005666790 ## 13 -0.00554359594 ## 14 -0.00485786885 ## 15 -0.00554359594 ## 16 -0.00022122643 ## 17 -0.00045970408 ## 18 -0.00022122643 ## 19 0.01587928193 ## 20 0.03629635060 ## 21 0.01587928193 ## 22 0.00070649170 ## 23 0.00168519595 ## 24 0.00070649170 z_pred0=t(lambda)%*%datos1[,4] z_pred0 ## [,1] ## [1,] -0.01340187 VarErropred0=sigma[1,1]-t(sigma0[25,-25])%*%solve(sigma)%*%sigma0[25,-25] VarErropred0 ## [,1] ## [1,] 0.0224392 11.3 Algunas funciones de covarianza espacio temporal no separables ##Funciones de covarianza espacio temporal p vector de parámetros para cada modelo exp_esp_temp=function(h,u,p){ ((p[1])^2)*exp(-h/p[2]-u/p[3])} gauss_esp_temp=function(h,u,p){ (p[1]^2)*exp(-(h/p[2])^2-(u/p[3])^2)} cressie1=function(h,u,p){ (p[1]^2/((p[2]^2*u^2+1)))*exp(-(p[3]^2*h^2)/(p[2]^2*u^2+1))} Gneiting1=function(h,u,p){ p[1]^2/((p[2]*u^(2*p[3])+1)^(p[4]))*exp(-(p[6]*h^(2*p[5]))/((p[2]*u^(2*p[3])+1)^(p[4]*p[5])))} Gneiting2=function(h,u,sigma,p){ p[1]^2/((2^(p[3]-1))*p[7](p[3])*(p[2]*u^(2*p[3])+1)^(p[4]+p[5]))* (((p[6]*h)/((p[2]*u^(2*p[3])+1)^(p[5]/2)))^p[3])* besselK(((p[6]*h)/((p[2]*u^(2*p[3])+1)^(p[5]/2))),p[3])} Iaco_Cesare=function(h,u,a,b,c){ (1+h^p[1]+u^p[2])^(-p[3])} 11.3.1 C R E S S I E - H U A N G (1999) #sigma:desviacion estandar, a es el parámetros de escala del tiempo, b es el parámetros de escala del espacio, d es la dimensión espacial; a,b positivos CH_1=function(h,u,p,d){ (p[1]^2/((p[2]^2*u^2+1)^(d/2)))*exp(-(p[3]^2*h^2)/(p[2]^2*u^2+1))} CH_2=function(h,u,p,d){ (p[1]^2/((p[2]*abs(u)+1)^(d/2)))*exp(-(p[3]^2*h^2)/(p[2]*abs(u)+1))} CH_3=function(h,u,p,d){ p[1]^2*((p[2]^2)*(u^2)+1)/(((p[2]^2)*(u^2)+1)^2+(p[3]^2)*h^2)^((d+1)/2)} CH_4=function(h,u,p,d){ p[1]^2*(p[2]*abs(u)+1)/((p[2]*abs(u)+1)^2+(p[3]^2)*h^2)^((d+1)/2)} #el caso mas general de C R E S S I E - H U A N G (1999) es cuando d=2, entonces queda CH_1=function(h,u,p){ (p[1]^2/((p[2]^2*u^2+1)))*exp(-(p[3]^2*h^2)/(p[2]^2*u^2+1))} CH_2=function(h,u,p){ (p[1]^2/((p[2]*abs(u)+1)))*exp(-(p[3]^2*h^2)/(p[2]*abs(u)+1))} CH_3=function(h,u,p){ p[1]^2*((p[2]^2)*(u^2)+1)/(((p[2]^2)*(u^2)+1)^2+(p[3]^2)*h^2)^((3)/2)} CH_4=function(h,u,p){ p[1]^2*(p[2]*abs(u)+1)/((p[2]*abs(u)+1)^2+(p[3]^2)*h^2)^((3)/2)} 11.3.2 Gneiting (2002), combina fun1, fun2 y psi en Gneiting #fun1 phi1=function(r,c,gama,v){ v*exp(-c*r^gama)} #c&gt;0, 0&lt;gama&lt;=1, siempre v=1 phi2=function(r,c,gama,v){ ((2^(v-1))*gamma(v))^(-1)*(c*r^0.5)^v*besselK(c*r^0.5,v)} #c&gt;0, v&gt;0 phi3=function(r,c,gama,v){ (1+c*r^gama)^(-v)} #c&gt;0, 0&lt;gama&lt;=1, v&gt;0 phi4=function(r,c,gama,v){ gama*(2^v)*(exp(c*r^0.5)+exp(-c*r^0.5))^(-v)} #c&gt;0, v&gt;0, siempre gama=1 #fun2 psi1=function(r,a,alpha,beta){ (a*r^alpha+1)^beta} #a&gt;0, 0&lt;alpha&lt;=1, 0&lt;=beta&lt;=1 psi2=function(r,a,alpha,beta){ log(a*r^alpha+beta)/log(beta)} #a&gt;0, beta&gt;1, 0&lt;alpha&lt;=1 psi3=function(r,a,alpha,beta){ (a*r^alpha+beta)/(beta*(a*r^alpha+1))} #a&gt;0, 0&lt;beta&lt;=1 0&lt;alpha&lt;=1 #Cualquier combinación genera una función de covarianza válida Gneiting=function(h,u,sigma,d,a,alpha,beta,c,gama,v,psi,phi){ (sigma^2/(psi((abs(u)^2),a,alpha,beta))^(d/2))*phi(h^2/(psi(abs(u)^2,a,alpha,beta)),c,gama,v)} #el caso mas general de Gneiting (2002) es cuando d=2, entonces queda Gneiting=function(h,u,sigma,a,alpha,beta,c,gama,v,psi,phi){ (sigma^2/(psi((abs(u)^2),a,alpha,beta)))* phi(h^2/(psi(abs(u)^2,a,alpha,beta)),c,gama,v)} 11.3.2.1 IACO_CESSARE C_IACO_CESSARE=function(h,u,sigma,a,b,alpha,beta,gama){ (1 + (h/a)^alpha + (u/b)^beta)^(-gama)} #(Porcu, 2007) Basado en la función de supervivencia de Dagum #función de Dagum Dagum=function(r,lambda,theta,epsilon){ 1-1/(1+lambda*r^(-theta))^epsilon} #lamdba, theta in (0,7), epsilon in (0,7) Dagumm=function(r,lambda,theta,epsilon){ ifelse(r==0,1,Dagum(r,lambda,theta,epsilon))} Porcu_sep=function(h,u,lambda_h,theta_h,epsilon_h,lambda_u,theta_u,epsilon_u){ Dagumm(h,lambda_h,theta_h,epsilon_h)*Dagumm(u,lambda_u,theta_u,epsilon_u)} Porcu_Nsep=function(h,u,lambda_h,theta_h,epsilon_h,lambda_u,theta_u,epsilon_u,vartheta){ vartheta*Dagumm(h,lambda_h,theta_h,epsilon_h)+(1-vartheta)*Dagumm(u,lambda_u,theta_u,epsilon_u)} "],["análisis-de-datos-funcionales.html", "Chapter 12 Análisis de datos funcionales 12.1 Análisis de datos funcionales (ADF) - Análisis exploratorio 12.2 Análisis de datos funcionales (ADF) - Análisis gráfico 12.3 Modelos lineales 12.4 Modelos lineales funcionales (Regresión Funcional) 12.5 Estadística Espacial 12.6 Patrones Puntuales", " Chapter 12 Análisis de datos funcionales 12.1 Análisis de datos funcionales (ADF) - Análisis exploratorio 12.1.1 Datos funcionales 12.1.1.1 Descripción Los desarrollos tecnólogicos han hecho posible que los investigadores de muchas áreas dispongan de grandes volúmenes de información para un mismo individuo. Usualmente éstos datos pueden ser representados a través de curvas o en general de funciones. En el ADF la unidad básica de información es la función completa, más que un conjunto de valores (Ramsay and Dalzell, 1991), es decir, que un dato funcional se puede establecer como la extensión de medidas repetidas cuando la cantidad de mediciones (\\(M\\)) en un determinado individuo es muy grande. Ferraty and Vieu (2006) definen una variable aleatoria funcional \\(\\chi\\), como una variable aleatoria que toma valores en un espacio de funciones, es decir, un espacio infinito dimensional (espacio funcional). Una observación \\(x\\) de la variable aleatoria \\(\\chi\\) se denomina dato funcional. Un conjunto de datos funcionales \\(x_1, x_2, ..., x_n\\) es la observación de \\(n\\) variables funcionales distribuidas como \\(\\chi\\). Un dato funcional \\(x_i(t), t ∈ T = [a, b] ⊂ R\\), es representado usualmente como un conjunto finito de pares \\((t_j, x_{ij})\\) con \\(t_j\\) \\(\\in\\) \\(T\\), \\(j = 1, 2, ..., M\\), dónde \\(M\\) representa la cantidad de puntos en los cuales es observada la variable de interés y \\(y_{ij} = \\chi_i(t_j)\\) (si no existe error observacional) o \\(y_{ij} = \\chi_i(t_j) + ε_j\\) (en caso contrario). Por ejemplo, consideremos la temperatura promedio mensual de la superficie del océano en grados Celsius, registrada desde Enero de 1982 a Abril de 2022, disponible en:https://www.cpc.ncep.noaa.gov/data/indices/sstoi.indices. Realizamos la lectura de los datos: rm(list=ls()) library(fda) ## Loading required package: splines ## Loading required package: fds ## Loading required package: rainbow ## Loading required package: pcaPP ## Loading required package: RCurl ## ## Attaching package: &#39;RCurl&#39; ## The following object is masked from &#39;package:lmtest&#39;: ## ## reset ## Loading required package: deSolve ## ## Attaching package: &#39;fda&#39; ## The following object is masked from &#39;package:graphics&#39;: ## ## matplot library(fda.usc) ## Loading required package: mgcv ## Loading required package: nlme ## ## Attaching package: &#39;nlme&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## collapse ## This is mgcv 1.8-39. For overview type &#39;help(&quot;mgcv-package&quot;)&#39;. ## fda.usc is running sequentially usign foreach package ## Please, execute ops.fda.usc() once to run in local parallel mode ## Deprecated functions: min.basis, min.np, anova.hetero, anova.onefactor, anova.RPm ## New functions: optim.basis, optim.np, fanova.hetero, fanova.onefactor, fanova.RPm ## ---------------------------------------------------------------------------------- library(rainbow) library(MASS) library(xtable) Datos =read.delim2(&quot;data_11_PatronesPuntuales/1_AnalisisExploratorio/sstoi.indices1.txt&quot;,header=T,dec=&quot;.&quot;, sep = &quot;\\t&quot;) summary(Datos) ## YR MON NINO1.2 ANOM NINO3 ANOM.1 ## Min. :1982 Min. : 1.000 Min. :19.06 Min. :-1.90000 Min. :23.38 Min. :-2.16000 ## 1st Qu.:1992 1st Qu.: 3.000 1st Qu.:21.23 1st Qu.:-0.73250 1st Qu.:25.00 1st Qu.:-0.65000 ## Median :2002 Median : 6.000 Median :23.14 Median :-0.23500 Median :25.93 Median :-0.15000 ## Mean :2002 Mean : 6.467 Mean :23.25 Mean :-0.05118 Mean :25.97 Mean :-0.06033 ## 3rd Qu.:2012 3rd Qu.: 9.000 3rd Qu.:25.22 3rd Qu.: 0.44000 3rd Qu.:26.89 3rd Qu.: 0.42000 ## Max. :2022 Max. :12.000 Max. :28.51 Max. : 4.03000 Max. :28.81 Max. : 3.07000 ## NINO4 ANOM.2 NINO3.4 ANOM.3 ## Min. :26.36 Min. :-1.87000 Min. :24.56 Min. :-2.22000 ## 1st Qu.:28.02 1st Qu.:-0.55250 1st Qu.:26.35 1st Qu.:-0.65250 ## Median :28.57 Median :-0.00500 Median :27.07 Median :-0.11000 ## Mean :28.46 Mean :-0.08946 Mean :27.02 Mean :-0.06878 ## 3rd Qu.:28.98 3rd Qu.: 0.38000 3rd Qu.:27.69 3rd Qu.: 0.45000 ## Max. :30.22 Max. : 1.55000 Max. :29.54 Max. : 2.72000 Reorganizamos la información para que cada año sea una curva. No tenemos en cuenta el año 2022 por no disponer de la información de todo el año. temp &lt;- matrix(Datos$NINO1.2[-c(481:484)], nrow=12, 40) colnames(temp)=c(1982:2021) Construimos las gráficas para cada año month&lt;-1:12 plot(month, temp[,1], type=&quot;b&quot;, ylim=c(18, 30), xlab=&quot;Mes&quot;, ylab=&quot;temperatura&quot;) for(i in 2:ncol(temp)) lines(month, temp[,i], type=&quot;b&quot;, col=i) 12.1.1.2 Suavizamiento de curvas Una herramienta no paramétrica de mucha utilidad en el ADF es el suavizado de curvas a través de funciones. El procedimiento consiste en aproximar las funciones del espacio considerado a través de (Ramsay and Silverman, 2005): \\[\\begin{equation} \\chi(t) = \\sum_{l=1}^K c_lB_l(t) = c&#39;B(t) \\end{equation}\\] dónde K es el número de funciones de la base. En la literatura exisste varias funciones base que permiten desarrollar la expansión. La selección del tipo de funciones de la base depende de las caracteríticas que cumpla que fenómeno de estudio. Por ejemplo, las series de Fourier se utilizan para funciones con comportamientos cíclicos o periódicos y las bases monomiales se utilizan cuando existen tendencias simples que pueden ser ajustadas mediante líneas rectas, polinomios cuadráticos, polinomios de orden superior, etc. Las bases más usuales son aquellas basadas en splines debido a que son más flexibles y se ajustan de mejor manera a diferentes comportamientos. Dentro de estas se encuentran B-splines, M-splines, I-splines, y fucniones de potencia truncadas. 12.1.1.2.1 Bases monomiales Las bases monomiales requieren el dominio y el número de base. Por ejemplo, la base monomial con K=6 funciones de base definidas en el intervalo [0,1] se puede construir con: library(fda) bbasis_obj = create.monomial.basis(rangeval=c(0,1), nbasis = 6) Esto devolverá una salida de “funciones”. Para evaluar las bases en una cuadrícula de puntos \\(s\\), debemos: library(fda) x &lt;- seq(0,1,length.out=100) bbasisevals &lt;- eval.basis(x, bbasis_obj) # dim(basisevals) matplot(x, bbasisevals, type=&#39;l&#39;, lty=1, col=rainbow(6), xlab=&quot;x&quot;, ylab=&quot;bases&quot;, main=&quot;base monomial con k = 6&quot;) 12.1.1.2.2 Bases de Fourier Para utilizarlas bases de Fourier se requiere que se defina el dominio, el período de oscilación y el número de funciones de base. fbasis_obj &lt;- create.fourier.basis(rangeval=c(0,1), nbasis=65, period = 1) fbasisevals &lt;- eval.basis(x, fbasis_obj) matplot(x, fbasisevals[, 1:3], type=&#39;l&#39;, lty=1, col=rainbow(3), xlab=&quot;x&quot;, ylab=&quot;bases&quot;, main=&quot;Primeras tres bases de Fourier&quot;) 12.1.1.2.3 B-splines Las bases B-spline requieren el dominio, el número de funciones de la base y el orden. bsbasis_obj &lt;- create.bspline.basis(rangeval=c(0,1), nbasis=10, norder=4) bsbasisevals &lt;- eval.basis(x, bsbasis_obj) matplot(x, bsbasisevals, type=&#39;l&#39;, lty=1, col=rainbow(15), xlab=&quot;x&quot;, ylab=&quot;bases&quot;, main=&quot;B-spline cubica con K = 10&quot;) 12.1.1.2.4 Otras bases El paquete también se puede usar para construir otros tipos de bases. Para revisar la lista de bases disponibles se puede utilizar $ ?create. + tab$ 12.1.1.2.5 Suavizamiento de la temperatura La temperatura es una variable que se puede tomar en intervalos más pequeños (diaria, cada hora, etc). Es decir, al realizar la gráfica anterior estamos suponiendo que podemos discretizar la variable de temperatura a través de la medición mensual.La primera tarea es convertir estos valores discretos en una función que puede tomar valores en cualquier valor de argumento deseado \\(x_i(t)\\). Si se supone que estas observaciones no presentan un término de error asociado, el proceso de generación de la función (curva) será un proceso de interpolación, pero si tienen algún error observacional que necesita modelarse, entonces la conversión de datos (finitos) a funciones (que teóricamente se pueden evaluar en un número infinito de puntos) se enmarca en los procesos de suavizamiento. En consecuencia, requerimos una estrategia para construir funciones con parámetros que sean fáciles de estimar y que puedan ajustarse casi a cualquier característica de la curva. Por otro lado, no queremos usar más parámetros de los que necesitamos, ya que hacerlo aumentaría en gran medida el tiempo de cálculo y complicar los análisis. Para el caso de la temperatura se utiliza una B-spline de orden 4. BSpl &lt;- create.bspline.basis(norder=4, breaks=seq(0,12,length=5)) plot(BSpl) Ftemp &lt;- Data2fd(temp, basisobj=BSpl) ## &#39;y&#39; is missing, using &#39;argvals&#39; ## &#39;argvals&#39; is missing; using seq( 0 , 12 , length= 12 ) plot(Ftemp, main=&quot;Datos suavizados de la Temperatura&quot;, xlab = &quot;Mes&quot;, ylab = &quot;Temperatura oC&quot;, ylim=c(18,30)) ## [1] &quot;done&quot; En el proceso de suavizamiento es necesario tener en cuenta la rugosidad como un aspecto fundamental. El método utilizado para aproximar funciones mediante una base de funciones B-splines se basa en minimizar el sistema: \\[\\begin{equation} GCV = \\min_c \\sum_{j =1}^M (y_j - S(t_j))^2 + \\lambda\\int_t (S&#39;&#39;(t)dt) \\end{equation}\\] con \\(\\lambda\\) un parámetro de penalización para disminuir la variabilidad del ajuste. El número de funciones base (K) y el coeficiente \\(\\lambda\\) son estimados a través de procedimientos de validación cruzada (Ramsay and Silverman, 2005). Con el siguiente programa se puede establecer la estimación del parámetro de suavizamiento óptimo. loglam = seq(0,0.05,0.001) nlam = length(loglam) dfsave = rep(NA,nlam) gcvsave = rep(NA,nlam) for (ilam in 1:nlam) { lambda = loglam[ilam] fdParobj = fdPar(BSpl, Lfdobj=NULL, lambda= lambda) smoothlist = smooth.basis(1:12, temp, fdParobj) dfsave[ilam] = smoothlist$df gcvsave[ilam] = sum(smoothlist$gcv) } plot(loglam,gcvsave,xlab=expression(lambda),ylab=expression(GCV(lambda)), main=&quot;Parámetros de suavizamiento versus GCV&quot;,type=&quot;b&quot;,cex=0.7) Tomando como referencia los 40 añoos reportados (de 1982 a 2021) en la base de datos de interés, se evidencia que el punto que minimiza la estadística GCV se encuentra alrededor de \\(\\nu\\) = 0.017 con valores muy superiores antes de 0.01 y después de 0.04. Se destaca que dicho parámetro minimiza la suma del criterio GCV de todas las 40 curvas que se encuentran dentro de la muestra, es decir, el valor de dicho parámetro resulta ser el óptimo en relación con el proceso de suavizamiento de todas las curvas dentro de la muestra. 12.1.1.3 Estadística descriptiva Dado un conjunto de datos funcionales \\(x_1, x_2, ..., x_n\\) definidos en \\(t ⊂ T ∈ R\\), las correspondientes funciones descriptivas están dadas por las expresiones (Ramsay and Silverman, 2005): \\(Media:\\bar{\\chi}(t) = \\frac{\\sum_{i=1}^n \\chi_i(t)}{n}\\) \\(Varianza: Var(\\chi(t)) = \\frac{\\sum_{i=1}^n (\\chi_i(t) - \\bar{\\chi}(t))^2}{n}\\) \\(Desviación estándar: \\sigma(\\chi(t)) = \\sqrt{var(\\chi(t)}\\) Así, se puede concluir que las estadísticas descriptivas univariadas clásicas se aplican igualmente cuando se tienen datos funcionales. Sin embargo se resalta que en este caso, los objetos calculados corresponden a curvas. meanfdh &lt;- mean.fd(Ftemp) varfdh &lt;-var.fd(Ftemp) stdvfdh &lt;- stddev.fd(Ftemp) plot(Ftemp,col=8, lty=1, xlab = &quot;Mes&quot;, ylab = &quot;Temperatura oC&quot;) ## [1] &quot;done&quot; lines(meanfdh,col=2,lwd=2) par(mfrow=c(1,2)) plot(varfdh, main=&quot; Superficie de varianza&quot;, xlab = &quot;t&quot;, ylab = &quot;s&quot;) plot(stdvfdh, main=&quot;Desviación estándar&quot;, xlab = &quot;Mes&quot;, ylab = &quot;Temperatura oC&quot;) ## [1] &quot;done&quot; 12.1.2 Análisis gráfico y detección de outliers Es posible realizar detección de datos atípicos (outliers) a través de las herramientas: bagplot, HDR y boxplot para datos funcionales. Con respecto a la base de datos de la temperatura, utilizando las profundidades dadas a través del criterio de bagplot, se muestran nueves curvas atípicas. La identicación de las curvas se encuentra en la parte superior del panel izquierdo de la siguiente figura. Se destaca, que el factor de inflación utilizado en este caso toma el valor de 1.96 que es el establecido por defecto en la función tipo bag. TempTs = sfts(ts(as.numeric(temp), start = c(1982,1),frequency = 12), xname = &quot;Mes&quot;, yname = &quot;Temperatura oC&quot;) par(mfrow=c(1,2)) fboxplot(data= TempTs, plot.type = &quot;functional&quot;, type = &quot;bag&quot;, projmethod = &quot;PCAproj&quot;) fboxplot(data= TempTs, plot.type = &quot;bivariate&quot;, type = &quot;bag&quot;, projmethod = &quot;PCAproj&quot;, ylim = c(-6,6), xlim = c(-15,6)) Análogamente, teniendo en cuenta la profundidad a través del criterio de HDR plot, se evidencian dos curvas atípicasicas identificadas con los años 1997 y 2015. Para este caso los porcentajes de cobertura de los datos atipicos y de la región central tenidos en cuenta fueron los establecidos por defecto en la respectiva función (0.05, 0.5). par(mfrow=c(1,2)) fboxplot(data= TempTs, plot.type = &quot;functional&quot;, type = &quot;hdr&quot;, projmethod = &quot;PCAproj&quot;) fboxplot(data= TempTs, plot.type = &quot;bivariate&quot;, type = &quot;hdr&quot;, projmethod = &quot;PCAproj&quot;, ylim = c(-6,6), xlim = c(-15,6)) Finalmente, al utilizar la herramienta del boxplot funcional, teniendo en cuenta la profundidad dada por la versión modificada de Band-depth, existe una curva atípica (1990). La probabilidad de la región central utilizada para realizar el gráfico fue de 0.5. par(mfrow=c(1,1)) fbplot(fit= temp, method = &quot;BD2&quot;, xlab = &quot;Mes&quot;, ylab = &quot;Temperatura oC&quot;) ## $depth ## 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 ## 0.05000000 0.05000000 0.09871795 0.05000000 0.12179487 0.20384615 0.05000000 0.13205128 0.23846154 0.07820513 ## 1992 1993 1994 1995 1996 1997 1998 1999 2000 2001 ## 0.09102564 0.21153846 0.06666667 0.10384615 0.05000000 0.05000000 0.05000000 0.06923077 0.13717949 0.12051282 ## 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 ## 0.10641026 0.06025641 0.10384615 0.06282051 0.06538462 0.05000000 0.10769231 0.13653846 0.06153846 0.13974359 ## 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 ## 0.09102564 0.05000000 0.05512821 0.05769231 0.11666667 0.05256410 0.07243590 0.08589744 0.11923077 0.06410256 ## ## $outpoint ## [1] 16 ## ## $medcurve ## 1990 ## 9 Al comparar la detección de datos atípicos utilizando las tres herramientas mencionadas (bagplot, hdr plot y fbplot) en la muestra de las 40 curvas de temperatura, se evidencia que el bagplot resulta ser la herramienta más estricta o exigente en cuanto a que detecta nueve curvas como atípicas, mientras que las otras dos detectaron dos y una, respectivamente. Es importante destacar que, lo que permite comparar las diferentes herramientas en términos de exigencia es utilizar las opciones de probabilidades de cobertura y factor de infación establecidas por defecto. par(mfrow=c(1,1)) MedFM = fdepth(data = TempTs, type = &quot;FM&quot;, trim = 0.1) plot(MedFM) MedRP = fdepth(data = TempTs, type = &quot;RP&quot;, trim = 0.1) plot(MedRP) MedRPD = fdepth(data = TempTs, type = &quot;RPD&quot;, trim = 0.1) plot(MedRPD) 12.2 Análisis de datos funcionales (ADF) - Análisis gráfico Por ejemplo, consideremos la temperatura promedio mensual de la superficie del océano en grados Celsius, registrada desde Enero de 1982 a Abril de 2022, disponible en:https://www.cpc.ncep.noaa.gov/data/indices/sstoi.indices. Realizamos la lectura de los datos: library(fda) library(fda.usc) library(rainbow) library(MASS) library(xtable) Datos =read.delim2(&quot;data_11_PatronesPuntuales/2_AnalisisGrafico/sstoi.indices1.txt&quot;,header=T,dec=&quot;.&quot;, sep = &quot;\\t&quot;) summary(Datos) ## YR MON NINO1.2 ANOM NINO3 ANOM.1 ## Min. :1982 Min. : 1.000 Min. :19.06 Min. :-1.90000 Min. :23.38 Min. :-2.16000 ## 1st Qu.:1992 1st Qu.: 3.000 1st Qu.:21.23 1st Qu.:-0.73250 1st Qu.:25.00 1st Qu.:-0.65000 ## Median :2002 Median : 6.000 Median :23.14 Median :-0.23500 Median :25.93 Median :-0.15000 ## Mean :2002 Mean : 6.467 Mean :23.25 Mean :-0.05118 Mean :25.97 Mean :-0.06033 ## 3rd Qu.:2012 3rd Qu.: 9.000 3rd Qu.:25.22 3rd Qu.: 0.44000 3rd Qu.:26.89 3rd Qu.: 0.42000 ## Max. :2022 Max. :12.000 Max. :28.51 Max. : 4.03000 Max. :28.81 Max. : 3.07000 ## NINO4 ANOM.2 NINO3.4 ANOM.3 ## Min. :26.36 Min. :-1.87000 Min. :24.56 Min. :-2.22000 ## 1st Qu.:28.02 1st Qu.:-0.55250 1st Qu.:26.35 1st Qu.:-0.65250 ## Median :28.57 Median :-0.00500 Median :27.07 Median :-0.11000 ## Mean :28.46 Mean :-0.08946 Mean :27.02 Mean :-0.06878 ## 3rd Qu.:28.98 3rd Qu.: 0.38000 3rd Qu.:27.69 3rd Qu.: 0.45000 ## Max. :30.22 Max. : 1.55000 Max. :29.54 Max. : 2.72000 Reorganizamos la información para que cada año sea una curva. No tenemos en cuenta el año 2022 por no disponer de la información de todo el año. temp &lt;- matrix(Datos$NINO1.2[-c(481:484)], nrow=12, 40) colnames(temp)=c(1982:2021) Construimos las gráficas para cada año month&lt;-1:12 plot(month, temp[,1], type=&quot;b&quot;, ylim=c(18, 30), xlab=&quot;Mes&quot;, ylab=&quot;temperatura&quot;) for(i in 2:ncol(temp)) lines(month, temp[,i], type=&quot;b&quot;, col=i) 12.2.1 Deteccción de curvas atípicas Es posible realizar detección de datos atípicos (outliers) a través de las herramientas: bagplot, HDR y boxplot para datos funcionales. Con respecto a la base de datos de la temperatura, utilizando las profundidades dadas a través del criterio de bagplot, se muestran nueves curvas atípicas. La identicación de las curvas se encuentra en la parte superior del panel izquierdo de la siguiente figura. Se destaca, que el factor de inflación utilizado en este caso toma el valor de 1.96 que es el establecido por defecto en la función tipo bag. TempTs = sfts(ts(as.numeric(temp), start = c(1982,1),frequency = 12), xname = &quot;Mes&quot;, yname = &quot;Temperatura oC&quot;) par(mfrow=c(1,2)) fboxplot(data= TempTs, plot.type = &quot;functional&quot;, type = &quot;bag&quot;, projmethod = &quot;PCAproj&quot;) fboxplot(data= TempTs, plot.type = &quot;bivariate&quot;, type = &quot;bag&quot;, projmethod = &quot;PCAproj&quot;, ylim = c(-6,6), xlim = c(-15,6)) Análogamente, teniendo en cuenta la profundidad a través del criterio de HDR plot, se evidencian dos curvas atípicas identificadas con los años 1997 y 2015. Para este caso los porcentajes de cobertura de los datos atípicos y de la región central tenidos en cuenta fueron los establecidos por defecto en la respectiva función (0.05, 0.5). par(mfrow=c(1,2)) fboxplot(data= TempTs, plot.type = &quot;functional&quot;, type = &quot;hdr&quot;, projmethod = &quot;PCAproj&quot;) fboxplot(data= TempTs, plot.type = &quot;bivariate&quot;, type = &quot;hdr&quot;, projmethod = &quot;PCAproj&quot;, ylim = c(-6,6), xlim = c(-15,6)) Finalmente, al utilizar la herramienta del boxplot funcional, teniendo en cuenta la profundidad dada por la versión modificada de Band-depth, existe una curva atípica (1990). La probabilidad de la región central utilizada para realizar el gráfico fue de 0.5. par(mfrow=c(1,1)) fbplot(fit= temp, method = &quot;BD2&quot;, xlab = &quot;Mes&quot;, ylab = &quot;Temperatura oC&quot;) ## $depth ## 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 ## 0.05000000 0.05000000 0.09871795 0.05000000 0.12179487 0.20384615 0.05000000 0.13205128 0.23846154 0.07820513 ## 1992 1993 1994 1995 1996 1997 1998 1999 2000 2001 ## 0.09102564 0.21153846 0.06666667 0.10384615 0.05000000 0.05000000 0.05000000 0.06923077 0.13717949 0.12051282 ## 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 ## 0.10641026 0.06025641 0.10384615 0.06282051 0.06538462 0.05000000 0.10769231 0.13653846 0.06153846 0.13974359 ## 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 ## 0.09102564 0.05000000 0.05512821 0.05769231 0.11666667 0.05256410 0.07243590 0.08589744 0.11923077 0.06410256 ## ## $outpoint ## [1] 16 ## ## $medcurve ## 1990 ## 9 Al comparar la detección de datos atípicos utilizando las tres herramientas mencionadas (bagplot, hdr plot y fbplot) en la muestra de las 40 curvas de temperatura, se evidencia que el bagplot resulta ser la herramienta más estricta o exigente en cuanto a que detecta nueve curvas como atípicas, mientras que las otras dos detectaron dos y una, respectivamente. Es importante destacar que, lo que permite comparar las diferentes herramientas en términos de exigencia es utilizar las opciones de probabilidades de cobertura y factor de infación establecidas por defecto. 12.2.2 Otras medidas de resumen Con datos funcionales también es posible calcular otras etadísticas de resumen como la moda, medias recortadas y la mediana. #********************************************************* #Parámetros estimados - Media recortada al 10% #********************************************************* par(mfrow=c(1,1)) ###Calcula la profundidad de Fraiman and Muniz (2001) MedFM = fdepth(data = TempTs, type = &quot;FM&quot;, trim = 0.1) plot(MedFM) ###Calcula la profundidad a través de proyecciones aletorias de Cuevas et al. (2007) MedRP = fdepth(data = TempTs, type = &quot;RP&quot;, trim = 0.1) plot(MedRP) MedRPD = fdepth(data = TempTs, type = &quot;RPD&quot;, trim = 0.1) plot(MedRPD) #*********************************************************** #Parametros estimados - Moda #*********************************************************** MODA = fdepth(data = TempTs, type = &quot;mode&quot;, trim = 0.1) plot(MODA) Finalmemnte, a través de procedimientos bootstrap es posible estimar intervalos de confianza para las medidas de resumen. #*********************************************************** #Boostrap Funcional #*********************************************************** BSpl &lt;- create.bspline.basis(norder=4, breaks=seq(0,12,length=5)) Ftemp &lt;- Data2fd(temp, basisobj=BSpl) ## &#39;y&#39; is missing, using &#39;argvals&#39; ## &#39;argvals&#39; is missing; using seq( 0 , 12 , length= 12 ) plot(Ftemp, main=&quot;Datos suavizados de la Temperatura&quot;, xlab = &quot;Mes&quot;, ylab = &quot;Temperatura oC&quot;, ylim=c(18,30)) ## [1] &quot;done&quot; out.boot1=fdata.bootstrap(Ftemp,statistic=func.mean,nb=200,draw=TRUE) out.boot2=fdata.bootstrap(Ftemp,statistic=func.trim.FM,nb=100,draw=TRUE) out.boot2=fdata.bootstrap(Ftemp,statistic=func.trim.mode,nb=100,draw=TRUE, trim = 0.1) out.boot2=fdata.bootstrap(Ftemp,statistic=func.trim.RP,nb=100,draw=TRUE, trim = 0.1) 12.2.3 Análisis en Componentes Principales (ACPF) El análisis de componentes principales funcionales (ACPF) es una extensión del ACP clásico en el que las componentes principales están representadas por funciones y no por vectores (Ramsay &amp; Sylverman, 2005). La idea fundamental del análisis de componentes principales es reducir la dimensión del conjunto de datos conservando tanto como sea posible la variación presente en los mismos. Fuente: Chávez-Chong,Sánchez-García y DelaCerda-Gastélum (2015), disponile en https://rio.upo.es/xmlui/bitstream/handle/10433/2768/1694-5314-1-SM.pdf?sequence=1&amp;isAllowed=y#:~:text=AN%C3%81LISIS%20DE%20COMPONENTES%20PRINCIPALES%20(ACP)&amp;text=Es%20decir%3A%20reducir%20la%20dimensi%C3%B3n,la%20biometr%C3%ADa%20de%20la%20%C3%A9poca. Si se aplica el método a las curvas de temperturas trabajadas hasta el momento, reteniendo en el análisis 4 componentes, la primera función retiene el 70.1% de la variabilidad total de las curvas, la segunda función, el 20.9%, la tercera, el 4.8% y la cuarta, el 2.7%. Las funciones de componentes principales se muestran como perturbaciones de la curva media, que es la línea continua. Los + muestran lo que sucede cuando una pequeña cantidad de un componente principal se suma a la media, y los - muestran el efecto de restar este componente. #*********************************************************** #ACPF #*********************************************************** PCA = pca.fd(Ftemp, 4) plot(PCA) plot.pca.fd(PCA) plot(x = PCA$scores[,1], y = PCA$scores[,2], cex = 0.001) text(x = PCA$scores[,1], y = PCA$scores[,2] , seq(1982,2021,1), cex = 0.5 ) 12.3 Modelos lineales Un modelo lineal permite establecer la relación entre una variable respuesta y una o varias covariables. La extensión al caso funcional se presenta cuando existe por lo menos una variable (respuesta o explicativa) funcional en dicho modelo. Así, el modelo de regresión funcional es la extensión natural del modelo de regresión usual al caso en el cual se cuenta con una variable respuesta funcional y/o con covariables funcionales (Aristizabal, 2011) 12.3.1 Regresión lineal funcional con respuesta escalar La función \\(fRegress\\) realiza un análisis de regresión funcional, donde la variable dependiente o una o más variables independientes son funcionales. Las variables no funcionales se pueden utilizar en cualquier lado de la ecuación. En un problema simple donde hay una sola covariable escalar independiente con valores \\(z_i\\) con \\(i = 1,2,3,...,n\\) y una sola covariable funcional con valores \\(x_i(t)\\), el modelo establecido es: \\[\\begin{equation} y_i = \\beta_1z_i + \\int x_i(t)\\beta_2(t)dt + e_i \\end{equation}\\] A través de esta función también es posible llevar a cabo la estimación de los parámetros del modelo concurrente con variable dependiente funcional dado por: \\[\\begin{equation} y_i = \\beta_1(t)z_i + \\beta_2(t)x_i(t) + e_i(t) \\end{equation}\\] Los parámetros \\(e_i\\) y \\(e_i(t)\\) son los residuales del modelo (falta de ajuste o término error). Observe que, en el modelo lineal funcional concurrente para una variable dependiente funcional, todas las variables funcionales se evalúan en un tiempo común o valor de argumento \\(t\\). Es decir, el ajuste se define en términos del comportamiento de todas las variables en un momento fijo, o en términos del comportamiento del “ahora”. Todas las funciones de coeficientes \\(\\beta_j(t)\\) son consideradas objetos funcionales. En el caso de una variable dependiente escalar, el coeficiente de regresión para una covariable escalar es convertido a una variable funcional con una base de constantes. Todas las funciones de coeficientes de regresión se pueden forzar para que sean uniformes mediante el uso de penalizaciones por aspereza o rugosidad y, en consecuencia, se especifican en la lista de argumentos como objetos de los parámetros funcionales. En esta sección vamos a predecir el logaritmo de la precipitación anual para 35 estaciones meteorológicas canadienses a partir de sus perfiles de temperatura. Se utiliza como variable predictora el perfil de temperatura completo y un intercepto constante. Estas dos covariables se pueden almacenar en una lista de longitud 2. Así, configuramos un objeto de datos funcional para la temperatura con 35 perfiles en un objeto llamado tempfd. Asmismo, utilizamos 65 funciones de una base de Fourier sin penalización. Este número de funciones de base es adecuado para la mayoría de los propósitos y puede, por ejemplo, capturar la ondulaciones observadas a principios de la primavera en muchas estaciones meteorológicas (Ramsay &amp; Silverman, 2005). library(fda) library(fda.usc) library(rainbow) library(MASS) library(xtable) annualprec = log10(apply(daily$precav,2,sum)) tempbasis =create.fourier.basis(c(0,365),65) tempSmooth=smooth.basis(day.5,daily$tempav,tempbasis) tempfd =tempSmooth$fd templist = vector(&quot;list&quot;,2) templist[[1]] = rep(1,35) templist[[2]] = tempfd La estrategia más simple para estimar los parámetros funionales es mantener una dimensionalidad en el proceso de suavizamiento relativamente pequeño. Para este caso, trabajaremos con cinco funciones de una base de Fourier para la estimación del coeficiente de regresión (pendiente) y una función constante para el intercepto. conbasis = create.constant.basis(c(0,365)) betabasis = create.fourier.basis(c(0,365),5) betalist = vector(&quot;list&quot;,2) betalist[[1]] = conbasis betalist[[2]] = betabasis Una vez definidas las funciones base para los parámetros de regresión, procedemos a realizar el proceso de regresión: fRegressList = fRegress(annualprec,templist,betalist) betaestlist = fRegressList$betaestlist tempbetafd = betaestlist[[2]]$fd plot(tempbetafd, xlab=&quot;Día&quot;, ylab=&quot;Coeficiente Beta para temperatura&quot;) ## [1] &quot;done&quot; La Figura anterior muestra el resultado. El intercepto se puede obtener de coef(betaestlist[[1]]).Su valor en este caso es 3.464844. Para evaluar la calidad de este ajuste, se extraen los valores ajustados definido por este modelo y se calculan los residuos. De manera análoga que en el caso escalar, se calculan las sumas de cuadrados de los residuales con el modelo completo y utilizando solo el parámetro de intercepto y se comparan a través de la estadística \\(F\\). annualprechat1 = fRegressList$yhatfdobj annualprecres1 = annualprec - annualprechat1 SSE1 = sum(annualprecres1^2) SSE0 = sum((annualprec - mean(annualprec))^2) RSQ1 = (SSE0-SSE1)/SSE0 RSQ1 ## [1] 0.7955986 Fratio1 = ((SSE0-SSE1)/5)/(SSE1/29) Fratio1 ## [1] 22.57554 pf(Fratio1 ,5,29,) ## [1] 1 El coeficiente de correlación al cuadrado presenta un valor de 0.7955 y la estadística F un valor de 22.57, que tiene asociado un valor p menor al 1%. 12.3.2 Estimación de los coeficientes \\(\\beta\\) con regularización Hay dos maneras de obtener un ajuste suave de las curvas de parámetros \\(\\beta(t)\\). La más sencilla es la revisada anteriomente en la cual se utiliza un modelo de baja dimensión. Sin embargo, podemos tener un control más directo sobre la “suavidad” de la curva mediante el uso de una penalización por rugosidad como se vió en la guía 1 (Ramsay &amp; Silverman, 2005). Aplicando este enfoque para predecir las precipitaciones logarítmicas anuales se debe configurar un operador de aceleración armónica: Lcoef = c(0,(2*pi/365)^2,0) harmaccelLfd = vec2Lfd(Lcoef, c(0,365)) Ahora creamos el objeto funcional incorporando la penalización por rugosidad: betabasis = create.fourier.basis(c(0, 365), 35) lambda = 10^12.5 betafdPar = fdPar(betabasis, harmaccelLfd, lambda) betalist[[2]] = betafdPar Y estimamos los parámetros funcionales con el uso de la función \\(fRegress\\): annPrecTemp = fRegress(annualprec, templist, betalist) betaestlist2 = annPrecTemp$betaestlist annualprechat2 = annPrecTemp$yhatfdobj Finalmente, calculamos las estadísticas habituales de \\(R^2\\) y la razón \\(F\\) para evaluar el ajuste del modelo: SSE2 = sum((annualprec-annualprechat2)^2) RSQ2 = (SSE0 - SSE2)/SSE0 RSQ2 ## [1] 0.7537658 Fratio2 = ((SSE0-SSE2)/3.7)/(SSE1/30.3) Fratio2 ## [1] 30.19907 Para completar el análisis, se utliza una base constante para la estimación del intercepto y se compara con el modelo completo. Los grados de libertad de este modelo reducido son ahora 2. betafdPar = fdPar(betabasis, harmaccelLfd, lambda) betalist[[2]] = betafdPar fRegressList = fRegress(annualprec, templist, betalist) betaestlist = fRegressList$betaestlist annualprechat = fRegressList$yhatfdobj SSE1 = sum((annualprec-annualprechat)^2) RSQ = (SSE0 - SSE1)/SSE0 RSQ ## [1] 0.7537658 Fratio = ((SSE0-SSE1)/1)/(SSE1/33) Fratio ## [1] 101.0188 Asimismo, es posible estimar intervalos de confianza: resid = annualprec - annualprechat SigmaE.= sum(resid^2)/(35-fRegressList$df) SigmaE = SigmaE.*diag(rep(1,35)) y2cMap = tempSmooth$y2cMap stderrList = fRegress.stderr(fRegressList, y2cMap, SigmaE) betafdPar = betaestlist[[2]] betafd = betafdPar$fd betastderrList = stderrList$betastderrlist betastderrfd = betastderrList[[2]] plot(betafd, xlab=&quot;Día&quot;, ylab=&quot;Coeficientes de regresión - Temperatura.&quot;, ylim=c(-6e-4,1.2e-03), lwd=2) ## [1] &quot;done&quot; lines(betafd+2*betastderrfd, lty=2, lwd=1) lines(betafd-2*betastderrfd, lty=2, lwd=1) 12.3.3 Prueba \\(F\\) para ajuste del modelo a través de permutaciones Debido a la naturaleza de las estadísticas funcionales, es difícil intentar derivar una distribución nula teórica para cualquier estadística de prueba, ya que se tendría que tener en cuenta el parámetro de suavizamiento. Ramsay &amp; Silverman (2005) proponen utilizar una metodología de prueba basada en permutaciones. El supuesto utilizado es que si no hay relación entre la respuesta y las covariables, no debería darse ninguna diferencia si se reorganiza al azar la forma en que están emparejados. La función para realizar la respectiva prueba de hipótesis es \\(Fperm.fd\\) F.res = Fperm.fd(annualprec, templist, betalist) F.res$pval ## [1] 0 12.4 Modelos lineales funcionales (Regresión Funcional) Para explicar la variabilidad de una determinada variable con respecto a otras explicativas, consideradas como covariables, el análisis de varianza y la regresión lineal son los procedimientos que generalmente se utilizan. En este sentido el modelo de regresión funcional es la extensión natural del modelo de regresión usual al caso en el cual se cuenta con una variable respuesta funcional o con covariables funcionales (Aristizabal, 2011). 12.4.1 Regresión lineal funcional con respuesta funcional (ANOVA Funcional) En términos formales (Ramsay &amp; Silverman, 2005), se asume que se cuenta con \\(G\\) “tratamientos” cada uno con un número \\(N_g\\) de sujetos. El modelo para la \\(m\\)-ésima función (curva) en el \\(g\\)-ésimo grupo (\\(y_{mg}(t))\\), esta dada por:\\[ y_{mg}(t) = \\mu(t) + \\alpha_g(t) + \\varepsilon_{mg}(t)\\] dónde la función \\(\\mu\\) es la media general, \\(\\alpha_g\\) representa la función media para cada ``tratamiento’’ y \\(\\varepsilon_{mg}\\) es la función de error en cada caso. La tarea entonces, es establecer la matriz diseño para lograr estimar los parámetros funcionales \\(\\mu\\) y \\(\\alpha_g\\), bajo la condición que \\(\\sum_g \\alpha_g(t) = 0\\) para todo \\(t\\) con el fin de garantizar la estimabilidad de los mismos. En términos matriciales el modelo queda determinado como: \\[y_{mg}(t) = \\sum_{j=1}^{(G+1)} x_{(mg)j}\\beta_j(t) + \\varepsilon_{(mg)}(t) \\]\\[y(t) = X(t)\\beta(t) + \\varepsilon(t)\\] Cabe destacar que la matriz diseño \\(X\\) tiene la misma estructura que en el caso multivariado o univariado, la diferencia obedece a que el vector de parámetros \\(\\beta(t)\\) y las predicciones \\(X\\beta(t)\\), son vectores de funciones en vez de vectores de números. 12.4.2 Estimación - Mínimos cuadrados ordinarios Para realizar el ajuste a través del criterio de mínimos cuadrados ordinarios, se debe escoger \\(\\beta(t)\\) que minimize la suma de cuadrados residual, así, para extender el principio de mínimos cuadrados al caso funcional, se reinterpreta la suma de cuadrados residual (\\(y_i(t) - X_i\\beta(t)\\)) como una nueva función, y entonces por el criterio de mínimos cuadrados ordinarios se debe minimizar:\\[SSE(\\beta) = \\sum_g ^{G} \\sum_m^{N_g} \\int (y_{mg}(t) - \\sum_j^q x_{(mg)j}\\beta_j(t))^2dt = \\sum_i^n \\|y_i(t) - x_i^t\\beta(t) \\|^2\\] Minimizando \\(SSE(\\beta)\\) sujeto a la condición de \\(\\sum_{j = 2} ^{G+1}\\beta_j(t) = 0\\) se obtiene la estimación de los parámetros funcionales \\(\\hat{\\beta}(t)\\). Al igual que en el modelo lineal multivariado, la fuente primaria de información para investigar la importancia de los ``tratamientos’’, es la función de suma de cuadrados:\\[ SSE(t) = \\sum_{mg} (y_{mg}(t) - X_{mg}\\hat{\\beta}(t))^2\\] Está función es comparada con la función de suma de cuadrados de los errores obtenida al utilizar solo la media general \\(\\hat{\\mu}\\) en el modelo:\\[SSY(t) = \\sum_{mg} (y_{mg}(t) - \\hat{\\mu}(t))^2\\] Así un camino para realizar la comparación, se establece utilizando la función del cuadrado de correlación múltiple:\\[RSQ(t) = \\frac{(SSY(t) - SSE(t))}{SSY(t)}\\] o calcular las funciones análogas a las de una tabla ANOVA en el caso univariado. Por ejemplo la función de cuadrado medio del error:\\[MSE = \\frac{SSE}{df(error)} = \\frac{SSE}{N-G}\\] Análogamente, la función de cuadrado medio de la regresión es la diferencia entre la suma de cuadrados total (\\(SSY\\)) y la suma de cuadrados del error (\\(SSE\\)), dividida por la diferencia entre los grados de libertad del error para los dos modelos (grados de libertad de la regresión):\\[MSR(t) = \\frac{SSY(t) - SSE(t)}{df(regresion)}\\] Finalmente se puede construir la función \\(F\\) como:\\[ F = \\frac{MSR}{MSE}\\] Básicamente, la mayoría de los estadísticos del análisis de varianza univariado son aplicables al problema funcional, esencialmente, porque el problema de análisis de varianza funcional, se puede considerar como un análisis de varianza univariado (ANOVA) para cada valor específico \\(t\\) del dominio de la función. Sin embargo, bajo este enfoque la prueba \\(F\\) pierde algunas de sus propiedades, debido a que realizar una prueba \\(F\\) en cada tiempo \\(t\\) con un nivel de significancia determinado no implica el mismo nivel de significancia en una prueba conjunta. 12.4.3 Pruebas de hipótesis - Prueba de Shen &amp; Faraway En el 2004 Shen y Faraway (Shen &amp; Faraway, 2004), propusieron una prueba tipo \\(\\textbf{F}\\) para modelos lineales con respuesta funcional. Esta, es una extensión de la prueba \\(\\textbf{F}\\) multivariada al caso en que la cantidad de mediciones crece rápidamente y puede ser utilizada para la comparación de dos modelos anidados cualesquiera. Sin pérdida de generalidad, se considera la comparación de dos modelos lineales \\(\\omega\\) y \\(\\Omega\\), dónde \\(dim(\\Omega) = p\\) y \\(dim(\\omega) = q\\), \\(p&gt;q\\). El modelo \\(\\omega\\) resulta de una restricción lineal de los parámetros de \\(\\Omega\\). Así:\\[ H_0: Y(t) = X_1\\alpha_1(t) + \\epsilon(t) \\hspace{5pt}\\text{versus} \\hspace{5pt} H_a: Y(t) = X_1\\alpha_1(t) + X_2\\alpha_2(t) +\\epsilon(t) \\] Sea \\[\\textbf{F} = \\frac{(rss_\\omega - rss_\\Omega)/(p-q)}{rss_\\Omega/(n-p)} \\approx \\frac{traza(\\hat{\\sum}^\\omega - \\hat{\\sum}^\\Omega)/(p-q)}{traza(\\hat{\\sum}^\\Omega)/(n-p)}\\] con \\(rss = \\sum_{i=1}^n \\int_t (y_i(t) - \\hat{y}_i(t))^2 dt.\\) Asumiendo que el proceso de ruido \\(\\epsilon_i(t)\\) es gaussiano e independiente y con función de covarianza continua \\(r(s,t)\\) sobre un intervalo cerrado \\(\\tau\\), entonces bajo el sistema de hipótesis descrito, la estadística se distribuye como \\[\\frac{\\sum_{i=1}^\\infty r_i \\chi_{p-q}^2/(p-q)}{\\sum_{i=1}^\\infty r_i \\chi_{n-p}^2/(n-p)}\\] dónde \\(r_i\\) es el \\(i\\)-ésimo valor propio ordenado de la función de covarianza \\(r(s,t)\\) y las variables \\(\\chi^2\\) son independientes. En su artículo los autores demuestran que la estadística tiene una distribución denominada distribución funcional con coeficientes \\({r_i, i =1,2,...,\\infty}\\) y grados de libertad \\((p-q, n-p)\\). Así mismo, realizan la aproximación de esta distribución a la distribución \\(F\\) de Fisher con grados de libertad \\(f_1\\) y \\(f_2\\):\\[f_1 = \\frac{(\\sum_{i=1}^\\infty r_i)^2}{\\sum_{i=1}^\\infty r_i^2}(p-q); f_2 = \\frac{(\\sum_{i=1}^\\infty r_i)^2}{\\sum_{i=1}^\\infty r_i^2}(n-p)\\] En la práctica, solo se observa \\(y_i(t)\\) sobre una grilla de puntos \\(t_j\\), \\(j = 1,2,...,M\\), así, el factor de ajuste \\(\\frac{(\\sum_{i=1}^\\infty r_i)^2}{\\sum_{i=1}^\\infty r_i^2}\\) puede ser estimado por \\(\\frac{traza(E)^2}{traza(E^2)}\\), dónde \\(E = \\hat{\\sum}^\\Omega\\) es la matriz de covarianza empírica del ruido calculada con el modelo completo \\(\\Omega\\). 12.4.4 Ejemplo 12.4.4.1 Experimento La situación experimental llevada a cabo y que dió origen a la base de datos con la cual se realizan las aplicaciones, parte de que a un paciente se le mostraba un conjunto de palabras con carga emocional positiva (abrazo, paz, regalo), negativa (guerra, enfermedad, muerte), o neutra (número, roca), y también una serie de no palabras. Su tarea consistía en responder mediante un botón adyacente cuando aparecía únicamente una palabra. El número de pacientes total en el experimento fue de 48, de los cuales 30 son hombres y los restantes 18 mujeres. La presentación de los estímulos y la realización de la tarea se hace en sincronía con el registro del electroencefalograma (EEG) con lo cual se obtiene la medición de la actividad del cerebro medida como la diferencia entre el voltaje máximo y la línea base preestimular (electrodo determinado) para cada condición experimental determinada, cada 4 milisegundos, obteniendo un total de 350 mediciones por paciente en cada uno de los 19 electrodos muestreados (dispuestos en ubicaciones establecidas por el sistema 10-20). 12.4.4.2 Sistema de referencia 10-20 El registro del EEG se realiza con distintos tipos de electrodos distribuidos según un mapa normalizado por la Federación de Electroencefalografia y Neurofisiologia Clinica, en base al sistema de coordenadas 10-20, que determina las coordenadas de cada punto de registro mediante porcentajes (10-20) de la distancia existente entre puntos del cráneo bien definidos. Esto permite el estudio de la misma región independientemente de las dimensiones y de la forma del cráneo. En el primer Congreso Internacional de EEG, que se celebró en Londres en 1947, se reconoció que era necesario un método estándar de la colocación de los electrodos utilizados en el electroencefalograma (EEG). Varias discusiones entorno al tema dieron lugar a la definición del sistema de electrodos 10-20 (Hasper, 1958). Desde entonces, este sistema de electrodos se ha convertido en el estándar para los clínicos y para el estudio de potenciales relacionados con eventos (potenciales evocados) en entornos no clínicos. Con el fin de determinar bajo este sistema las coordenadas de los 19 electrodos utilizados en el experimento anteriormente descrito, se utilizaron las coordenadas de todos los lugares del electrodo en una superficie de la cabeza \\(real\\), sobre la base de las distancias a lo largo de la superficie (triangular) de la cabeza. La superficie de la cabeza utilizada fue construida a partir de la resonancia magnética canónica que se incluye en el paquete \\(SPM2\\), y las ubicaciones se expresan en coordenadas \\(MNI\\) (standard Montreal Neurological Institute) (Oostenveld &amp; Praamstra, 2001) En la figura se presenta la gráfica de las coordenadas de los electrodos bajo el sistema 10-20: Sistema 10 - 20 Sistema 20 12.4.4.3 Análisis de varianza a dos vías de clasificación La energía liberada por el cerebro al ser estimulado con palabras de distinta carga emocional es diferente si el paciente es hombre o mujer. En el caso de la localización del electrodo \\(C3\\), los hombres presentan diferencias en algunos tiempos específicos mientras que las mujeres no. En esta sección se propone realizar una análisis de varianza con dos factores fijos que corresponden al tipo de estímulo al cual es sometido el paciente y al género del mismo. En este caso el proceso de suavizamiento se realizó con 40 funciones base. La curva media de todas las observaciones realizadas en la localización del electrodo \\(C3\\) establece que el pico máximo de liberación de energía se presenta alrededor del milisegundo 400, es decir 200 milisegundos después de la aparición del estímulo. Las funciones medias estimadas, sugieren que los hombres estimulados con palabras de carga positiva emiten menos energía y las mujeres estimuladas con palabras de carga negativa emiten mayor energía. Al aplicar la prueba \\(F\\) funcional propuesta por Shen y Faraway (2004), se concluye con un nivel de significancia del 5% que no existen diferencias significativas en la respuesta bioelectrica del cerebro de mujeres y hombres cuando son estimulados con palabras de distinta carga emocional (positivos vs negativos). ################################################# # Código para hacer Regresión Funcional con # los datos de un lectrodo determinado, con los # pacientes de ambos genero determinado, los 2 estimulos #(palabras positivas y negativas),para un total de # 60 filas) y 350 mediciones en el tiempo. ################################################## rm(list=ls()) library(zoo) library(fda) datos&lt;-read.table(&quot;data_11_PatronesPuntuales/4_ModelosLinealesFuncionales/BrainDT.txt&quot;, header=TRUE, dec = &quot;,&quot;) levels(datos$esite)=c(&quot;C3&quot;,&quot;C4&quot;,&quot;CZ&quot;,&quot;F3&quot;,&quot;F4&quot;,&quot;F7&quot;,&quot;F8&quot;,&quot;FP1&quot;,&quot;FP2&quot;,&quot;FZ&quot;,&quot;O1&quot;,&quot;O2&quot;,&quot;P3&quot;,&quot;P4&quot;,&quot;PZ&quot;,&quot;T3&quot;,&quot;T4&quot;,&quot;T5&quot;,&quot;T6&quot;,&quot;VEOG&quot;) ################################################# # Creación de la base, determinando el sexo de los # pacientes y el electrodo que se quiere estudiar ################################################## BASEPOSI&lt;-(datos$esite==&quot;C3&quot;)&amp;(datos$wordtype==&quot;1&quot;)&amp;(datos$subject !=&quot;1&quot;) BASENEGA&lt;-(datos$esite==&quot;C3&quot;)&amp;(datos$wordtype==&quot;2&quot;)&amp;(datos$subject !=&quot;1&quot;) BASEPOSI = as.matrix(datos[BASEPOSI,4:353]) BASENEGA = as.matrix(datos[BASENEGA,4:353]) BASETOTAL =(datos$esite==&quot;C3&quot;)&amp;((datos$wordtype==&quot;1&quot;)|(datos$wordtype==&quot;2&quot;))&amp;(datos$subject !=&quot;1&quot;) BASETOTAL =as.matrix(datos[BASETOTAL,4:353]) BASETOTALT = t(BASETOTAL) t = dim(BASETOTALT)[1] n = dim(BASETOTALT)[2] BASEPOSIT = t(BASEPOSI) dim(BASEPOSIT) ## [1] 350 46 BASENEGAT = t(BASENEGA) dim(BASENEGAT) ## [1] 350 46 ################################################# # Creación de una base B spline de orden 4 y k = 40. ################################################## time&lt;- c( seq(4,1400,4)) rangeval = c(4,1400) nbasis = 40 norder = 4 basis6 = create.bspline.basis(rangeval, nbasis, norder) col &lt;-matrix(2, nrow=1, ncol=n) par(mfrow=c(1,2)) fdhposi = Data2fd(argvals = time, y = BASEPOSIT, basisobj = basis6) plot(fdhposi,col=1, xlab=&quot;Tiempo&quot;, ylab=&quot;Voltaje&quot;, lty=1,pch = 56, main = &quot;Estimulo positivo&quot; ) ## [1] &quot;done&quot; fdhnega = Data2fd(time,BASENEGAT, basis6) plot(fdhnega, xlab=&quot;Tiempo&quot;, ylab=&quot;Voltaje&quot;, lty=1,pch = 56, col = 4, main = &quot;Estimulo negativo&quot; ) ## [1] &quot;done&quot; fdh = Data2fd( time,BASETOTALT, basis6) plot(fdh,col=rep(c(1,4), n), xlab=&quot;Tiempo(milisegundos)&quot;, ylab=&quot;Voltaje(Voltios)&quot;, lty=1,pch = 56) ## [1] &quot;done&quot; ################################################# #Determinación y grafica de la media y la varianza. ################################################## meanfdh &lt;- mean.fd(fdh) varfdh &lt;-var.fd(fdh) stdvfdh &lt;- stddev.fd(fdh) par(mfrow=c(1,2)) plot(meanfdh, main=&quot;Media&quot;, xlab=&quot;Tiempo&quot;, ylab=&quot;Voltaje&quot; ) ## [1] &quot;done&quot; plot(stdvfdh, main=&quot;Desviación estándar&quot;, xlab=&quot;Tiempo&quot;, ylab=&quot;Voltaje&quot;) ## [1] &quot;done&quot; plot(stdvfdh^2, main=&quot;Varianza&quot;, xlab=&quot;Tiempo&quot;, ylab=&quot;Voltaje&quot;) ## [1] &quot;done&quot; #windows() plot(fdh,col=8, xlab=&quot;Tiempo (milisegundos)&quot;, ylab=&quot;Voltaje (Voltios)&quot;, lty=1) ## [1] &quot;done&quot; lines(meanfdh,col=2,lwd=2) lines(stdvfdh, ylim=c(0,10), main=&quot;Desviación estándar&quot;, xlab=&quot;Tiempo (milisegundos)&quot;, ylab=&quot;Voltaje (Voltios)&quot;,lty=2, col=3, lwd=2) ################################################# # Modelo lineal con variable respuesta la curva de # la energia liberada por el cerebro y variable # explicativa el tipo de estímulo al cual el paciente # es sometido. ################################################## matrizh &lt;- eval.basis(time, basis6) y2cMap &lt;- solve(crossprod(matrizh)) %*% t(matrizh) ################################################# #Nombre de los estímulos ################################################## estimulos &lt;- c(&quot;Efecto global&quot;, &quot;Positivo &quot;, &quot;Negativo&quot;,&quot;Hombre&quot;, &quot;Mujer&quot;) ################################################# #Indices para los estimulos y los generos ################################################## posiindex &lt;- c(1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35,37,39,41,43,45,47,49,51,53,55,57) negindex &lt;- c(2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36,38,40,42,44,46,48,50,52,54,56,58) hombres = seq(1,58,1) mujeres = seq(59,92,1) ################################################# #Matriz diseño ################################################## zmat &lt;- matrix(0,92,5) zmat[ ,1] &lt;- 1 zmat[posiindex,2] &lt;- 1 zmat[negindex,3] &lt;- 1 zmat[hombres,4] &lt;- 1 zmat[mujeres,5] &lt;- 1 ################################################# #Generación de la fila, para garantizar la ortogonalidad #y estimabilidad de los parámetros referentes a estímulos. #Fila (0,1,1) ################################################## z93 &lt;- matrix(1,1,5) z93[1] &lt;- 0 z93[4] &lt;- 0 z93[5] &lt;- 0 zmat &lt;- rbind(zmat, z93) ################################################# #Estimación de la fila generada a través de las #funciones base. #Fila (0,1,1). ################################################## coef &lt;- fdh$coefs coef93 &lt;- cbind(coef,matrix(0,nbasis,1)) fdh$coefs &lt;- coef93 ################################################# #Generación de las filas, para garantizar la ortogonalidad #y estimabilidad de los parámetros referentes a genero. #Fila (0,1,1) ################################################## z94 &lt;- matrix(1,1,5) z94[1] &lt;- 0 z94[2] &lt;- 0 z94[3] &lt;- 0 zmat &lt;- rbind(zmat, z94) ################################################# #Estimación de la fila generada a través de las #funciones base. #Fila (0,1,1). ################################################## coef &lt;- fdh$coefs coef94 &lt;- cbind(coef,matrix(0,nbasis,1)) fdh$coefs &lt;- coef94 ################################################# # Estimación de los parametros funcionales, a través # de 20 funciones base y de orden 4 ################################################## p &lt;- 5 xfdlist &lt;- vector(&quot;list&quot;,p) for (j in 1:p) xfdlist[[j]] &lt;- zmat[,j] nbetabasis &lt;- 20 betabasis = create.bspline.basis(rangeval, nbetabasis, norder) betafd &lt;- fd(matrix(0,nbetabasis,1), betabasis) estimate &lt;- T lambda &lt;- 0 betafdPar &lt;- fdPar(betafd) betalist &lt;- vector(&quot;list&quot;,p) for (j in 1:p) betalist[[j]] &lt;- betafdPar fRegressList &lt;- fRegress(fdh, xfdlist, betalist) ################################################# # Gráfica de parámetros funcionales (betas) estimados ################################################## betaestlist &lt;- fRegressList$betaestlist par(mfrow=c(1,5)) for (j in 1:p) { betaestParfdj &lt;- betaestlist[[j]] plot(betaestParfdj$fd, xlab=&quot;Tiempo (milisegundos)&quot;, ylab=&quot;Voltaje (Voltios)&quot;, main=estimulos[j]) } ################################################# # Gráfica de funciones predichas ################################################## yfdpar &lt;- fRegressList$yfdpar yhatfdobj &lt;- fRegressList$yhatfdobj plot(yhatfdobj) ## [1] &quot;done&quot; ################################################# # Cálculo de la matriz de residuales y obtención de # la matriz de varianza y covarianza ################################################## yhatmat &lt;- eval.fd(time,yhatfdobj) # Valores estimados matplot(yhatmat[,1:92], col=2, type=&quot;l&quot;) ymat &lt;- eval.fd(time, fdh) # Valores observados matplot(time,ymat[,1:92], type=&quot;l&quot;) alfa &lt;- betaestlist[[1]] alpha &lt;- eval.fd(time,alfa$fd) # Constantes (Media) estimada plot(alfa$fd, xlab=&quot;Tiempo&quot;, ylab=&quot;Voltaje&quot;) ## [1] &quot;done&quot; Residuales &lt;- ymat[,1:92] - yhatmat[,1:92] # Los residuales son iguales a observados - estimados matplot(Residuales, type = &quot;l&quot;) ########################################################################## # Gráfica de contorno de la varianza de los residuales del modelo completo ########################################################################## SigmaE &lt;- var(t(Residuales)) contour(SigmaE, xlab=&quot;Milisegundos&quot;, ylab=&quot;Milisegundos&quot;, cex=1.2) dim(SigmaE) ## [1] 350 350 ###################################################################### # Gráfica de dsviación estandar de los residuales del modelo completo ###################################################################### cexval = 1.2 par(mfrow=c(1,1), mar=c(5,5,4,2)+cexval+2, pty=&quot;m&quot;) stddevE &lt;- sqrt(diag(SigmaE)) plot(time, stddevE, type=&quot;l&quot;, cex=1.2, xlab=&quot;Milisegundos&quot;, ylab=&quot;Desviacion estandar (Voltios)&quot;) ########################################################################## # Estimación del modelo reducido 1: Solo los estímulos ########################################################################## ################################################# #Nombre de los estímulos ################################################## estimulos &lt;- c(&quot;Efecto global&quot;, &quot;Positivo &quot;, &quot;Negativo&quot;) ################################################# #Indices para los estimulos ################################################## posiindex1 &lt;- seq(1,92,2) negindex1 &lt;- seq(2,92,2) ################################################# #Matriz diseño ################################################## q1 = 3 fdh1 = Data2fd(time,BASETOTALT, basis6) zmat1 &lt;- matrix(0,92,3) zmat1[ ,1] &lt;- 1 zmat1[posiindex1,2] &lt;- 1 zmat1[negindex1,3] &lt;- 1 ################################################# #Generación de la fila, para garantizar la ortogonalidad #y estimabilidad de los parámetros. #Fila (0,1,1,1) ################################################## z931 &lt;- matrix(1,1,3) z931[1] &lt;- 0 zmat1 &lt;- rbind(zmat1, z931) ################################################# #Estimación de la fila generada a través de las #funciones base. #Fila (0,1,1,1). ################################################## coef &lt;- fdh1$coefs coef931 &lt;- cbind(coef,matrix(0,nbasis,1)) fdh1$coefs &lt;- coef931 ################################################# # Estimación de los parametros funcionales, a través # de 20 funciones base y de orden 4 ################################################## xfdlist1 &lt;- vector(&quot;list&quot;,q1) for (j in 1:q1) xfdlist1[[j]] &lt;- zmat1[,j] nbetabasis &lt;- 20 betabasis = create.bspline.basis(rangeval, nbetabasis, norder) betafd &lt;- fd(matrix(0,nbetabasis,1), betabasis) estimate &lt;- T lambda &lt;- 0 betafdPar &lt;- fdPar(betafd) betalist1 &lt;- vector(&quot;list&quot;,q1) for (j in 1:q1) betalist1[[j]] &lt;- betafdPar fRegressList1 &lt;- fRegress(fdh1, xfdlist1, betalist1) ################################################# # Gráfica de parámetros funcionales (betas) estimados ################################################## betaestlist1 &lt;- fRegressList1$betaestlist par(mfrow=c(3,1)) for (j in 1:q1) { betaestParfdj &lt;- betaestlist1[[j]] plot(betaestParfdj$fd, xlab=&quot;Tiempo (milisegundos)&quot;, ylab=&quot;Voltaje (Voltios)&quot;, main=estimulos[j]) } ################################################# # Gráfica de funciones predichas ################################################## yfdpar1 &lt;- fRegressList1$yfdpar yhatfdobj1 &lt;- fRegressList1$yhatfdobj plot(yhatfdobj1) ## [1] &quot;done&quot; ################################################# # Cálculo de la matriz de residuales y obtención de # la matriz de varianza y covarianza del modelo reducido 1: Solo estimulos ################################################## yhatmat1 &lt;- eval.fd(time,yhatfdobj1) # Valores estimados matplot(yhatmat1[,1:n], col=2, type=&quot;l&quot;) ymat1 &lt;- eval.fd(time, fdh1) # Valores observados matplot(time,ymat1[,1:n], type=&quot;l&quot;) alfa &lt;- betaestlist1[[1]] alpha &lt;- eval.fd(time,alfa$fd) # Constantes (Media) estimada plot(alfa$fd, xlab=&quot;Tiempo&quot;, ylab=&quot;Voltaje&quot;) ## [1] &quot;done&quot; Residuales1 &lt;- ymat1[,1:n] - yhatmat1[,1:n] # Los residuales son iguales a observados - estimados matplot(Residuales1, type = &quot;l&quot;) SigmaRed1E &lt;- var(t(Residuales1)) contour(SigmaRed1E, xlab=&quot;Milisegundos&quot;, ylab=&quot;Milisegundos&quot;, cex=1.2) dim(SigmaRed1E) ## [1] 350 350 ###################################################################### # Gráfica de dsviación estandar de los residuales del modelo reducido ###################################################################### cexval = 1.2 par(mfrow=c(1,1), mar=c(5,5,4,2)+cexval+2, pty=&quot;m&quot;) stddevRed1E &lt;- sqrt(diag(SigmaRed1E)) plot(time, stddevRed1E, type=&quot;l&quot;, cex=1.2, xlab=&quot;Milisegundos&quot;, ylab=&quot;Desviacion estandar (Voltios)&quot;) ###################################################################### # Prueba F de Fareway para comparar modelo lleno menos modelo reducido ###################################################################### Num =( sum(diag(SigmaRed1E-SigmaE))/(p-q1)) Den = (sum(diag(SigmaE))/(n-p)) F1 = Num/Den factor = (((sum(diag(SigmaE)))^2)/ (sum(diag(SigmaE^2)))) f1 = factor*(p-q1) f2 = factor*(n-p) Fteo1&lt;-qf(0.95,f1,f2) ########################################################################## # Estimación del modelo reducido 2: Solo los géneros ########################################################################## ################################################# #Nombre de los estímulos ################################################## q2 = 3 fdh2 = Data2fd(time, BASETOTALT, basis6) estimulos &lt;- c(&quot;Efecto global&quot;, &quot;Hombres&quot;, &quot;Mujeres&quot;) ################################################# #Indices para los estimulos ################################################## Hombres1 &lt;- seq(1,58,1) Mujeres1 &lt;- seq(59,92,1) ################################################# #Matriz diseño ################################################## zmat2 &lt;- matrix(0,92,3) zmat2[ ,1] &lt;- 1 zmat2[Hombres1,2] &lt;- 1 zmat2[Mujeres1,3] &lt;- 1 ################################################# #Generación de la fila, para garantizar la ortogonalidad #y estimabilidad de los parámetros. #Fila (0,1,1,1) ################################################## z932 &lt;- matrix(1,1,3) z932[1] &lt;- 0 zmat2 &lt;- rbind(zmat2, z932) ################################################# #Estimación de la fila generada a través de las #funciones base. #Fila (0,1,1,1). ################################################## coef &lt;- fdh2$coefs coef932 &lt;- cbind(coef,matrix(0,nbasis,1)) fdh2$coefs &lt;- coef932 ################################################# # Estimación de los parametros funcionales, a través # de 20 funciones base y de orden 4 ################################################## xfdlist2 &lt;- vector(&quot;list&quot;,q2) for (j in 1:q2) xfdlist2[[j]] &lt;- zmat2[,j] nbetabasis &lt;- 20 betabasis = create.bspline.basis(rangeval, nbetabasis, norder) betafd &lt;- fd(matrix(0,nbetabasis,1), betabasis) estimate &lt;- T lambda &lt;- 0 betafdPar &lt;- fdPar(betafd) betalist2 &lt;- vector(&quot;list&quot;,q2) for (j in 1:q2) betalist2[[j]] &lt;- betafdPar fRegressList2 &lt;- fRegress(fdh2, xfdlist2, betalist2) ################################################# # Gráfica de parámetros funcionales (betas) estimados ################################################## betaestlist2 &lt;- fRegressList2$betaestlist par(mfrow=c(3,1)) for (j in 1:q2) { betaestParfdj &lt;- betaestlist2[[j]] #plot(betaestParfdj$fd, xlab=&quot;Tiempo (milisegundos)&quot;, ylab=&quot;Voltaje (Voltios)&quot;, main=estimulos[j]) } ################################################# # Gráfica de funciones predichas ################################################## yfdpar2 &lt;- fRegressList2$yfdpar yhatfdobj2 &lt;- fRegressList2$yhatfdobj #plot(yhatfdobj2) ################################################# # Cálculo de la matriz de residuales y obtención de # la matriz de varianza y covarianza del modelo reducido 1: Solo estimulos ################################################## yhatmat2 &lt;- eval.fd(time,yhatfdobj2) # Valores estimados #matplot(yhatmat2[,1:n], col=2, type=&quot;l&quot;) ymat2 &lt;- eval.fd(time, fdh) # Valores observados #matplot(time,ymat2[,1:n], type=&quot;l&quot;) alfa &lt;- betaestlist2[[1]] alpha &lt;- eval.fd(time,alfa$fd) # Constantes (Media) estimada #plot(alfa$fd, xlab=&quot;Tiempo&quot;, ylab=&quot;Voltaje&quot;) Residuales2 &lt;- ymat2[,1:n] - yhatmat2[,1:n] # Los residuales son iguales a observados - estimados #matplot(Residuales2, type = &quot;l&quot;) SigmaRed2E &lt;- var(t(Residuales2)) #contour(SigmaRed2E, xlab=&quot;Milisegundos&quot;, ylab=&quot;Milisegundos&quot;, cex=1.2) dim(SigmaRed2E) ## [1] 350 350 ###################################################################### # Gráfica de dsviación estandar de los residuales del modelo reducido ###################################################################### cexval = 1.2 par(mfrow=c(1,1), mar=c(5,5,4,2)+cexval+2, pty=&quot;m&quot;) stddevRed2E &lt;- sqrt(diag(SigmaRed2E)) plot(time, stddevRed2E, type=&quot;l&quot;, cex=1.2, xlab=&quot;Milisegundos&quot;, ylab=&quot;Desviacion estandar (Voltios)&quot;) ###################################################################### # Prueba F de Fareway para comparar modelo lleno menos modelo reducido ###################################################################### Num =( sum(diag(SigmaRed2E-SigmaE))/(p-q2)) Den = (sum(diag(SigmaE))/(n-p)) F2 = Num/Den factor = (((sum(diag(SigmaE)))^2)/ (sum(diag(SigmaE^2)))) f12 = factor*(p-q2) f22 = factor*(n-p) Fteo2&lt;-qf(0.95,f12,f22) 12.5 Estadística Espacial El enfoque bajo el cual se desarrolla la metodología de predicción y estimación de la estructura de dependencia espacial, se centra en una rama de la estadística que en los últimos tiempos ha cobrado importancia en muchas áreas del conocimiento: . La Estadística espacial, es la reunión de un conjunto de metodologías apropiadas para el análisis de datos que corresponden a la medición de variables aleatorias en diversos sitios (puntos del espacio o agregaciones espaciales) de una región. En general se consideran tres subaréas dentro de su estudio que se diferencian por las características del espacio en el cual tienen aplicación: Geoestadística, datos en Laticce y patrones puntuales. Para el caso de aplicación de esta guía, la rama específica se centra en Geoestadística, dado que las curvas son medidas en diferentes ubicaciones en un dominio continuo. 12.5.1 Metodología de predicción espacial con datos funcionales Se considera un proceso aleatorio funcional: \\[\\chi_s : s \\in D \\subset R^d \\] Tal que \\(\\chi_s\\) es una variable aleatoria funcional. Sean \\(s_1, s_2,..., s_n\\) puntos aleatorios en D, en cada uno de los cuales se observa una realización del proceso aleatorio (\\(\\chi_s\\): \\(\\chi_{s_1},\\chi_{s_2},..., \\chi_{s_n}\\)). Además, se asume que este proceso es estacionario de segundo orden e isótropico, es decir que la función de media y de varianza son constantes y la covarianza solo depende de la distancia entre dos puntos muestreados. Formalmente se asume: La función \\(\\gamma(h;t)\\) es una función de \\(h\\) que comúnmente se conoce con el nombre de semivariograma asociado a \\(\\chi(t)\\). El objetivo al igual que en el caso de geoestadística univariada o multivariada es predecir el valor de la variable en un lugar no muestreado \\(s_0\\). En este caso la variable es una curva completa y no un escalar o un vector como lo relacionado con geoestadística univariada o multivariada; así, para establecer la respectiva predicción, se considera la familia de predictores lineales de la forma:\\[\\widehat{\\chi}_{s_0} = \\sum_{i=1} ^n \\lambda_i \\chi_{s_i} \\text{ $\\lambda_1,...,\\lambda_n \\in R$}\\] Este predictor tiene la misma expresión que para el caso de ordinario, sin embargo se debe notar que los objetos estudiados corresponden a curvas y no a variables escalares, es decir, la curva predicha es una combinación lineal de curvas observadas. Este predictor fue considerado inicialmente por Goulard \\(\\&amp;\\) Voltz (1993), sin embargo el enfoque bajo el cual se trabaja en esta tesis se basa en el presentado por Giraldo (2008). Bajo este enfoque, los pesos \\(\\lambda_i\\) óptimos para la predicción se obtienen al solucionar la ecuación: \\[\\begin{eqnarray} \\begin{pmatrix} \\int_t \\gamma_{s_1,s_1}(t)dt &amp; \\dots &amp; \\int_t \\gamma_{s_1,s_n}(t)dt &amp;1\\\\ ... &amp;... &amp; ... &amp; ...\\\\ \\int_t \\gamma_{s_n,s_1}(t)dt &amp; \\dots &amp; \\int_t \\gamma_{s_n,s_n}(t)dt &amp; 1\\\\ 1&amp;\\dots&amp;1&amp;0\\\\ \\end{pmatrix} \\begin{pmatrix} \\lambda_1\\\\ ...\\\\ \\lambda_n\\\\ -\\mu\\\\ \\end{pmatrix} = \\begin{pmatrix} \\int_t \\gamma_{s_0,s_1}(t)dt\\\\ ...\\\\ \\int_t \\gamma_{s_0,s_n}(t)dt\\\\ 1\\\\ \\end{pmatrix} \\end{eqnarray}\\] La función \\(\\gamma(h) = \\int_t \\gamma_{s_is_j}(t) dt = \\frac{1}{2}\\int_t V(\\chi_{s_i}(t) - \\chi_{s_j}(t)) dt\\), \\(h = \\|s_i-s_j\\|\\), se denomina traza-variograma, y corresponde a la extensión del semivariograma al caso en el que las mediciones son curvas (Giraldo, 2008). Con el fin de establecer la solución para la ecuación, es necesario encontrar un estimador del traza-variograma (\\(\\int_t \\gamma_{si,sj}(t)dt\\)) y dado que el proceso se asume estacionario: \\[ V(\\chi_{si}(t) - \\chi_{sj}(t)) = E((\\chi_{si}(t) - \\chi_{sj}(t))^2)\\] es posible utilizar el teorema de Fubini:\\[\\gamma(h) = \\frac{1}{2}\\int_t E((\\chi_{si}(t) - \\chi_{sj}(t))^2) dt = \\frac{1}{2} E\\left[\\int_t (\\chi_{si}(t) - \\chi_{sj}(t))^2 dt\\right]\\] Finalmente con esta representación y realizando una adaptación del estimador de momentos clásico (MoM) del semivariograma se obtiene el estimador del traza-variograma:\\[\\hat{\\gamma}(h) = \\frac{\\sum_{i,j \\in N(h)} \\int_T [ \\chi_{s_i}(t) -\\chi_{s_j}(t)]^2 dt}{2|N(h)|}\\] dónde \\(N(h) = \\{(s_i, s_j) : \\|s_i-s_j\\| = h\\}\\), y \\(|N(h)|\\) es el número de elementos distintos en \\(N(h)\\). Una vez estimado el traza variograma para cada variable de interés y para una secuencia de K valores \\(h_k\\), se propone ajustar un modelo paramétrico (de los conocidos como por ejemplo el exponencial), a los puntos \\((h_k, \\widehat{\\gamma}(h_k))\\), y finalmente si \\(\\gamma_{\\widehat{\\alpha}}(h_k)\\) denota la estimación del traza variograma, esta forma funcional es utilizada para estimar la estructura de correlación espacial a través de la equivalencia entre el variograma y la covarianza de procesos estacionarios:\\[ C(h) = \\sigma^2 - \\gamma(h)\\] \\[\\int_T C_{l,q}(s_i,s_j)(t) = \\int_T \\sigma_{l,q}^2(t) - \\int_T \\gamma_{l,q}(s_i,s_j)(t)\\] 12.5.2 Ilustración Se aplica la metodología para las mediciones de temperatura registradas en 35 estaciones meteorológicas ubicadas en las Provincias Marítimas Canadienses de tres provincias: Nueva Escocia (NS), Nuevo Brunswick (NB) y la Isla del Príncipe Eduardo (PEI). La función principal de geofd es okfd. Esta función permite realizar predicciones por kriging ordinario para datos suavizados con diferentes bases (B-spline y Fourier). Dentro de esta función se realizan los procesos de suavizamiento y la estimación del traza-variograma. 12.5.2.1 Lectura y gráfica de las curvas y las coordenadas library(fda) library(geofd) data(maritimes.data) data(maritimes.coords) head(maritimes.data[,1:4], n=5) ## [,1] [,2] [,3] [,4] ## [1,] -7.9 -4.4 -3.8 -8.60 ## [2,] -7.5 -4.2 -3.5 -8.32 ## [3,] -9.3 -5.3 -4.6 -9.87 ## [4,] -8.7 -5.4 -5.0 -9.55 ## [5,] -9.1 -5.6 -4.1 -9.58 matplot(maritimes.data,type=&quot;l&quot;,xlab=&quot;Día&quot;,ylab=&quot;Temperatuta (°C)&quot;) abline(h=0, lty=2) plot(maritimes.coords) coord.cero &lt;- matrix(c(-64.06, 45.79),nrow=1,ncol=2) points(coord.cero, col=2, lwd=3) 12.5.2.2 Suavizamiento a través de B-splines n&lt;-dim(maritimes.data)[1] argvals&lt;-seq(1,n, by=1) s&lt;-35 rangeval &lt;- range(argvals) norder &lt;- 4 nbasis &lt;- 65 bspl.basis &lt;- create.bspline.basis(rangeval, nbasis, norder) lambda &lt;-0 datafdPar &lt;- fdPar(bspl.basis, Lfdobj=2, lambda) smfd &lt;- smooth.basis(argvals,maritimes.data,datafdPar) datafd &lt;- smfd$fd plot(datafd, lty=1, xlab=&quot;Día&quot;, ylab=&quot;Temperatura (°C)&quot;) ## [1] &quot;done&quot; 12.5.2.3 Estimación de la traza-variograma y ajuste de modelos M &lt;- bsplinepen(bspl.basis,Lfdobj=0) L2norm &lt;- l2.norm(s, datafd, M) dista=max(dist(maritimes.coords))*0.9 tracev=trace.variog(maritimes.coords, L2norm, bin=FALSE,max.dist=dista,uvec=&quot;default&quot;,breaks=&quot;default&quot;,nugget.tolerance) x = c(tracev$u, tracev$v) models=fit.tracevariog(tracev, models=c(&quot;spherical&quot;,&quot;exponential&quot;,&quot;gaussian&quot;,&quot;matern&quot;),sigma2.0=2000, phi.0=4, fix.nugget=FALSE, nugget=0, fix.kappa=TRUE, kappa=1, max.dist.variogram=dista) plot(tracev$u, tracev$v, xlab=&quot;Distancia&quot;, ylab=&quot;Traza-Variograma tipo Cloud&quot;) tracevbin=trace.variog(maritimes.coords, L2norm, bin=TRUE, max.dist=dista) plot(tracevbin$u, tracevbin$v, ylim=c(0,3000), xlim=c(0, 7), xlab=&quot;Distance&quot;, ylab=&quot;Traza-Variograma tipo Bin&quot;) 12.5.2.4 Modelos models ## $best ## variofit: model parameters estimated by OLS (ordinary least squares): ## covariance model is: matern with fixed kappa = 1 ## parameter estimates: ## tausq sigmasq phi ## 64.9030 2346.8539 1.8376 ## Practical Range with cor=0.05 for asymptotic range: 7.347868 ## ## variofit: minimised sum of squares = 514347277 ## ## $fitted ## $fitted[[1]] ## variofit: model parameters estimated by OLS (ordinary least squares): ## covariance model is: spherical ## parameter estimates: ## tausq sigmasq phi ## 0.0000 2112.1217 5.6607 ## Practical Range with cor=0.05 for asymptotic range: 5.660719 ## ## variofit: minimised sum of squares = 517375905 ## ## $fitted[[2]] ## variofit: model parameters estimated by OLS (ordinary least squares): ## covariance model is: exponential ## parameter estimates: ## tausq sigmasq phi ## 0.0000 3333.3219 5.1272 ## Practical Range with cor=0.05 for asymptotic range: 15.35984 ## ## variofit: minimised sum of squares = 516012113 ## ## $fitted[[3]] ## variofit: model parameters estimated by OLS (ordinary least squares): ## covariance model is: gaussian ## parameter estimates: ## tausq sigmasq phi ## 222.1683 1810.9009 2.5149 ## Practical Range with cor=0.05 for asymptotic range: 4.352856 ## ## variofit: minimised sum of squares = 515245956 ## ## $fitted[[4]] ## variofit: model parameters estimated by OLS (ordinary least squares): ## covariance model is: matern with fixed kappa = 1 ## parameter estimates: ## tausq sigmasq phi ## 64.9030 2346.8539 1.8376 ## Practical Range with cor=0.05 for asymptotic range: 7.347868 ## ## variofit: minimised sum of squares = 514347277 12.5.2.5 Predicciones espaciales en una ubicación no muestreada okfd.res&lt;-okfd(new.coords=coord.cero, coords=maritimes.coords,cov.model=&quot;exponential&quot;, data=maritimes.data, nbasis=65, argvals=argvals, fix.nugget=TRUE) plot(okfd.res$datafd, lty=1,col=8, xlab=&quot;Día&quot;,ylab=&quot;Temperatura (grados °C)&quot;,main=&quot;Predicción en Moncton&quot;) ## [1] &quot;done&quot; lines(okfd.res$argvals, okfd.res$krig.new.data, col=1, lwd=2, type=&quot;l&quot;, lty=1, main=&quot;Predicciones&quot;, xlab=&quot;Día&quot;,ylab=&quot;Temperatura (grados °C)&quot;) lines(data(maritimes.avg), type=&quot;p&quot;, pch=20,cex=0.5, col=2, lwd=1) 12.5.2.6 Uso de bases de Fourier argvals&lt;-seq(1,n, by=1) col1&lt;-sample((min(maritimes.coords[,1])*100):(max(maritimes.coords[,1])*100),10, replace=TRUE)/100 col2&lt;-sample((min(maritimes.coords[,2])*100):(max(maritimes.coords[,2])*100),10, replace=TRUE)/100 new.coords &lt;- cbind(col1,col2) okfd.res&lt;-okfd(new.coords=new.coords, coords=maritimes.coords, data=maritimes.data, smooth.type=&quot;fourier&quot;, nbasis=65,argvals=argvals, kappa=0.7) names(okfd.res) ## [1] &quot;coords&quot; &quot;data&quot; &quot;argvals&quot; ## [4] &quot;nbasis&quot; &quot;lambda&quot; &quot;new.coords&quot; ## [7] &quot;emp.trace.vari&quot; &quot;trace.vari&quot; &quot;new.Eu.d&quot; ## [10] &quot;functional.kriging.weights&quot; &quot;krig.new.data&quot; &quot;pred.var&quot; ## [13] &quot;trace.vari.array&quot; &quot;datafd&quot; plot(okfd.res, ylim=c(0,6000)) trace.variog.bin&lt;-trace.variog(okfd.res$coords,okfd.res$emp.trace.vari$L2norm, bin=TRUE) plot(trace.variog.bin$u,trace.variog.bin$v , ylim=c(0,6000), xlab=&quot;Distancia&quot;, ylab=&quot;Traza-variograma&quot;, main=&quot;Traza-variogram tipo Bin&quot;) okfd.res$trace.vari.array ## [[1]] ## variofit: model parameters estimated by OLS (ordinary least squares): ## covariance model is: spherical ## parameter estimates: ## tausq sigmasq phi ## 178.3065 483450.0697 1745.6510 ## Practical Range with cor=0.05 for asymptotic range: 1745.651 ## ## variofit: minimised sum of squares = 539799729 ## ## [[2]] ## variofit: model parameters estimated by OLS (ordinary least squares): ## covariance model is: exponential ## parameter estimates: ## tausq sigmasq phi ## 109.9120 11006.6310 23.1468 ## Practical Range with cor=0.05 for asymptotic range: 69.34151 ## ## variofit: minimised sum of squares = 539566326 ## ## [[3]] ## variofit: model parameters estimated by OLS (ordinary least squares): ## covariance model is: gaussian ## parameter estimates: ## tausq sigmasq phi ## 369.1311 2103.8708 3.3617 ## Practical Range with cor=0.05 for asymptotic range: 5.818405 ## ## variofit: minimised sum of squares = 552739397 ## ## [[4]] ## variofit: model parameters estimated by OLS (ordinary least squares): ## covariance model is: matern with fixed kappa = 0.7 ## parameter estimates: ## tausq sigmasq phi ## 200.4891 4486.5508 5.8947 ## Practical Range with cor=0.05 for asymptotic range: 20.31812 ## ## variofit: minimised sum of squares = 541310787 okfd.res[11] ## $krig.new.data ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] ## [1,] -5.12079753 -3.8124510 -3.64515081 -9.59594821 -8.332494956 -5.51620591 -6.94823916 -8.15570060 ## [2,] -5.22446551 -3.8831771 -3.77626642 -9.78744394 -8.384757619 -5.63838899 -6.96381276 -8.31207498 ## [3,] -5.42041839 -4.0073009 -3.92101761 -10.05908036 -8.479568969 -5.82925059 -7.17977969 -8.59104427 ## [4,] -5.71065900 -4.1949442 -4.08940921 -10.39765545 -8.630971975 -6.10068541 -7.59353947 -8.98086752 ## [5,] -6.07424481 -4.4402097 -4.28114673 -10.77433759 -8.840609551 -6.44465498 -8.15607522 -9.44404464 ## [6,] -6.47173397 -4.7218837 -4.48630849 -11.15000333 -9.097145596 -6.83320221 -8.78489236 -9.92508278 ## [7,] -6.85490547 -5.0086470 -4.68919270 -11.48364152 -9.379743651 -7.22433566 -9.38532579 -10.36332717 ## [8,] -7.17914212 -5.2674262 -4.87396189 -11.74170882 -9.664386806 -7.57220088 -9.87447432 -10.70748634 ## [9,] -7.41501827 -5.4725364 -5.03016068 -11.90592848 -9.930896568 -7.83865511 -10.20134791 -10.92790361 ## [10,] -7.55575896 -5.6129258 -5.15624160 -11.97732840 -10.168269608 -8.00289153 -10.35788576 -11.02314927 ## [11,] -7.61832611 -5.6952837 -5.25987927 -11.97525896 -10.376483842 -8.06626990 -10.37803013 -11.01901245 ## [12,] -7.63765460 -5.7418865 -5.35488889 -11.93147682 -10.564074299 -8.05086653 -10.32532593 -10.96005409 ## [13,] -7.65552022 -5.7835626 -5.45567619 -11.88076168 -10.742194598 -7.99207527 -10.27265928 -10.89597090 ## [14,] -7.70711851 -5.8496192 -5.57099139 -11.85056143 -10.917119862 -7.92734948 -10.27988470 -10.86652644 ## [15,] -7.80920179 -5.9575725 -5.69907440 -11.85253479 -11.083811414 -7.88435908 -10.37563740 -10.88929467 ## [16,] -7.95331990 -6.1057541 -5.82595098 -11.87845006 -11.223017077 -7.87209188 -10.54843592 -10.95377465 ## [17,] -8.10638997 -6.2712207 -5.92775124 -11.90179004 -11.303428941 -7.87765967 -10.74958621 -11.02373860 ## [18,] -8.21882496 -6.4140190 -5.97672077 -11.88488906 -11.288915460 -7.86997827 -10.90711607 -11.04742069 ## [19,] -8.23831801 -6.4871068 -5.94943155 -11.78989425 -11.149218341 -7.80951586 -10.94690511 -10.97295256 ## [20,] -8.12570313 -6.4495775 -5.83492172 -11.59072006 -10.871244825 -7.66150246 -10.81516952 -10.76491403 ## [21,] -7.86856868 -6.2797509 -5.64034558 -11.28277094 -10.467593682 -7.40888601 -10.49605984 -10.41742738 ## [22,] -7.48872263 -5.9844956 -5.39226675 -10.88766996 -9.979421460 -7.06123559 -10.01943705 -9.96002254 ## [23,] -7.04111065 -5.6019413 -5.13284604 -10.45144841 -9.472104270 -6.65678071 -9.45654234 -9.45434102 ## [24,] -6.60398769 -5.1963435 -4.91156278 -10.03631608 -9.024040551 -6.25658244 -8.90453887 -8.98214646 ## [25,] -6.26246056 -4.8458729 -4.77437908 -9.70780903 -8.710861904 -5.93197082 -8.46388928 -8.62742947 ## [26,] -6.08933047 -4.6259968 -4.75305027 -9.52035826 -8.588731917 -5.74826747 -8.21443269 -8.45701102 ## [27,] -6.12797715 -4.5923846 -4.85736334 -9.50480319 -8.680898803 -5.74891652 -8.19633833 -8.50452374 ## [28,] -6.38160845 -4.7675505 -5.07240768 -9.66095258 -8.971052664 -5.94415691 -8.40077543 -8.76185081 ## [29,] -6.81164933 -5.1346379 -5.36171550 -9.95707514 -9.405448082 -6.30726586 -8.77253503 -9.18023370 ## [30,] -7.34576097 -5.6400488 -5.67558765 -10.33649377 -9.903585769 -6.77947649 -9.22369355 -9.68081546 ## [31,] -7.89356292 -6.2044423 -5.96255352 -10.72970272 -10.375069838 -7.28243488 -9.65457441 -10.17200752 ## [32,] -8.36621182 -6.7395432 -6.18107515 -11.06907831 -10.738651679 -7.73511590 -9.97649864 -10.56937877 ## [33,] -8.69506826 -7.1667475 -6.30852843 -11.30265404 -10.938875471 -8.07098459 -10.13056226 -10.81319990 ## [34,] -8.84499231 -7.4330757 -6.34520587 -11.40372765 -10.956325744 -8.25117169 -10.09796292 -10.87946771 ## [35,] -8.81925312 -7.5207180 -6.31239848 -11.37417089 -10.809100393 -8.27052590 -9.89982324 -10.78198248 ## [36,] -8.65522321 -7.4480614 -6.24517685 -11.24092755 -10.545369794 -8.15530870 -9.58732790 -10.56538079 ## [37,] -8.41237117 -7.2622540 -6.18188333 -11.04688609 -10.229144818 -7.95349012 -9.22550856 -10.29131556 ## [38,] -8.15594922 -7.0254778 -6.15319307 -10.83866364 -9.923067034 -7.72049438 -8.87549999 -10.02162724 ## [39,] -7.94071383 -6.7986249 -6.17367626 -10.65450066 -9.672710641 -7.50433069 -8.58018316 -9.80294969 ## [40,] -7.79879668 -6.6266020 -6.23808034 -10.51529133 -9.496378189 -7.33405047 -8.35685711 -9.65661447 ## [41,] -7.73455392 -6.5289128 -6.32324750 -10.42083640 -9.382829015 -7.21441994 -8.19835244 -9.57614839 ## [42,] -7.72724003 -6.4976532 -6.39504609 -10.35197040 -9.297223908 -7.12789611 -8.08147943 -9.53254676 ## [43,] -7.74023206 -6.5030197 -6.41834214 -10.27767459 -9.193383923 -7.04295232 -7.97961946 -9.48542848 ## [44,] -7.73384258 -6.5044341 -6.36723452 -10.16504183 -9.028827925 -6.92608106 -7.87519924 -9.39668984 ## [45,] -7.67794529 -6.4639557 -6.23273544 -9.98932295 -8.778397584 -6.75386880 -7.76800691 -9.24274864 ## [46,] -7.56088497 -6.3581569 -6.02580224 -9.74139331 -8.442756448 -6.52162864 -7.67671675 -9.02201654 ## [47,] -7.39234636 -6.1852009 -5.77491036 -9.43077469 -8.049510571 -6.24614216 -7.63314468 -8.75567142 ## [48,] -7.19965210 -5.9652888 -5.51884806 -9.08359042 -7.646730253 -5.96178520 -7.67101688 -8.48170633 ## [49,] -7.01883280 -5.7345446 -5.29670347 -8.73617764 -7.290699537 -5.71120124 -7.81273710 -8.24407795 ## [50,] -6.88324157 -5.5342391 -5.13775592 -8.42617240 -7.031234138 -5.53321467 -8.05829712 -8.08006997 ## [51,] -6.81309124 -5.3985197 -5.05398427 -8.18344938 -6.898497754 -5.45142686 -8.37990846 -8.00939389 ## [52,] -6.80893036 -5.3441736 -5.03717202 -8.02321793 -6.894777214 -5.46671915 -8.72431701 -8.02799291 ## [53,] -6.85087572 -5.3653232 -5.06133415 -7.94290547 -6.993302411 -5.55577739 -9.02256786 -8.10817451 ## [54,] -6.90374352 -5.4345286 -5.08975833 -7.92340737 -7.144309191 -5.67607667 -9.20484815 -8.20496187 ## [55,] -6.92654928 -5.5099559 -5.08473494 -7.93414487 -7.286659597 -5.77599502 -9.21655898 -8.26690252 ## [56,] -6.88364708 -5.5465769 -5.01736989 -7.94045286 -7.361953406 -5.80734926 -9.03136768 -8.24844396 ## [57,] -6.75437303 -5.5082633 -4.87490498 -7.91134115 -7.327534965 -5.73703306 -8.65777218 -8.12066247 ## [58,] -6.53853958 -5.3774237 -4.66369009 -7.82573178 -7.165226715 -5.55473578 -8.13744152 -7.87766800 ## [59,] -6.25633760 -5.1595486 -4.40714933 -7.67581428 -6.883851990 -5.27482646 -7.53578683 -7.53722675 ## [60,] -5.94278515 -4.8814746 -4.13942640 -7.46700370 -6.515282886 -4.93207679 -6.92725459 -7.13569105 ## [61,] -5.63836385 -4.5839280 -3.89651597 -7.21488488 -6.105400451 -4.57252510 -6.37915951 -6.71877772 ## [62,] -5.37848850 -4.3104795 -3.70729110 -6.94024068 -5.702549085 -4.24200630 -5.93814066 -6.33071192 ## [63,] -5.18469705 -4.0959958 -3.58677366 -6.66361811 -5.346514929 -3.97537548 -5.62248571 -6.00452020 ## [64,] -5.05988089 -3.9577539 -3.53330167 -6.40082514 -5.060686121 -3.78912592 -5.42188578 -5.75578212 ## [65,] -4.98868213 -3.8915852 -3.53013325 -6.16032976 -4.849013989 -3.67907009 -5.30414738 -5.58110398 ## [66,] -4.94271835 -3.8739697 -3.55080885 -5.94290433 -4.698012631 -3.62332605 -5.22656954 -5.46127326 ## [67,] -4.88897518 -3.8693274 -3.56660808 -5.74321664 -4.582706831 -3.58943930 -5.14858821 -5.36785290 ## [68,] -4.79889877 -3.8403221 -3.55394888 -5.55259342 -4.474520293 -3.54345545 -5.04217208 -5.27119389 ## [69,] -4.65563462 -3.7582036 -3.49970211 -5.36198739 -4.348805529 -3.45840039 -4.89731777 -5.14766228 ## [70,] -4.45749537 -3.6102771 -3.40307987 -5.16428593 -4.190081021 -3.31998225 -4.72155093 -4.98429878 ## [71,] -4.21689478 -3.4024732 -3.27378987 -4.95544092 -3.993902709 -3.12826436 -4.53412451 -4.77999461 ## [72,] -3.95531180 -3.1564363 -3.12723151 -4.73434536 -3.765368673 -2.89527301 -4.35709869 -4.54330482 ## [73,] -3.69596400 -2.9021310 -2.97833285 -4.50178408 -3.515213495 -2.63964055 -4.20627321 -4.28793119 ## [74,] -3.45646045 -2.6682404 -2.83596652 -4.25902654 -3.255025510 -2.38012511 -4.08482499 -4.02744645 ## [75,] -3.24361741 -2.4732282 -2.69965131 -4.00665088 -2.993181618 -2.13000562 -3.98155081 -3.77088056 ## [76,] -3.05190126 -2.3197027 -2.55952350 -3.74401061 -2.732668725 -1.89391679 -3.87413386 -3.52037198 ## [77,] -2.86583775 -2.1937273 -2.39956501 -3.46945880 -2.471220686 -1.66782644 -3.73629676 -3.27136151 ## [78,] -2.66553370 -2.0692557 -2.20309453 -3.18114353 -2.203399837 -1.44184784 -3.54653013 -3.01500551 ## [79,] -2.43354578 -1.9163680 -1.95884569 -2.87798779 -1.923648683 -1.20473233 -3.29563310 -2.74184940 ## [80,] -2.16096229 -1.7108609 -1.66576690 -2.56043150 -1.629107252 -0.94844884 -2.99068522 -2.44550542 ## [81,] -1.85083468 -1.4423437 -1.33503232 -2.23064385 -1.321183371 -0.67133906 -2.65416019 -2.12518288 ## [82,] -1.51791662 -1.1184080 -0.98855017 -1.89215417 -1.005386976 -0.37888945 -2.31835635 -1.78636561 ## [83,] -1.18478950 -0.7635690 -0.65426367 -1.54910359 -0.689602230 -0.08199158 -2.01672088 -1.43956001 ## [84,] -0.87554167 -0.4131850 -0.35947544 -1.20548803 -0.381541775 0.20660025 -1.77457480 -1.09764520 ## [85,] -0.60890366 -0.1040258 -0.12401957 -0.86477903 -0.086412686 0.47632686 -1.60193595 -0.77275745 ## [86,] -0.39290960 0.1358495 0.04481084 -0.53015853 0.194269788 0.72196738 -1.49054146 -0.47372192 ## [87,] -0.22270841 0.2950039 0.15412809 -0.20533678 0.462221578 0.94477053 -1.41596739 -0.20479708 ## [88,] -0.08221907 0.3820189 0.22352242 0.10436669 0.720412433 1.15117133 -1.34428574 0.03398614 ## [89,] 0.05081524 0.4233239 0.27980205 0.39120195 0.970306092 1.34952389 -1.24140683 0.24516323 ## [90,] 0.19783756 0.4559840 0.34978874 0.64497788 1.209418287 1.54598232 -1.08249691 0.43157178 ## [91,] 0.37261435 0.5174075 0.45311242 0.85423262 1.430282663 1.74100410 -0.85884528 0.59439802 ## [92,] 0.57656435 0.6348386 0.59697436 1.00860354 1.621511291 1.92781465 -0.58027934 0.73233180 ## [93,] 0.79774461 0.8176013 0.77433394 1.10198785 1.770952976 2.09358855 -0.27247539 0.84223883 ## [94,] 1.01392427 1.0543246 0.96605433 1.13571540 1.870200126 2.22324206 0.03006884 0.92122129 ## [95,] 1.19899734 1.3160118 1.14646727 1.12077265 1.919118007 2.30485444 0.29344709 0.96942307 ## [96,] 1.33099691 1.5641830 1.29087618 1.07820271 1.928870882 2.33511492 0.49355898 0.99260942 ## [97,] 1.39945729 1.7618905 1.38296734 1.03716961 1.922191713 2.32303214 0.62263230 1.00352214 ## [98,] 1.40997951 1.8845677 1.42009241 1.03073961 1.930337510 2.29051484 0.69133033 1.02130153 ## [99,] 1.38456821 1.9276746 1.41492835 1.09005731 1.987109256 2.26925029 0.72594490 1.06879895 ## [100,] 1.35743362 1.9089435 1.39297174 1.23810638 2.121227234 2.29435014 0.76150687 1.16822933 ## [,9] [,10] ## [1,] -3.98104283898 -3.748137631 ## [2,] -4.05239305028 -3.816478740 ## [3,] -4.18780729809 -3.936320473 ## [4,] -4.39672955573 -4.118754740 ## [5,] -4.67068504929 -4.358987159 ## [6,] -4.98446550882 -4.636767534 ## [7,] -5.30211332480 -4.921388466 ## [8,] -5.58616328563 -5.179927478 ## [9,] -5.80759065175 -5.386391893 ## [10,] -5.95360662963 -5.529064423 ## [11,] -6.03095193062 -5.613770814 ## [12,] -6.06355002509 -5.661904722 ## [13,] -6.08497262743 -5.703551401 ## [14,] -6.12769935884 -5.767528037 ## [15,] -6.21218147347 -5.871174711 ## [16,] -6.33893247758 -6.012971678 ## [17,] -6.48617212650 -6.170421048 ## [18,] -6.61410325432 -6.304255928 ## [19,] -6.67507827184 -6.368284613 ## [20,] -6.62720749434 -6.322520284 ## [21,] -6.44785292335 -6.146158031 ## [22,] -6.14326848534 -5.846770419 ## [23,] -5.75147703911 -5.462892783 ## [24,] -5.33712756982 -5.058782082 ## [25,] -4.97913494634 -4.712151379 ## [26,] -4.75382998169 -4.497574358 ## [27,] -4.71762205855 -4.469507699 ## [28,] -4.89344553826 -4.649138545 ## [29,] -5.26443090992 -5.018433536 ## [30,] -5.77650889795 -5.523038304 ## [31,] -6.34945894977 -6.083488584 ## [32,] -6.89381841178 -6.612112005 ## [33,] -7.32961874737 -7.031568488 ## [34,] -7.60248697677 -7.290575059 ## [35,] -7.69335338150 -7.373096394 ## [36,] -7.61965315102 -7.298963985 ## [37,] -7.42806644910 -7.116072848 ## [38,] -7.18094436652 -6.886421264 ## [39,] -6.94007344749 -6.669753415 ## [40,] -6.75195916482 -6.509053074 ## [41,] -6.63824240630 -6.421505677 ## [42,] -6.59337718806 -6.396982411 ## [43,] -6.58970708676 -6.404036171 ## [44,] -6.58812246726 -6.401396265 ## [45,] -6.55107928239 -6.351542101 ## [46,] -6.45427147721 -6.232492209 ## [47,] -6.29377744010 -6.044563246 ## [48,] -6.08687407419 -5.810343454 ## [49,] -5.86653285110 -5.568061471 ## [50,] -5.67137154397 -5.360374521 ## [51,] -5.53405314670 -5.221844631 ## [52,] -5.47147930514 -5.168685094 ## [53,] -5.47954297650 -5.193671188 ## [54,] -5.53386748906 -5.267626171 ## [55,] -5.59625426532 -5.347039212 ## [56,] -5.62496984078 -5.385666333 ## [57,] -5.58596357653 -5.346880014 ## [58,] -5.46189760052 -5.213360316 ## [59,] -5.25653134329 -4.991495437 ## [60,] -4.99333336126 -4.709353598 ## [61,] -4.70880980338 -4.408875713 ## [62,] -4.44248673396 -4.134518297 ## [63,] -4.22636346880 -3.921512371 ## [64,] -4.07673313272 -3.786946540 ## [65,] -3.99053975845 -3.726033587 ## [66,] -3.94712839730 -3.714431725 ## [67,] -3.91472518073 -3.715790843 ## [68,] -3.85968751128 -3.692260523 ## [69,] -3.75584893310 -3.614927963 ## [70,] -3.59133677261 -3.471254727 ## [71,] -3.37103133548 -3.267507994 ## [72,] -3.11412420265 -3.025658494 ## [73,] -2.84764484497 -2.775815706 ## [74,] -2.59795641758 -2.546534230 ## [75,] -2.38275681817 -2.355897487 ## [76,] -2.20591828674 -2.206011012 ## [77,] -2.05662863780 -2.082505372 ## [78,] -1.91301942029 -1.959162203 ## [79,] -1.74915336913 -1.806267429 ## [80,] -1.54327317090 -1.600198999 ## [81,] -1.28486113835 -1.331387300 ## [82,] -0.97842039429 -1.008249953 ## [83,] -0.64285283252 -0.655865043 ## [84,] -0.30659549540 -0.309673739 ## [85,] 0.00008724653 -0.005955762 ## [86,] 0.25342902748 0.228218804 ## [87,] 0.44269263264 0.382668733 ## [88,] 0.57300707324 0.467160235 ## [89,] 0.66367228623 0.508886613 ## [90,] 0.74240027979 0.544992737 ## [91,] 0.83713974763 0.612190339 ## [92,] 0.96784230984 0.736367388 ## [93,] 1.14056684709 0.925138770 ## [94,] 1.34566895468 1.165496261 ## [95,] 1.56066575756 1.427307931 ## [96,] 1.75702731719 1.671780647 ## [97,] 1.90900311786 1.862591230 ## [98,] 2.00197112346 1.976607993 ## [99,] 2.03787853065 2.011189444 ## [100,] 2.03611269727 1.985950589 ## [ reached getOption(&quot;max.print&quot;) -- omitted 265 rows ] okfd.res[12] ## $pred.var ## [1] 4157.310 4420.736 4244.882 4158.817 4258.427 4160.441 4170.696 4159.506 4230.533 4549.958 matplot(okfd.res$argvals, okfd.res$krig.new.data, col=1, lwd=1,type=&quot;l&quot;, lty=1, main=&quot;Predicciones&quot;, xlab=&quot;Día&quot;,ylab=&quot;Temperatura (grados °C)&quot;) 12.6 Patrones Puntuales El análisis de patrones puntuales (PP) estudia la distribución espacial de los puntos (Boots &amp; Getis, 1988). En el análisis se utiliza la densidad, la dispersión y la homogeneidad de conjuntos de datos de puntos para evaluar, cuantificar y caracterizar su distribución. Durante los últimos cincuenta años, se han desarrollado varios métodos y medidas para analizar, modelar, visualizar e interpretar estas propiedades de los patrones puntuales (Qiang et al, 2020). Hay tres categorías principales de técnicas que se pueden aplicar en PP: Estadísticas descriptivas Métodos basados en densidades Métodos basados en distancias El uso de estadísticas descriptivas proporciona un resumen de las características básicas del patrón, como su tendencia central y dispersión. Las estadísticas descriptivas brindan una manera simple de visualizar un conjunto de datos como un todo, a partir de estadísticas como la mediana o la media o con medidas de dispersión tales como el eclipse de desviación estándar para aquellos conjuntos de datos que muestran un patrón direccional. Sin embargo, las estadísticas descriptivas son algo limitadas en lo que pueden comunicar sobre el patrón de un conjunto de datos. Así, se han desarrollado técnicas más poderosas para explorar patrones, que se basan en la densidad o en la distancia, según las propiedades espaciales que la técnica esté considerando (Gimond, 2020). Los métodos basados en densidades se centran en las propiedades de primer orden de un conjunto de datos, es decir, la variación en las ubicaciones individuales de los puntos del conjunto de datos en el área de interés, y caracterizan la distribución del conjunto de datos en términos de densidad. Los métodos basados en distancias se centran en las propiedades de segundo orden de un conjunto de datos, es decir, las interacciones entre puntos, la forma de distriburirse o la tendencia a formar grupos, y caracterizan la distribución del conjunto de datos en términos de dispersión. 12.6.1 Datos La base de datos que se trabaja en esta guía presenta información de la intensidad de sismos en el territorio colombiano en el 2009. Se cuenta con las coordanadas planas y la intensidad del sismo. #================================================ #paquetes necesarios #================================================ library (sp) library(nlme) library(rpart) library(splancs) library(spatstat) library(mctest) library(ape) library(maptools) library(rgdal) library(ecodist) library(RANN) #================================================ #Lectura datos #================================================ #Datos = Datos_Sismos_2009 Datos=read.table(&quot;data_11_PatronesPuntuales/6_PatronesPuntuales/Datos/Datos_Sismos_2009.txt&quot;,dec=&quot;,&quot;,sep=&quot;\\t&quot;,header=T) summary(Datos) ## X Y Magnitud ## Min. : 465013 Min. : 537163 Min. :1.000 ## 1st Qu.: 789186 1st Qu.: 890133 1st Qu.:1.600 ## Median : 929859 Median :1095527 Median :2.000 ## Mean : 915088 Mean :1078983 Mean :2.105 ## 3rd Qu.:1035149 3rd Qu.:1250936 3rd Qu.:2.500 ## Max. :1331751 Max. :1843089 Max. :5.500 S &lt;- readShapePoly(&quot;data_11_PatronesPuntuales/6_PatronesPuntuales/Datos/Colombia.shp&quot;) SP &lt;- as(S, &quot;SpatialPolygons&quot;) sismos=ppp(Datos$X,Datos$Y,marks=Datos$Magnitud,window=owin(c(450433,1806815),c(22875.5,1870870.5))) unitname(sismos)=&quot;meter&quot; 12.6.1.1 Análisis descriptivo A continuación, se presentan los respectivos histogramas. #================================================ #Gráficas básicas #================================================ x11() plot(sismos, main=&quot;&quot;) x11() par(mfrow=c(1,2)) hist(sismos$x,xlab=&quot;Este&quot;,ylab=&quot;&quot;,main=&quot;&quot;) hist(sismos$y,xlab=&quot;Norte&quot;,ylab=&quot;&quot;,main=&quot;&quot;) 12.6.1.2 Pruebas de Aleatoriedad basadas en cuadrantes Al observar la distribución de los puntos en el conjunto de datos y los patrones respectivos que muestran, la pregunta clave que a menudo es necesario responder es: ¿los puntos en el conjunto de datos están agrupados, distribuidos aleatoriamente (es decir, muestran una aleatoriedad espacial completa), uniformes o dispersos? Si bien es posible evaluar visualmente esta distribución, para poder cuantificar estadísticamente la distribución de los datos, es posible comparar su distribución con la distribución de Poisson (la distribución de Poisson describe la probabilidad o tasa de que ocurra un evento en un intervalo fijo de tiempo o espacio). Esencialmente, si los datos no se ajustan al modelo de Poisson, entonces se puede inferir que algo interesante podría estar sucediendo y que nuestros eventos podrían no ser independientes entre sí. En cambio, pueden estar agrupados o dispersos y es probable que haya procesos subyacentes que influyan en estos patrones. La prueba más básica de aleatoriedad espacial se puede completar con los resultados de una análisis por cuadrantes. La idea de esta prueba es comparar los cuadrantes construidos con la base de datos y compararlos con una distribución de Poisson para los mismos cuadrantes; es decir, se verifica si la distribución de puntos en el área de estudio difiere de la aleatoriedad espacial completa y si se encuentran algunos grupos presentes. Así, es posible llevar a cabo una prueba de chi-cuadrado. Esta prueba permitirá evidenciar si los datos observados se distribuyen bajo la hipótesis nula de aleatoriedad #================================================ #Por medio de cuadrados #================================================ #Prueba Chi-cuadrado #Ho: la intensidad es homogenea #Ha: la intensidad no es homogenea #sismos.split &lt;- split(sismos) #Cuadricula 4x4 quadratcount(sismos, nx = 4, ny = 4) ## x ## y [4.5e+05,7.9e+05) [7.9e+05,1.13e+06) [1.13e+06,1.47e+06) [1.47e+06,1.81e+06] ## [1.41e+06,1.87e+06] 2 83 12 0 ## [9.47e+05,1.41e+06) 160 506 85 0 ## [4.85e+05,9.47e+05) 148 232 7 0 ## [2.29e+04,4.85e+05) 0 0 0 0 Q4 = quadratcount(sismos, nx = 4, ny = 4) x11() plot(sismos, cex = 0.5, pch = &quot;+&quot;,main=&quot;&quot;) plot(Q4, add = TRUE, cex = 0.8,col=4) plot(S,add = TRUE) quadrat.test(sismos, nx = 4, ny = 4) ## ## Chi-squared test of CSR using quadrat counts ## ## data: sismos ## X2 = 3580.2, df = 15, p-value &lt; 0.00000000000000022 ## alternative hypothesis: two.sided ## ## Quadrats: 4 by 4 grid of tiles #Cuadricula 5x5 quadratcount(sismos, nx = 5, ny = 5) ## x ## y [4.5e+05,7.22e+05) [7.22e+05,9.93e+05) [9.93e+05,1.26e+06) [1.26e+06,1.54e+06) ## [1.5e+06,1.87e+06] 0 8 52 0 ## [1.13e+06,1.5e+06) 59 173 247 1 ## [7.62e+05,1.13e+06) 64 366 123 1 ## [3.92e+05,7.62e+05) 50 80 11 0 ## [2.29e+04,3.92e+05) 0 0 0 0 ## x ## y [1.54e+06,1.81e+06] ## [1.5e+06,1.87e+06] 0 ## [1.13e+06,1.5e+06) 0 ## [7.62e+05,1.13e+06) 0 ## [3.92e+05,7.62e+05) 0 ## [2.29e+04,3.92e+05) 0 Q5 = quadratcount(sismos, nx = 5, ny = 5) x11() plot(sismos, cex = 0.5, pch = &quot;+&quot;,main=&quot;&quot;) plot(Q5, add = TRUE, cex = 0.8,col=4) plot(S,add = TRUE) quadrat.test(sismos, nx = 5, ny = 5) ## ## Chi-squared test of CSR using quadrat counts ## ## data: sismos ## X2 = 4015.8, df = 24, p-value &lt; 0.00000000000000022 ## alternative hypothesis: two.sided ## ## Quadrats: 5 by 5 grid of tiles #Cuadricula 6x6 quadratcount(sismos, nx = 6, ny = 6) ## x ## y [4.5e+05,6.76e+05) [6.76e+05,9.03e+05) [9.03e+05,1.13e+06) [1.13e+06,1.35e+06) ## [1.56e+06,1.87e+06] 0 2 26 6 ## [1.25e+06,1.56e+06) 17 79 133 35 ## [9.47e+05,1.25e+06) 9 157 328 56 ## [6.39e+05,9.47e+05) 44 197 118 7 ## [3.31e+05,6.39e+05) 17 4 0 0 ## [2.29e+04,3.31e+05) 0 0 0 0 ## x ## y [1.35e+06,1.58e+06) [1.58e+06,1.81e+06] ## [1.56e+06,1.87e+06] 0 0 ## [1.25e+06,1.56e+06) 0 0 ## [9.47e+05,1.25e+06) 0 0 ## [6.39e+05,9.47e+05) 0 0 ## [3.31e+05,6.39e+05) 0 0 ## [2.29e+04,3.31e+05) 0 0 Q4 = quadratcount(sismos, nx = 6, ny = 6) x11() plot(sismos, cex = 0.5, pch = &quot;+&quot;,main=&quot;&quot;) plot(Q4, add = TRUE, cex = 0.8,col=4) plot(S,add = TRUE) quadrat.test(sismos, nx = 6, ny = 6) ## ## Chi-squared test of CSR using quadrat counts ## ## data: sismos ## X2 = 5079.8, df = 35, p-value &lt; 0.00000000000000022 ## alternative hypothesis: two.sided ## ## Quadrats: 6 by 6 grid of tiles # Lamda Retícula 4X4 plot(sismos, main=&quot;Eventos&quot;, pch=18) lambda1&lt;-quadratcount(sismos, nx=4,ny=4) plot(lambda1, main=&quot; Intensidad reticula 4*4&quot;, cex=1) # Lamda Retícula 5X5 lambda2&lt;-quadratcount(sismos, nx=5,ny=5) plot(lambda2, main=&quot; Intensidad reticula 5*5&quot;, cex=1) #Lamda 6X6 lambda3&lt;-quadratcount(sismos, nx=6,ny=6) plot(lambda3, main=&quot;Intensidad reticula 6*6&quot;, cex=1) 12.6.1.3 Pruebas de Aleatoriedad basadas en distancias El análisis de aleatoriedad permite identificar si los datos de se distribuyen aleatoriamente y visualizar e identificar áreas de alta y baja densidad, mostrando si están agrupados y dónde. Sin embargo, también existen algunos mmétodos basados en distancias que permiten cuantificar las propiedades de segundo orden de los datos, es decir, la influencia que de acuerdo con la ubicación tiene unos datos sobre otros. Las medidas basadas en la distancia analizan la distribución espacial de los puntos usando distancias entre pares de puntos, y la mayoría usa la distancia euclidiana, para determinar cuantitativamente si los datos están, nuevamente, distribuidos al azar o muestran signos de agrupamiento o dispersión. Estos métodos son una alternativa más rigurosa al uso del enfoque de análisis de cuadrantes y permiten evaluar el agrupamiento dentro del conjunto de datos puntuales tanto a escala global como local. #================================================================= #Gráficas de las funciones de distribución empíricas G-hat y F-hat #================================================================= n &lt;- length(sismos$x) x11() par(mfrow=c(1,2)) #================================================ #Para calcular la función G #================================================ sismos.ghat &lt;- Gest(sismos) plot(sismos.ghat,xlab=&quot;r&quot;,ylab=&quot;Ghat(r)&quot;) Genv&lt;-envelope(sismos,fun=&quot;Gest&quot;,nsim=999,nrank=5) ## Generating 999 simulations of CSR ... ## 1, 2, 3, ......10.........20.........30.........40.........50.........60.........70.........80.........90......... ## 100.........110.........120.........130.........140.........150.........160.........170.........180.........190........ ## .200.........210.........220.........230.........240.........250.........260.........270.........280.........290....... ## ..300.........310.........320.........330.........340.........350.........360.........370.........380.........390...... ## ...400.........410.........420.........430.........440.........450.........460.........470.........480.........490..... ## ....500.........510.........520.........530.........540.........550.........560.........570.........580.........590.... ## .....600.........610.........620.........630.........640.........650.........660.........670.........680.........690... ## ......700.........710.........720.........730.........740.........750.........760.........770.........780.........790.. ## .......800.........810.........820.........830.........840.........850.........860.........870.........880.........890. ## ........900.........910.........920.........930.........940.........950.........960.........970.........980.........990 ## ........ 999. ## ## Done. plot(Genv,xlab=&quot;r&quot;,ylab=&quot;Ghat(r)&quot;,cex.lab=1.6,cex.axis=1.5,main=&quot;G-Hat&quot;,cex.main=1.5) #Test Hopkins-Skellam #Ho: El patrón espacial es completamente aleatorizado #Ha: El patrón espacial no es completamente aleatorizado #Nivel de significancia (alpha=0.05) hopskel.test(sismos, method = &quot;MonteCarlo&quot;, nsim = 999) ## ## Hopkins-Skellam test of CSR ## Monte Carlo test based on 999 simulations of CSR with fixed n ## ## data: sismos ## A = 0.0018746, p-value = 0.002 ## alternative hypothesis: two-sided #================================================ #Para calcular la función F #================================================ sismos.fhat &lt;- Fest(sismos) plot(sismos.fhat,xlab=&quot;r&quot;,ylab=&quot;Fhat(r)&quot;) Fenv&lt;-envelope(sismos,fun=&quot;Fest&quot;,nsim=999,nrank=5) ## Generating 999 simulations of CSR ... ## 1, 2, 3, ......10.........20.........30.........40.........50.........60.........70.........80.........90......... ## 100.........110.........120.........130.........140.........150.........160.........170.........180.........190........ ## .200.........210.........220.........230.........240.........250.........260.........270.........280.........290....... ## ..300.........310.........320.........330.........340.........350.........360.........370.........380.........390...... ## ...400.........410.........420.........430.........440.........450.........460.........470.........480.........490..... ## ....500.........510.........520.........530.........540.........550.........560.........570.........580.........590.... ## .....600.........610.........620.........630.........640.........650.........660.........670.........680.........690... ## ......700.........710.........720.........730.........740.........750.........760.........770.........780.........790.. ## .......800.........810.........820.........830.........840.........850.........860.........870.........880.........890. ## ........900.........910.........920.........930.........940.........950.........960.........970.........980.........990 ## ........ 999. ## ## Done. plot(Fenv,xlab=&quot;r&quot;,ylab=&quot;Fhat(r)&quot;,cex.lab=1.6,cex.axis=1.5,main=&quot;F-Hat&quot;,cex.main=1.5) 12.6.1.3.1 Funciones de Ripley La función K de Ripley analiza la distancia entre un punto y “todas las distancias” a otros puntos y la compara automáticamente con un patrón de puntos de distribución de Poisson. Esta función esencialmente resume la distancia entre puntos para todas las distancias usando bandas de distancia radial. El cálculo es relativamente sencillo: Para el evento de punto A, cuente el número de puntos dentro de un búfer (radio) de cierto tamaño. Luego cuente el número de puntos dentro de un búfer (radio) un poco más grande. Repita esto para cada evento de punto en el conjunto de datos. Calcule el número medio de puntos en cada zona de influencia (radio) y divídalo por la densidad total de puntos. Repita esto utilizando puntos extraídos de un modelo aleatorio de Poisson para el mismo conjunto de zonas de influencia. Compare la distribución observada con la distribución con la distribución de Poisson. #================================================================= #Gráficas de las funciones K y L de Ripley #================================================================= #================================================ #Para calcular la función K #================================================ sismos.khat &lt;- Kest(sismos) plot(sismos.khat$r,sismos.khat$iso,xlab=&quot;r&quot;,ylab=&quot;Ripley&#39;s K&quot;) lines(sismos.khat$r,sismos.khat$theo,lty=8,lwd=2) #================================================ #Para calcular la función L #================================================ sismos.lhat &lt;- Lest(sismos) plot(sismos.lhat$r,sismos.lhat$iso,xlab=&quot;r&quot;,ylab=&quot;Ripley&#39;s L&quot;) lines(sismos.lhat$r,sismos.lhat$theo,lty=8,lwd=2) 12.6.1.4 Estimación de la intensidad Las técnicas basadas en la densidad se utilizan para caracterizar el patrón de un conjunto de datos utilizando su distribución general.Es posible calcular densidades tanto a escala global como local. Sin embargo, en el análisis de patrones puntuales, la densidad global realmente no dice mucho sobre la distribución de los datos, en términos de áreas de alta y baja densidad, por ejemplo. Aquí es donde las técnicas de densidad local, como la estimación de la densidad y la intensidad, pueden ayudar a visualizar estas diferencias en la distribución de los datos.Dentro del análisis espacial, la estimación de la densidad produce una superficie (ráster) que detalla la distribución estimada de los datos en el espacio. Cada celda dentro del ráster contiene un valor que corresponde con la densidad estimada en esa ubicación; cuando se visualiza en su totalidad el ráster completo, se puede identificar rápidamente áreas de alta y baja densidad, es decir, dónde están ubicados los grupos en el conjunto de datos. Un kernel define la forma y el tamaño de la ventana y también puede ponderar los puntos, utilizando una función de kernel definida (Gimond, 2020). La función kernel más simple es un kernel básico donde a cada punto de la ventana del kernel se le asigna el mismo peso. La superficie resultante se crea a partir de estos valores de densidad calculados localmente de forma individual. #========================================================================== ########################Estimación de la intensidad######################## #========================================================================== #================================================ #Por medio de kernel Gaussiano #================================================ #Ancho de banda ideal (mínimo mse) banda &lt;- 18939.72936 dengaus=density(sismos,kernel=&quot;gaussian&quot;, bw = banda) x11() plot(dengaus) plot(S,add = TRUE) contour(dengaus, add = TRUE) x11() plot(dengaus) persp(dengaus) x11() contour(dengaus) plot(S,add = TRUE) #Marcas según la intensidad del sismo #Menor a 3.5 en la escala de Richter #y entre 3.5 y 5.5 en la escala de Richter Datos1=read.table(&quot;data_11_PatronesPuntuales/6_PatronesPuntuales/Datos/Datos_Sismos_2009_1.txt&quot;,dec=&quot;,&quot;,sep=&quot;\\t&quot;,header=T) sismos1=ppp(Datos1$X,Datos1$Y,marks=Datos1$Marcas,window=owin(c(450433,1806815),c(22875.5,1870870.5))) Datos1$cat &lt;- as.factor(Datos1$Marcas) mpp=ppp(Datos1$X,Datos1$Y,marks=Datos1$cat,window=owin(c(450433,1806815),c(22875.5,1870870.5))) spp &lt;- split(mpp) dengaus1=density(spp[1:1],kernel=&quot;gaussian&quot;) dengaus2=density(spp[2:2],kernel=&quot;gaussian&quot;) x11() plot(dengaus1) plot(S,add = TRUE) plot(dengaus2) plot(S,add = TRUE) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
